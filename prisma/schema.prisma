
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  ADVISOR
  COURSE_INSTRUCTOR
}

model Admin {
  Admin_id      Int      @id @default(autoincrement())
  A_fristname   String
  A_lastname    String
  A_username    String   
  A_password    String  
  role          Role        @default(ADMIN)
  A_phone       Int?
  A_email       String? 
}

model COURSE_INSTRUCTOR {
  C_id          Int      @id @default(autoincrement())
  C_fristname   String
  C_lastname    String
  C_username    String   
  C_password    String  
  role          Role        @default(COURSE_INSTRUCTOR)
  C_phone       Int?
  C_email       String? 
}

model Student {
  S_id          String    
  S_fristname   String
  S_lastname    String
  S_username    String  
  S_password    String  
  role          Role        @default(STUDENT)
  S_phone       String?     // อนุญาตให้เป็น null
  S_email       String?     // อนุญาตให้เป็น null

  classroom     Classroom   @relation(fields: [room],references: [roomname])
  room          String          

  @@id([S_id, S_username])
}

model Teacher {
  T_id            Int         @default(autoincrement())
  T_fristname     String
  T_lastname      String
  T_username      String      
  T_password      String  
  role            Role        @default(ADVISOR)
  T_phone         Int?
  T_email         String? 

  advisorrooms    Advisor[]

  @@id([T_id , T_fristname , T_lastname])
}

model Classroom {
  roomname      String     @id 

  teachers      Advisor[]
  students      Student[] 
}

model Advisor {
  Advisor_id                Int         @id @default(autoincrement())

  teacher             Teacher     @relation(fields: [teacherId, teacherfristName, teacherlastName], references: [T_id,T_fristname,T_lastname])
  teacherId           Int
  teacherfristName    String
  teacherlastName     String

  classroom           Classroom     @relation(fields: [roomName], references: [roomname])
  roomName            String

}


//major by PPYz
model Major {
  id              Int      @id @default(autoincrement())
  majorNameTH     String
  majorNameENG    String
  majorYear       String
  majorUnit       String
  majorStatus     String
  majorCode       String
  majorSupervisor String
  categories      Category[]
  courses         Course[]
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String
  categoryUnit String
  major        Major    @relation(fields: [majorId], references: [id])
  majorId      Int
  groups       Group[]
  courses      Course[]
}
model Group {
  id            Int      @id @default(autoincrement())
  groupName     String
  groupUnit     String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  parentGroup   Group?   @relation("Subgroups", fields: [parentGroupId], references: [id])
  parentGroupId Int? 
  subgroups     Group[]  @relation("Subgroups")
  courses       Course[]
}
///parentGroup: เป็นการเชื่อมโยงแบบ Many-to-One กับ Group โดยใช้ parentGroupId เป็น foreign key หมายถึงกลุ่มย่อยสามารถเชื่อมโยงกับกลุ่มหลักได้หนึ่งกลุ่ม
//subgroups: เป็นการเชื่อมโยงแบบ One-to-Many กับ Group ในความสัมพันธ์แบบ self-referential หมายถึงกลุ่มหนึ่งสามารถมีหลายกลุ่มย่อยได้




model Course {
  id           Int      @id @default(autoincrement())
  courseCode   String
  courseNameTH String
  courseNameENG String
  courseYear   String
  courseUnit   Int
  major        Major    @relation(fields: [majorId], references: [id])
  majorId      Int
  category     Category @relation(fields: [categoryId], references: [id])
  categoryId   Int
  group        Group?   @relation(fields: [groupId], references: [id])
  groupId      Int?
}
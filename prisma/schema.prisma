generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Grade {
  A
  B
  B_plus
  C
  C_plus
  D
  D_plus
  E
  PASS
  FAIL
}

enum FreeSubject {
  true
  false
}

model academic_disciplines {
  academic_id   Int    @id @default(autoincrement())
  academic_name String

  major       major[]
  admin       admin[]
  advisor     advisor[]
  course_in   course_in[]
  studnet     student[]
  studentplan studentplan[]
  section     section[]
}

model admin {
  admin_id  Int     @id @default(autoincrement())
  username  String  @unique @db.VarChar(255)
  password  String  @db.VarChar(255)
  firstname String  @db.VarChar(255)
  lastname  String  @db.VarChar(255)
  phone     String? @db.VarChar(10)
  email     String? @db.VarChar(255)

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model advisor {
  advisor_id Int     @id @default(autoincrement())
  username   String  @unique @db.VarChar(255)
  password   String  @db.VarChar(255)
  firstname  String  @db.VarChar(255)
  lastname   String  @db.VarChar(255)
  sec_id     Int
  phone      String? @db.VarChar(50)
  email      String? @db.VarChar(255)
  section    section @relation(fields: [sec_id], references: [sec_id])

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model category {
  category_id   Int           @id @default(autoincrement())
  category_name String        @db.VarChar(255)
  category_unit Int
  major_id      Int
  major         major         @relation(fields: [major_id], references: [major_id])
  course        course[]
  group_major   group_major[]
}

model course {
  course_id        String         @id
  courseNameTH     String         @db.VarChar(255)
  courseNameENG    String         @db.VarChar(255)
  courseUnit       Int
  courseTheory     Int?
  coursePractice   Int?
  categoryResearch Int?
  category_id      Int
  group_id         Int
  freesubject      FreeSubject    @default(false)
  category         category?      @relation(fields: [category_id], references: [category_id])
  group_major      group_major?   @relation(fields: [group_id], references: [group_id])
  major_course     major_course[]
  studentplan      studentplan[]
}

model course_in {
  courseinstructor_id Int     @id @default(autoincrement())
  username            String  @unique @db.VarChar(255)
  password            String  @db.VarChar(255)
  firstname           String  @db.VarChar(255)
  lastname            String  @db.VarChar(255)
  phone               String? @db.VarChar(10)
  email               String? @db.VarChar(255)

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model group_major {
  group_id    Int      @id @default(autoincrement())
  group_name  String   @db.VarChar(255)
  group_unit  Int
  category_id Int
  course      course[]
  category    category @relation(fields: [category_id], references: [category_id])
}

enum Status {
  ACTIVE
  INACTIVE
}

model major {
  major_id     Int            @id @default(autoincrement())
  major_code   String         @db.VarChar(255)
  majorNameTH  String         @db.VarChar(255)
  majorNameENG String         @db.VarChar(255)
  majorYear    String         @db.VarChar(50)
  majorUnit    String         @db.VarChar(50)
  status       Status         @default(ACTIVE)
  category     category[]
  major_course major_course[]

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model major_course {
  mc_id     Int    @id @default(autoincrement())
  major_id  Int
  course_id String
  course    course @relation(fields: [course_id], references: [course_id])
  major     major  @relation(fields: [major_id], references: [major_id])
}

model register {
  register_id    Int         @id @default(autoincrement())
  student_id     String
  grade          Grade?
  teacher_name   String?     @db.VarChar(255)
  studentplan_id Int
  student        student     @relation(fields: [student_id], references: [student_id])
  studentplan    studentplan @relation(fields: [studentplan_id], references: [studentplan_id])
}

model section {
  sec_id   Int       @id @default(autoincrement())
  sec_name String    @db.VarChar(255)

  advisor  advisor[]
  student  student[]

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model student {
  student_id String     @id
  username   String     @unique @db.VarChar(255)
  password   String     @db.VarChar(255)
  firstname  String     @db.VarChar(255)
  lastname   String     @db.VarChar(255)
  phone      String?    @db.VarChar(10)
  email      String?    @db.VarChar(255)
  sec_id     Int
  register   register[]
  section    section    @relation(fields: [sec_id], references: [sec_id])

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])

  //info
  firstnameEng      String?
  lastnameEng       String?
  personal_id       String? //เลขประจำตัวประชาชน
  corps             String? //คณะ
  center            String? //ศูนย์
  major             String? //สาขาวิชา
  minor_subject     String? //วิชาโท
  status            String? //สถานภาพ
  entered_join      String? //วิธีรับเข้า
  pre_educational   String? //วุฒิก่อนเข้ารับการศึกษา
  submission_status String? //สถานะส่งวุฒิการศึกษา
  graduated_from    String? //จบการศึกษาจาก
  advisor           String? //advisor
  address           String? //ที่อยู่
}

model studentplan {
  studentplan_id Int        @id @default(autoincrement())
  year           String     @db.VarChar(50)
  semester       Int
  course_id      String
  register       register[]
  course         course     @relation(fields: [course_id], references: [course_id])

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model teacher {
  teacher_id Int    @id @default(autoincrement())
  titlename  String @db.VarChar(255)
  firstname  String @db.VarChar(255)
  lastname   String @db.VarChar(255)
}

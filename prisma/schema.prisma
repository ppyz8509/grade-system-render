// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  ADVISOR
  COURSE_INSTRUCTOR
  TEACHER
}

model Admin {
  Admin_id      Int      @id @default(autoincrement())
  A_firstname   String
  A_lastname    String
  A_username    String   
  A_password    String  
  role          Role        @default(ADMIN)
  A_phone       Int?
  A_email       String? 
}


model CourseInstructor {
  C_id          Int      @id @default(autoincrement())
  C_firstname   String
  C_lastname    String
  C_username    String   
  C_password    String  
  role          Role        @default(COURSE_INSTRUCTOR)
  C_phone       Int?
  C_email       String? 
}

model Student {
  S_id          String      @id
  S_firstname   String
  S_lastname    String
  S_password    String
  role          Role        @default(STUDENT)
  S_phone       String?     // อนุญาตให้เป็น null
  S_email       String?     // อนุญาตให้เป็น null

  classroom     Classroom   @relation("roomname",fields: [room],references: [roomname])
  room          String          

//  roomName      Classroom?   @relation("studentName")
  
}

model Teacher {
  T_id            Int        @id @default(autoincrement())
  T_firstname     String 
  T_lastname      String 
  T_username      String      
  T_password      String  
  role            Role        @default(TEACHER)
  T_phone         String?
  T_email         String? 

  advisorrooms    Advisor[]
//  room                Classroom[]   @relation("advisorName")
}

model Classroom {
  roomname      String     @id 

  teachers            Advisor[]     @relation("room")
  students            Student[]     @relation("roomname")
  // advisor             Teacher       @relation("advisorName",fields: [advisorId], references: [T_id])
  // advisorId           Int           
  // advisorfirstName    String?
  // advisorlastName     String?

  advisor             Advisor       @relation(fields: [advisorId], references: [Advisor_id])
  advisorId           Int

  // student             Student       @relation("studentName",fields: [studentId], references: [S_id])
  // studentId           String        @unique
  // studentfirstName    String?
  // studentlastName     String?
}

model Advisor {
  Advisor_id          Int           @id @default(autoincrement())
  role                Role          @default(ADVISOR)

  teacher             Teacher       @relation(fields: [teacherId], references: [T_id])
  teacherId           Int
  teacherfirstName    String?
  teacherlastName     String?

  classroomname          Classroom     @relation("room",fields: [roomName], references: [roomname])
  roomName            String
  rooms               Classroom[]
  
}


enum Status {
  ACTIVE
  INACTIVE
}

model Major {
  Major_id       String   @id @unique  // เปลี่ยนเป็น String
  majorNameTH    String
  majorNameENG   String
  majorYear      Int
  majorUnit      Int
  status         Status
  categories     Category[]  // เชื่อมต่อกับ Category ผ่านฟิลด์ categories
  courses        Course[]  // เชื่อมต่อกับ Course ผ่านฟิลด์ courses
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String
  categoryUnit Int
  major        Major    @relation(fields: [majorId], references: [Major_id])  // เชื่อมต่อกับ Major ผ่านฟิลด์ major
  majorId      String   // เปลี่ยนเป็น String
  groups       Group[]  // เชื่อมต่อกับ Group ผ่านฟิลด์ groups
  courses      Course[]  // เชื่อมต่อกับ Course ผ่านฟิลด์ courses
}

model Group {
  id            Int      @id @default(autoincrement())
  groupName     String
  groupUnit     Int
  category      Category @relation(fields: [categoryId], references: [id])  // เชื่อมต่อกับ Category ผ่านฟิลด์ category
  categoryId    Int
  courses       Course[]  // เชื่อมต่อกับ Course ผ่านฟิลด์ courses
}

model Course {
  Course_id     String   @id @unique  // เปลี่ยนเป็น String
  courseNameTH  String
  courseNameENG String
  courseYear    String  // เช่น 3(3-0-6)
  courseUnit    Int     // เช่น 3
  major         Major    @relation(fields: [majorId], references: [Major_id])  // เชื่อมต่อกับ Major ผ่านฟิลด์ major
  majorId       String   // เปลี่ยนเป็น String
  category      Category @relation(fields: [categoryId], references: [id])  // เชื่อมต่อกับ Category ผ่านฟิลด์ category
  categoryId    Int
  group         Group?   @relation(fields: [groupId], references: [id])  // เชื่อมต่อกับ Group ผ่านฟิลด์ group
  groupId       Int?
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

enum Grade {
  A
  B
  B_plus
  C
  C_plus
  D
  D_plus
  E
  PASS
  FAIL
}

enum FreeSubject {
  true
  false
}

model academic_disciplines {
  academic_id   Int    @id @default(autoincrement())
  academic_name String

  major                 major[]
  admin                 admin[]
  advisor               advisor[]
  course_in             course_in[]
  studnet               student[]
  studentplan           studentplan[]
  Listcoursestudentplan Listcoursestudentplan[]
  section               section[]
}

model superadmin {
  superadmin_id Int     @id @default(autoincrement())
  username      String  @unique @db.VarChar(255)
  password      String  @db.VarChar(255)
  firstname     String  @db.VarChar(255)
  lastname      String  @db.VarChar(255)
  phone         String? @db.VarChar(10)
  email         String? @db.VarChar(255)
}

model admin {
  admin_id  Int     @id @default(autoincrement())
  username  String  @unique @db.VarChar(255)
  password  String  @db.VarChar(255)
  firstname String  @db.VarChar(255)
  lastname  String  @db.VarChar(255)
  phone     String? @db.VarChar(10)
  email     String? @db.VarChar(255)

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model advisor {
  advisor_id Int     @id @default(autoincrement())
  username   String  @unique @db.VarChar(255)
  password   String  @db.VarChar(255)
  firstname  String  @db.VarChar(255)
  lastname   String  @db.VarChar(255)
  sec_id     Int
  phone      String? @db.VarChar(50)
  email      String? @db.VarChar(255)
  section    section @relation(fields: [sec_id], references: [sec_id])
  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
  student    student[]
}

model category {
  category_id   Int           @id @default(autoincrement())
  category_name String        @db.VarChar(255)
  category_unit Int
  major_id      Int
  major         major         @relation(fields: [major_id], references: [major_id])
  course        course[]
  group_major   group_major[]
}

model course {
  course_id          String                  @id
  courseNameTH       String                  @db.VarChar(255)
  courseNameENG      String                  @db.VarChar(255)
  courseUnit         Int
  courseTheory       Int?
  coursePractice     Int?
  categoryResearch   Int?
  category_id        Int
  group_id           Int

  category           category?               @relation(fields: [category_id], references: [category_id])
  group_major        group_major?            @relation(fields: [group_id], references: [group_id])
  studentplan        Listcoursestudentplan[]
  listcourseregister listcourseregister[]
}

model course_in {
  courseinstructor_id Int     @id @default(autoincrement())
  username            String  @unique @db.VarChar(255)
  password            String  @db.VarChar(255)
  firstname           String  @db.VarChar(255)
  lastname            String  @db.VarChar(255)
  phone               String? @db.VarChar(10)
  email               String? @db.VarChar(255)

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model group_major {
  group_id    Int      @id @default(autoincrement())
  group_name  String   @db.VarChar(255)
  group_unit  Int
  category_id Int
  course      course[]
  category    category @relation(fields: [category_id], references: [category_id])
}

enum Status {
  ACTIVE
  INACTIVE
}

model major {
  major_id     Int                  @id @default(autoincrement())
  major_code   String               @db.VarChar(255)
  majorNameTH  String               @db.VarChar(255)
  majorNameENG String               @db.VarChar(255)
  majorYear    String               @db.VarChar(50)
  majorUnit    String               @db.VarChar(50)
  status       Status               @default(ACTIVE)
  category     category[]
  studentplan  studentplan[]
  student      student[]
  register     register[]
  academic_id  Int
  academic     academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model register {
  register_id    Int    @id @default(autoincrement())
  student_id     String
  studentplan_id Int
  year           String @db.VarChar(50)
  semester       Int

  major_id       Int
  major          major                @relation(fields: [major_id], references: [major_id])

  student            student              @relation(fields: [student_id], references: [student_id])
  studentplan        studentplan          @relation(fields: [studentplan_id], references: [studentplan_id])
  listcourseregister listcourseregister[]
}

model listcourseregister {
  listcourseregister_id Int    @id @default(autoincrement())
  grade                 Grade?
  teacher_id            Int?
  course_id             String
  register_id           Int
  freesubject        FreeSubject             @default(false)
  course   course   @relation(fields: [course_id], references: [course_id])
  register register @relation(fields: [register_id], references: [register_id])
  teacher  teacher? @relation(fields: [teacher_id], references: [teacher_id])
}

model section {
  sec_id   Int    @id @default(autoincrement())
  sec_name String @db.VarChar(255)

  advisor advisor[]
  student student[]

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])
}

model student {
  student_id  String     @id
  username    String     @unique @db.VarChar(255)
  password    String     @db.VarChar(255)
  titlenameTh String     @db.VarChar(255)
  firstname   String     @db.VarChar(255)
  lastname    String     @db.VarChar(255)
  phone       String?    @db.VarChar(10)
  email       String?    @db.VarChar(255)
  sec_id      Int
  advisor_id  Int
  advisor     advisor    @relation(fields: [advisor_id], references: [advisor_id])
  register    register[]
  section     section    @relation(fields: [sec_id], references: [sec_id])

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])

  major_id       Int
  major          major                @relation(fields: [major_id], references: [major_id])

  //info
  birthdate        String?
  monthdate        String?
  yeardate         String?
  titlenameEng     String?  @db.VarChar(255)
  firstnameEng     String?
  lastnameEng      String?
  sector_status    String? //เป็นนักศึกษาภาค….ปกติ กศ.พป. ปริญญาตรี
  corps            String?
  pre_educational  String?
  graduated_from   String?
  pregraduatedyear String?
  afterendcontact  String?
  homenumber       String?
  road             String?
  alley            String?
  subdistrict      String?
  district         String?
  province         String?
  zipcode          String?
  wanttoend        String?
  yeartoend        String?
}

model studentplan {
  studentplan_id Int                  @id @default(autoincrement())
  year           String               @db.VarChar(50)
  semester       Int
  register       register[]

  academic_id    Int
  academic       academic_disciplines @relation(fields: [academic_id], references: [academic_id])

  major_id       Int
  major          major                @relation(fields: [major_id], references: [major_id])

  Listcoursestudentplan Listcoursestudentplan[]
}

model Listcoursestudentplan {
  Listcoursestudentplan_id Int    @id @default(autoincrement())
  course_id                String
  course                   course @relation(fields: [course_id], references: [course_id])

  academic_id Int
  academic    academic_disciplines @relation(fields: [academic_id], references: [academic_id])

  studentplan_id Int
  studentplan    studentplan @relation(fields: [studentplan_id], references: [studentplan_id])
}

model teacher {
  teacher_id Int @id @default(autoincrement())

  titlename          String               @db.VarChar(255)
  firstname          String               @db.VarChar(255)
  lastname           String               @db.VarChar(255)
  listcourseregister listcourseregister[]
}

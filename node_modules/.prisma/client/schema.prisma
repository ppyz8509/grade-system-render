// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  STUDENT
  ADVISOR
  COURSE_INSTRUCTOR
}

model User {
  id          Int          @id @default(autoincrement())
  name        String
  username    String       @unique
  password    String
  role        Role
  studentInfo StudentInfo?
}

model StudentInfo {
  id            Int           @id @default(autoincrement())
  student       User          @relation(fields: [studentsId], references: [id])
  studentsId    Int           @unique
  studentIdcard Int
  year          Int
  room          Int
  studentPlan   StudentPlan[]
}

model StudentPlan {
  id              Int    @id @default(autoincrement())
  studentPlanName String
  studentPlanYear String

  student    StudentInfo? @relation(fields: [studentsId], references: [id])
  studentsId Int?         @unique

  category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   Int?
  categoryName String?

  group     Group?  @relation(fields: [groupId], references: [id])
  groupId   Int?
  groupName String?

  course     Course? @relation(fields: [courseId], references: [id])
  courseId   Int?
  courseName String?
}

model Major {
  id              Int        @id @default(autoincrement())
  majorNameTH     String
  majorNameENG    String
  majorYear       String
  majorUnit       String
  majorStatus     String
  majorCode       String
  majorSupervisor String
  categories      Category[]
  courses         Course[]
}

model Category {
  id           Int           @id @default(autoincrement())
  categoryName String
  categoryUnit String
  major        Major         @relation(fields: [majorId], references: [id])
  majorId      Int
  groups       Group[]
  courses      Course[]
  studentPlans StudentPlan[]
}

model Group {
  id            Int           @id @default(autoincrement())
  groupName     String
  groupUnit     String
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    Int
  parentGroup   Group?        @relation("Subgroups", fields: [parentGroupId], references: [id])
  parentGroupId Int?
  subgroups     Group[]       @relation("Subgroups")
  courses       Course[]
  studentPlans  StudentPlan[]
}

model Course {
  id            Int           @id @default(autoincrement())
  courseCode    String
  courseNameTH  String
  courseNameENG String
  courseYear    String
  courseUnit    Int
  major         Major         @relation(fields: [majorId], references: [id])
  majorId       Int
  category      Category      @relation(fields: [categoryId], references: [id])
  categoryId    Int
  group         Group?        @relation(fields: [groupId], references: [id])
  groupId       Int?
  studentPlans  StudentPlan[]
}

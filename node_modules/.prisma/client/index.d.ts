
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model StudentInfo
 * 
 */
export type StudentInfo = $Result.DefaultSelection<Prisma.$StudentInfoPayload>
/**
 * Model StudentPlan
 * 
 */
export type StudentPlan = $Result.DefaultSelection<Prisma.$StudentPlanPayload>
/**
 * Model CourseInstructor
 * 
 */
export type CourseInstructor = $Result.DefaultSelection<Prisma.$CourseInstructorPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  STUDENT: 'STUDENT',
  ADVISOR: 'ADVISOR',
  COURSE_INSTRUCTOR: 'COURSE_INSTRUCTOR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.studentInfo`: Exposes CRUD operations for the **StudentInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentInfos
    * const studentInfos = await prisma.studentInfo.findMany()
    * ```
    */
  get studentInfo(): Prisma.StudentInfoDelegate<ExtArgs>;

  /**
   * `prisma.studentPlan`: Exposes CRUD operations for the **StudentPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentPlans
    * const studentPlans = await prisma.studentPlan.findMany()
    * ```
    */
  get studentPlan(): Prisma.StudentPlanDelegate<ExtArgs>;

  /**
   * `prisma.courseInstructor`: Exposes CRUD operations for the **CourseInstructor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseInstructors
    * const courseInstructors = await prisma.courseInstructor.findMany()
    * ```
    */
  get courseInstructor(): Prisma.CourseInstructorDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    StudentInfo: 'StudentInfo',
    StudentPlan: 'StudentPlan',
    CourseInstructor: 'CourseInstructor',
    Course: 'Course'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'studentInfo' | 'studentPlan' | 'courseInstructor' | 'course'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      StudentInfo: {
        payload: Prisma.$StudentInfoPayload<ExtArgs>
        fields: Prisma.StudentInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          findFirst: {
            args: Prisma.StudentInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          findMany: {
            args: Prisma.StudentInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>[]
          }
          create: {
            args: Prisma.StudentInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          createMany: {
            args: Prisma.StudentInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentInfoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>[]
          }
          delete: {
            args: Prisma.StudentInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          update: {
            args: Prisma.StudentInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          deleteMany: {
            args: Prisma.StudentInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          aggregate: {
            args: Prisma.StudentInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentInfo>
          }
          groupBy: {
            args: Prisma.StudentInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentInfoCountAggregateOutputType> | number
          }
        }
      }
      StudentPlan: {
        payload: Prisma.$StudentPlanPayload<ExtArgs>
        fields: Prisma.StudentPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentPlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentPlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          findFirst: {
            args: Prisma.StudentPlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentPlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          findMany: {
            args: Prisma.StudentPlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>[]
          }
          create: {
            args: Prisma.StudentPlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          createMany: {
            args: Prisma.StudentPlanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentPlanCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>[]
          }
          delete: {
            args: Prisma.StudentPlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          update: {
            args: Prisma.StudentPlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          deleteMany: {
            args: Prisma.StudentPlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentPlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentPlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          aggregate: {
            args: Prisma.StudentPlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentPlan>
          }
          groupBy: {
            args: Prisma.StudentPlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentPlanCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentPlanCountAggregateOutputType> | number
          }
        }
      }
      CourseInstructor: {
        payload: Prisma.$CourseInstructorPayload<ExtArgs>
        fields: Prisma.CourseInstructorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseInstructorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseInstructorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          findFirst: {
            args: Prisma.CourseInstructorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseInstructorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          findMany: {
            args: Prisma.CourseInstructorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>[]
          }
          create: {
            args: Prisma.CourseInstructorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          createMany: {
            args: Prisma.CourseInstructorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseInstructorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>[]
          }
          delete: {
            args: Prisma.CourseInstructorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          update: {
            args: Prisma.CourseInstructorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          deleteMany: {
            args: Prisma.CourseInstructorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseInstructorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseInstructorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CourseInstructorPayload>
          }
          aggregate: {
            args: Prisma.CourseInstructorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourseInstructor>
          }
          groupBy: {
            args: Prisma.CourseInstructorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseInstructorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseInstructorCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseInstructorCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CourseInstructorCountOutputType
   */

  export type CourseInstructorCountOutputType = {
    courses: number
  }

  export type CourseInstructorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CourseInstructorCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * CourseInstructorCountOutputType without action
   */
  export type CourseInstructorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructorCountOutputType
     */
    select?: CourseInstructorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseInstructorCountOutputType without action
   */
  export type CourseInstructorCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    studentInfo?: boolean | User$studentInfoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentInfo?: boolean | User$studentInfoArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      studentInfo: Prisma.$StudentInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      username: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    studentInfo<T extends User$studentInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$studentInfoArgs<ExtArgs>>): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.studentInfo
   */
  export type User$studentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    where?: StudentInfoWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model StudentInfo
   */

  export type AggregateStudentInfo = {
    _count: StudentInfoCountAggregateOutputType | null
    _avg: StudentInfoAvgAggregateOutputType | null
    _sum: StudentInfoSumAggregateOutputType | null
    _min: StudentInfoMinAggregateOutputType | null
    _max: StudentInfoMaxAggregateOutputType | null
  }

  export type StudentInfoAvgAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoSumAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoMinAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoMaxAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoCountAggregateOutputType = {
    id: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    _all: number
  }


  export type StudentInfoAvgAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoSumAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoMinAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoMaxAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoCountAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
    _all?: true
  }

  export type StudentInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentInfo to aggregate.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentInfos
    **/
    _count?: true | StudentInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentInfoMaxAggregateInputType
  }

  export type GetStudentInfoAggregateType<T extends StudentInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentInfo[P]>
      : GetScalarType<T[P], AggregateStudentInfo[P]>
  }




  export type StudentInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentInfoWhereInput
    orderBy?: StudentInfoOrderByWithAggregationInput | StudentInfoOrderByWithAggregationInput[]
    by: StudentInfoScalarFieldEnum[] | StudentInfoScalarFieldEnum
    having?: StudentInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentInfoCountAggregateInputType | true
    _avg?: StudentInfoAvgAggregateInputType
    _sum?: StudentInfoSumAggregateInputType
    _min?: StudentInfoMinAggregateInputType
    _max?: StudentInfoMaxAggregateInputType
  }

  export type StudentInfoGroupByOutputType = {
    id: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    _count: StudentInfoCountAggregateOutputType | null
    _avg: StudentInfoAvgAggregateOutputType | null
    _sum: StudentInfoSumAggregateOutputType | null
    _min: StudentInfoMinAggregateOutputType | null
    _max: StudentInfoMaxAggregateOutputType | null
  }

  type GetStudentInfoGroupByPayload<T extends StudentInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentInfoGroupByOutputType[P]>
            : GetScalarType<T[P], StudentInfoGroupByOutputType[P]>
        }
      >
    >


  export type StudentInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    studentPlan?: boolean | StudentInfo$studentPlanArgs<ExtArgs>
  }, ExtArgs["result"]["studentInfo"]>

  export type StudentInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentInfo"]>

  export type StudentInfoSelectScalar = {
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
  }

  export type StudentInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    studentPlan?: boolean | StudentInfo$studentPlanArgs<ExtArgs>
  }
  export type StudentInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentInfo"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      studentPlan: Prisma.$StudentPlanPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentsId: number
      studentIdcard: number
      year: number
      room: number
    }, ExtArgs["result"]["studentInfo"]>
    composites: {}
  }

  type StudentInfoGetPayload<S extends boolean | null | undefined | StudentInfoDefaultArgs> = $Result.GetResult<Prisma.$StudentInfoPayload, S>

  type StudentInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentInfoCountAggregateInputType | true
    }

  export interface StudentInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentInfo'], meta: { name: 'StudentInfo' } }
    /**
     * Find zero or one StudentInfo that matches the filter.
     * @param {StudentInfoFindUniqueArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentInfoFindUniqueOrThrowArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindFirstArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindFirstArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindFirstOrThrowArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentInfos
     * const studentInfos = await prisma.studentInfo.findMany()
     * 
     * // Get first 10 StudentInfos
     * const studentInfos = await prisma.studentInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentInfoWithIdOnly = await prisma.studentInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentInfo.
     * @param {StudentInfoCreateArgs} args - Arguments to create a StudentInfo.
     * @example
     * // Create one StudentInfo
     * const StudentInfo = await prisma.studentInfo.create({
     *   data: {
     *     // ... data to create a StudentInfo
     *   }
     * })
     * 
    **/
    create<T extends StudentInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoCreateArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentInfos.
     * @param {StudentInfoCreateManyArgs} args - Arguments to create many StudentInfos.
     * @example
     * // Create many StudentInfos
     * const studentInfo = await prisma.studentInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentInfos and returns the data saved in the database.
     * @param {StudentInfoCreateManyAndReturnArgs} args - Arguments to create many StudentInfos.
     * @example
     * // Create many StudentInfos
     * const studentInfo = await prisma.studentInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentInfos and only return the `id`
     * const studentInfoWithIdOnly = await prisma.studentInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StudentInfoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a StudentInfo.
     * @param {StudentInfoDeleteArgs} args - Arguments to delete one StudentInfo.
     * @example
     * // Delete one StudentInfo
     * const StudentInfo = await prisma.studentInfo.delete({
     *   where: {
     *     // ... filter to delete one StudentInfo
     *   }
     * })
     * 
    **/
    delete<T extends StudentInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoDeleteArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentInfo.
     * @param {StudentInfoUpdateArgs} args - Arguments to update one StudentInfo.
     * @example
     * // Update one StudentInfo
     * const studentInfo = await prisma.studentInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpdateArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentInfos.
     * @param {StudentInfoDeleteManyArgs} args - Arguments to filter StudentInfos to delete.
     * @example
     * // Delete a few StudentInfos
     * const { count } = await prisma.studentInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentInfos
     * const studentInfo = await prisma.studentInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentInfo.
     * @param {StudentInfoUpsertArgs} args - Arguments to update or create a StudentInfo.
     * @example
     * // Update or create a StudentInfo
     * const studentInfo = await prisma.studentInfo.upsert({
     *   create: {
     *     // ... data to create a StudentInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentInfo we want to update
     *   }
     * })
    **/
    upsert<T extends StudentInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpsertArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoCountArgs} args - Arguments to filter StudentInfos to count.
     * @example
     * // Count the number of StudentInfos
     * const count = await prisma.studentInfo.count({
     *   where: {
     *     // ... the filter for the StudentInfos we want to count
     *   }
     * })
    **/
    count<T extends StudentInfoCountArgs>(
      args?: Subset<T, StudentInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentInfoAggregateArgs>(args: Subset<T, StudentInfoAggregateArgs>): Prisma.PrismaPromise<GetStudentInfoAggregateType<T>>

    /**
     * Group by StudentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentInfoGroupByArgs['orderBy'] }
        : { orderBy?: StudentInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentInfo model
   */
  readonly fields: StudentInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    studentPlan<T extends StudentInfo$studentPlanArgs<ExtArgs> = {}>(args?: Subset<T, StudentInfo$studentPlanArgs<ExtArgs>>): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentInfo model
   */ 
  interface StudentInfoFieldRefs {
    readonly id: FieldRef<"StudentInfo", 'Int'>
    readonly studentsId: FieldRef<"StudentInfo", 'Int'>
    readonly studentIdcard: FieldRef<"StudentInfo", 'Int'>
    readonly year: FieldRef<"StudentInfo", 'Int'>
    readonly room: FieldRef<"StudentInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentInfo findUnique
   */
  export type StudentInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo findUniqueOrThrow
   */
  export type StudentInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo findFirst
   */
  export type StudentInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentInfos.
     */
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo findFirstOrThrow
   */
  export type StudentInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentInfos.
     */
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo findMany
   */
  export type StudentInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfos to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo create
   */
  export type StudentInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentInfo.
     */
    data: XOR<StudentInfoCreateInput, StudentInfoUncheckedCreateInput>
  }

  /**
   * StudentInfo createMany
   */
  export type StudentInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentInfos.
     */
    data: StudentInfoCreateManyInput | StudentInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentInfo createManyAndReturn
   */
  export type StudentInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentInfos.
     */
    data: StudentInfoCreateManyInput | StudentInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentInfo update
   */
  export type StudentInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentInfo.
     */
    data: XOR<StudentInfoUpdateInput, StudentInfoUncheckedUpdateInput>
    /**
     * Choose, which StudentInfo to update.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo updateMany
   */
  export type StudentInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentInfos.
     */
    data: XOR<StudentInfoUpdateManyMutationInput, StudentInfoUncheckedUpdateManyInput>
    /**
     * Filter which StudentInfos to update
     */
    where?: StudentInfoWhereInput
  }

  /**
   * StudentInfo upsert
   */
  export type StudentInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentInfo to update in case it exists.
     */
    where: StudentInfoWhereUniqueInput
    /**
     * In case the StudentInfo found by the `where` argument doesn't exist, create a new StudentInfo with this data.
     */
    create: XOR<StudentInfoCreateInput, StudentInfoUncheckedCreateInput>
    /**
     * In case the StudentInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentInfoUpdateInput, StudentInfoUncheckedUpdateInput>
  }

  /**
   * StudentInfo delete
   */
  export type StudentInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter which StudentInfo to delete.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo deleteMany
   */
  export type StudentInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentInfos to delete
     */
    where?: StudentInfoWhereInput
  }

  /**
   * StudentInfo.studentPlan
   */
  export type StudentInfo$studentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    where?: StudentPlanWhereInput
  }

  /**
   * StudentInfo without action
   */
  export type StudentInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
  }


  /**
   * Model StudentPlan
   */

  export type AggregateStudentPlan = {
    _count: StudentPlanCountAggregateOutputType | null
    _avg: StudentPlanAvgAggregateOutputType | null
    _sum: StudentPlanSumAggregateOutputType | null
    _min: StudentPlanMinAggregateOutputType | null
    _max: StudentPlanMaxAggregateOutputType | null
  }

  export type StudentPlanAvgAggregateOutputType = {
    id: number | null
    studentsId: number | null
  }

  export type StudentPlanSumAggregateOutputType = {
    id: number | null
    studentsId: number | null
  }

  export type StudentPlanMinAggregateOutputType = {
    id: number | null
    studentsId: number | null
  }

  export type StudentPlanMaxAggregateOutputType = {
    id: number | null
    studentsId: number | null
  }

  export type StudentPlanCountAggregateOutputType = {
    id: number
    studentsId: number
    _all: number
  }


  export type StudentPlanAvgAggregateInputType = {
    id?: true
    studentsId?: true
  }

  export type StudentPlanSumAggregateInputType = {
    id?: true
    studentsId?: true
  }

  export type StudentPlanMinAggregateInputType = {
    id?: true
    studentsId?: true
  }

  export type StudentPlanMaxAggregateInputType = {
    id?: true
    studentsId?: true
  }

  export type StudentPlanCountAggregateInputType = {
    id?: true
    studentsId?: true
    _all?: true
  }

  export type StudentPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPlan to aggregate.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentPlans
    **/
    _count?: true | StudentPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentPlanMaxAggregateInputType
  }

  export type GetStudentPlanAggregateType<T extends StudentPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentPlan[P]>
      : GetScalarType<T[P], AggregateStudentPlan[P]>
  }




  export type StudentPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithAggregationInput | StudentPlanOrderByWithAggregationInput[]
    by: StudentPlanScalarFieldEnum[] | StudentPlanScalarFieldEnum
    having?: StudentPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentPlanCountAggregateInputType | true
    _avg?: StudentPlanAvgAggregateInputType
    _sum?: StudentPlanSumAggregateInputType
    _min?: StudentPlanMinAggregateInputType
    _max?: StudentPlanMaxAggregateInputType
  }

  export type StudentPlanGroupByOutputType = {
    id: number
    studentsId: number
    _count: StudentPlanCountAggregateOutputType | null
    _avg: StudentPlanAvgAggregateOutputType | null
    _sum: StudentPlanSumAggregateOutputType | null
    _min: StudentPlanMinAggregateOutputType | null
    _max: StudentPlanMaxAggregateOutputType | null
  }

  type GetStudentPlanGroupByPayload<T extends StudentPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentPlanGroupByOutputType[P]>
            : GetScalarType<T[P], StudentPlanGroupByOutputType[P]>
        }
      >
    >


  export type StudentPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    student?: boolean | StudentInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPlan"]>

  export type StudentPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    student?: boolean | StudentInfoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentPlan"]>

  export type StudentPlanSelectScalar = {
    id?: boolean
    studentsId?: boolean
  }

  export type StudentPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentInfoDefaultArgs<ExtArgs>
  }
  export type StudentPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentInfoDefaultArgs<ExtArgs>
  }

  export type $StudentPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentPlan"
    objects: {
      student: Prisma.$StudentInfoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentsId: number
    }, ExtArgs["result"]["studentPlan"]>
    composites: {}
  }

  type StudentPlanGetPayload<S extends boolean | null | undefined | StudentPlanDefaultArgs> = $Result.GetResult<Prisma.$StudentPlanPayload, S>

  type StudentPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentPlanCountAggregateInputType | true
    }

  export interface StudentPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentPlan'], meta: { name: 'StudentPlan' } }
    /**
     * Find zero or one StudentPlan that matches the filter.
     * @param {StudentPlanFindUniqueArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentPlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentPlanFindUniqueOrThrowArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentPlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindFirstArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentPlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindFirstArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindFirstOrThrowArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentPlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentPlans
     * const studentPlans = await prisma.studentPlan.findMany()
     * 
     * // Get first 10 StudentPlans
     * const studentPlans = await prisma.studentPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentPlanWithIdOnly = await prisma.studentPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentPlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentPlan.
     * @param {StudentPlanCreateArgs} args - Arguments to create a StudentPlan.
     * @example
     * // Create one StudentPlan
     * const StudentPlan = await prisma.studentPlan.create({
     *   data: {
     *     // ... data to create a StudentPlan
     *   }
     * })
     * 
    **/
    create<T extends StudentPlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanCreateArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentPlans.
     * @param {StudentPlanCreateManyArgs} args - Arguments to create many StudentPlans.
     * @example
     * // Create many StudentPlans
     * const studentPlan = await prisma.studentPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentPlanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentPlans and returns the data saved in the database.
     * @param {StudentPlanCreateManyAndReturnArgs} args - Arguments to create many StudentPlans.
     * @example
     * // Create many StudentPlans
     * const studentPlan = await prisma.studentPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentPlans and only return the `id`
     * const studentPlanWithIdOnly = await prisma.studentPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StudentPlanCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a StudentPlan.
     * @param {StudentPlanDeleteArgs} args - Arguments to delete one StudentPlan.
     * @example
     * // Delete one StudentPlan
     * const StudentPlan = await prisma.studentPlan.delete({
     *   where: {
     *     // ... filter to delete one StudentPlan
     *   }
     * })
     * 
    **/
    delete<T extends StudentPlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanDeleteArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentPlan.
     * @param {StudentPlanUpdateArgs} args - Arguments to update one StudentPlan.
     * @example
     * // Update one StudentPlan
     * const studentPlan = await prisma.studentPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentPlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpdateArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentPlans.
     * @param {StudentPlanDeleteManyArgs} args - Arguments to filter StudentPlans to delete.
     * @example
     * // Delete a few StudentPlans
     * const { count } = await prisma.studentPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentPlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentPlans
     * const studentPlan = await prisma.studentPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentPlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentPlan.
     * @param {StudentPlanUpsertArgs} args - Arguments to update or create a StudentPlan.
     * @example
     * // Update or create a StudentPlan
     * const studentPlan = await prisma.studentPlan.upsert({
     *   create: {
     *     // ... data to create a StudentPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentPlan we want to update
     *   }
     * })
    **/
    upsert<T extends StudentPlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpsertArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanCountArgs} args - Arguments to filter StudentPlans to count.
     * @example
     * // Count the number of StudentPlans
     * const count = await prisma.studentPlan.count({
     *   where: {
     *     // ... the filter for the StudentPlans we want to count
     *   }
     * })
    **/
    count<T extends StudentPlanCountArgs>(
      args?: Subset<T, StudentPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentPlanAggregateArgs>(args: Subset<T, StudentPlanAggregateArgs>): Prisma.PrismaPromise<GetStudentPlanAggregateType<T>>

    /**
     * Group by StudentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentPlanGroupByArgs['orderBy'] }
        : { orderBy?: StudentPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentPlan model
   */
  readonly fields: StudentPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends StudentInfoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StudentInfoDefaultArgs<ExtArgs>>): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentPlan model
   */ 
  interface StudentPlanFieldRefs {
    readonly id: FieldRef<"StudentPlan", 'Int'>
    readonly studentsId: FieldRef<"StudentPlan", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentPlan findUnique
   */
  export type StudentPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan findUniqueOrThrow
   */
  export type StudentPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan findFirst
   */
  export type StudentPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPlans.
     */
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan findFirstOrThrow
   */
  export type StudentPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPlans.
     */
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan findMany
   */
  export type StudentPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlans to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan create
   */
  export type StudentPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentPlan.
     */
    data: XOR<StudentPlanCreateInput, StudentPlanUncheckedCreateInput>
  }

  /**
   * StudentPlan createMany
   */
  export type StudentPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentPlans.
     */
    data: StudentPlanCreateManyInput | StudentPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentPlan createManyAndReturn
   */
  export type StudentPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentPlans.
     */
    data: StudentPlanCreateManyInput | StudentPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPlan update
   */
  export type StudentPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentPlan.
     */
    data: XOR<StudentPlanUpdateInput, StudentPlanUncheckedUpdateInput>
    /**
     * Choose, which StudentPlan to update.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan updateMany
   */
  export type StudentPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentPlans.
     */
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyInput>
    /**
     * Filter which StudentPlans to update
     */
    where?: StudentPlanWhereInput
  }

  /**
   * StudentPlan upsert
   */
  export type StudentPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentPlan to update in case it exists.
     */
    where: StudentPlanWhereUniqueInput
    /**
     * In case the StudentPlan found by the `where` argument doesn't exist, create a new StudentPlan with this data.
     */
    create: XOR<StudentPlanCreateInput, StudentPlanUncheckedCreateInput>
    /**
     * In case the StudentPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentPlanUpdateInput, StudentPlanUncheckedUpdateInput>
  }

  /**
   * StudentPlan delete
   */
  export type StudentPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter which StudentPlan to delete.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan deleteMany
   */
  export type StudentPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPlans to delete
     */
    where?: StudentPlanWhereInput
  }

  /**
   * StudentPlan without action
   */
  export type StudentPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
  }


  /**
   * Model CourseInstructor
   */

  export type AggregateCourseInstructor = {
    _count: CourseInstructorCountAggregateOutputType | null
    _avg: CourseInstructorAvgAggregateOutputType | null
    _sum: CourseInstructorSumAggregateOutputType | null
    _min: CourseInstructorMinAggregateOutputType | null
    _max: CourseInstructorMaxAggregateOutputType | null
  }

  export type CourseInstructorAvgAggregateOutputType = {
    id: number | null
  }

  export type CourseInstructorSumAggregateOutputType = {
    id: number | null
  }

  export type CourseInstructorMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type CourseInstructorMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type CourseInstructorCountAggregateOutputType = {
    id: number
    name: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type CourseInstructorAvgAggregateInputType = {
    id?: true
  }

  export type CourseInstructorSumAggregateInputType = {
    id?: true
  }

  export type CourseInstructorMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type CourseInstructorMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type CourseInstructorCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type CourseInstructorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseInstructor to aggregate.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseInstructors
    **/
    _count?: true | CourseInstructorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseInstructorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseInstructorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseInstructorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseInstructorMaxAggregateInputType
  }

  export type GetCourseInstructorAggregateType<T extends CourseInstructorAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseInstructor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseInstructor[P]>
      : GetScalarType<T[P], AggregateCourseInstructor[P]>
  }




  export type CourseInstructorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseInstructorWhereInput
    orderBy?: CourseInstructorOrderByWithAggregationInput | CourseInstructorOrderByWithAggregationInput[]
    by: CourseInstructorScalarFieldEnum[] | CourseInstructorScalarFieldEnum
    having?: CourseInstructorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseInstructorCountAggregateInputType | true
    _avg?: CourseInstructorAvgAggregateInputType
    _sum?: CourseInstructorSumAggregateInputType
    _min?: CourseInstructorMinAggregateInputType
    _max?: CourseInstructorMaxAggregateInputType
  }

  export type CourseInstructorGroupByOutputType = {
    id: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    _count: CourseInstructorCountAggregateOutputType | null
    _avg: CourseInstructorAvgAggregateOutputType | null
    _sum: CourseInstructorSumAggregateOutputType | null
    _min: CourseInstructorMinAggregateOutputType | null
    _max: CourseInstructorMaxAggregateOutputType | null
  }

  type GetCourseInstructorGroupByPayload<T extends CourseInstructorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseInstructorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseInstructorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseInstructorGroupByOutputType[P]>
            : GetScalarType<T[P], CourseInstructorGroupByOutputType[P]>
        }
      >
    >


  export type CourseInstructorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    courses?: boolean | CourseInstructor$coursesArgs<ExtArgs>
    _count?: boolean | CourseInstructorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseInstructor"]>

  export type CourseInstructorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["courseInstructor"]>

  export type CourseInstructorSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }

  export type CourseInstructorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    courses?: boolean | CourseInstructor$coursesArgs<ExtArgs>
    _count?: boolean | CourseInstructorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseInstructorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CourseInstructorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseInstructor"
    objects: {
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      username: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["courseInstructor"]>
    composites: {}
  }

  type CourseInstructorGetPayload<S extends boolean | null | undefined | CourseInstructorDefaultArgs> = $Result.GetResult<Prisma.$CourseInstructorPayload, S>

  type CourseInstructorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseInstructorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseInstructorCountAggregateInputType | true
    }

  export interface CourseInstructorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseInstructor'], meta: { name: 'CourseInstructor' } }
    /**
     * Find zero or one CourseInstructor that matches the filter.
     * @param {CourseInstructorFindUniqueArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseInstructorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CourseInstructor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseInstructorFindUniqueOrThrowArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseInstructorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CourseInstructor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindFirstArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseInstructorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorFindFirstArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CourseInstructor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindFirstOrThrowArgs} args - Arguments to find a CourseInstructor
     * @example
     * // Get one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseInstructorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CourseInstructors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseInstructors
     * const courseInstructors = await prisma.courseInstructor.findMany()
     * 
     * // Get first 10 CourseInstructors
     * const courseInstructors = await prisma.courseInstructor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseInstructorWithIdOnly = await prisma.courseInstructor.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseInstructorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CourseInstructor.
     * @param {CourseInstructorCreateArgs} args - Arguments to create a CourseInstructor.
     * @example
     * // Create one CourseInstructor
     * const CourseInstructor = await prisma.courseInstructor.create({
     *   data: {
     *     // ... data to create a CourseInstructor
     *   }
     * })
     * 
    **/
    create<T extends CourseInstructorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorCreateArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CourseInstructors.
     * @param {CourseInstructorCreateManyArgs} args - Arguments to create many CourseInstructors.
     * @example
     * // Create many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CourseInstructorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseInstructors and returns the data saved in the database.
     * @param {CourseInstructorCreateManyAndReturnArgs} args - Arguments to create many CourseInstructors.
     * @example
     * // Create many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseInstructors and only return the `id`
     * const courseInstructorWithIdOnly = await prisma.courseInstructor.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CourseInstructorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a CourseInstructor.
     * @param {CourseInstructorDeleteArgs} args - Arguments to delete one CourseInstructor.
     * @example
     * // Delete one CourseInstructor
     * const CourseInstructor = await prisma.courseInstructor.delete({
     *   where: {
     *     // ... filter to delete one CourseInstructor
     *   }
     * })
     * 
    **/
    delete<T extends CourseInstructorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorDeleteArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CourseInstructor.
     * @param {CourseInstructorUpdateArgs} args - Arguments to update one CourseInstructor.
     * @example
     * // Update one CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseInstructorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorUpdateArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CourseInstructors.
     * @param {CourseInstructorDeleteManyArgs} args - Arguments to filter CourseInstructors to delete.
     * @example
     * // Delete a few CourseInstructors
     * const { count } = await prisma.courseInstructor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseInstructorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseInstructorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseInstructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseInstructors
     * const courseInstructor = await prisma.courseInstructor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseInstructorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CourseInstructor.
     * @param {CourseInstructorUpsertArgs} args - Arguments to update or create a CourseInstructor.
     * @example
     * // Update or create a CourseInstructor
     * const courseInstructor = await prisma.courseInstructor.upsert({
     *   create: {
     *     // ... data to create a CourseInstructor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseInstructor we want to update
     *   }
     * })
    **/
    upsert<T extends CourseInstructorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseInstructorUpsertArgs<ExtArgs>>
    ): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CourseInstructors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorCountArgs} args - Arguments to filter CourseInstructors to count.
     * @example
     * // Count the number of CourseInstructors
     * const count = await prisma.courseInstructor.count({
     *   where: {
     *     // ... the filter for the CourseInstructors we want to count
     *   }
     * })
    **/
    count<T extends CourseInstructorCountArgs>(
      args?: Subset<T, CourseInstructorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseInstructorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseInstructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseInstructorAggregateArgs>(args: Subset<T, CourseInstructorAggregateArgs>): Prisma.PrismaPromise<GetCourseInstructorAggregateType<T>>

    /**
     * Group by CourseInstructor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseInstructorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseInstructorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseInstructorGroupByArgs['orderBy'] }
        : { orderBy?: CourseInstructorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseInstructorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseInstructorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseInstructor model
   */
  readonly fields: CourseInstructorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseInstructor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseInstructorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    courses<T extends CourseInstructor$coursesArgs<ExtArgs> = {}>(args?: Subset<T, CourseInstructor$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CourseInstructor model
   */ 
  interface CourseInstructorFieldRefs {
    readonly id: FieldRef<"CourseInstructor", 'Int'>
    readonly name: FieldRef<"CourseInstructor", 'String'>
    readonly username: FieldRef<"CourseInstructor", 'String'>
    readonly password: FieldRef<"CourseInstructor", 'String'>
    readonly role: FieldRef<"CourseInstructor", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * CourseInstructor findUnique
   */
  export type CourseInstructorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor findUniqueOrThrow
   */
  export type CourseInstructorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor findFirst
   */
  export type CourseInstructorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseInstructors.
     */
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor findFirstOrThrow
   */
  export type CourseInstructorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructor to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseInstructors.
     */
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor findMany
   */
  export type CourseInstructorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter, which CourseInstructors to fetch.
     */
    where?: CourseInstructorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseInstructors to fetch.
     */
    orderBy?: CourseInstructorOrderByWithRelationInput | CourseInstructorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseInstructors.
     */
    cursor?: CourseInstructorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseInstructors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseInstructors.
     */
    skip?: number
    distinct?: CourseInstructorScalarFieldEnum | CourseInstructorScalarFieldEnum[]
  }

  /**
   * CourseInstructor create
   */
  export type CourseInstructorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseInstructor.
     */
    data: XOR<CourseInstructorCreateInput, CourseInstructorUncheckedCreateInput>
  }

  /**
   * CourseInstructor createMany
   */
  export type CourseInstructorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseInstructors.
     */
    data: CourseInstructorCreateManyInput | CourseInstructorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseInstructor createManyAndReturn
   */
  export type CourseInstructorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CourseInstructors.
     */
    data: CourseInstructorCreateManyInput | CourseInstructorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseInstructor update
   */
  export type CourseInstructorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseInstructor.
     */
    data: XOR<CourseInstructorUpdateInput, CourseInstructorUncheckedUpdateInput>
    /**
     * Choose, which CourseInstructor to update.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor updateMany
   */
  export type CourseInstructorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseInstructors.
     */
    data: XOR<CourseInstructorUpdateManyMutationInput, CourseInstructorUncheckedUpdateManyInput>
    /**
     * Filter which CourseInstructors to update
     */
    where?: CourseInstructorWhereInput
  }

  /**
   * CourseInstructor upsert
   */
  export type CourseInstructorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseInstructor to update in case it exists.
     */
    where: CourseInstructorWhereUniqueInput
    /**
     * In case the CourseInstructor found by the `where` argument doesn't exist, create a new CourseInstructor with this data.
     */
    create: XOR<CourseInstructorCreateInput, CourseInstructorUncheckedCreateInput>
    /**
     * In case the CourseInstructor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseInstructorUpdateInput, CourseInstructorUncheckedUpdateInput>
  }

  /**
   * CourseInstructor delete
   */
  export type CourseInstructorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    /**
     * Filter which CourseInstructor to delete.
     */
    where: CourseInstructorWhereUniqueInput
  }

  /**
   * CourseInstructor deleteMany
   */
  export type CourseInstructorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseInstructors to delete
     */
    where?: CourseInstructorWhereInput
  }

  /**
   * CourseInstructor.courses
   */
  export type CourseInstructor$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * CourseInstructor without action
   */
  export type CourseInstructorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    creditUnits: number | null
    responsibleInstructorId: number | null
    creditUnitsCategory: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    creditUnits: number | null
    responsibleInstructorId: number | null
    creditUnitsCategory: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    nameThai: string | null
    nameEnglish: string | null
    creditUnits: number | null
    responsibleInstructorId: number | null
    category: string | null
    creditUnitsCategory: number | null
    groupCourseThai: string | null
    groupCourseEnglish: string | null
    semester: string | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    nameThai: string | null
    nameEnglish: string | null
    creditUnits: number | null
    responsibleInstructorId: number | null
    category: string | null
    creditUnitsCategory: number | null
    groupCourseThai: string | null
    groupCourseEnglish: string | null
    semester: string | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    nameThai: number
    nameEnglish: number
    creditUnits: number
    responsibleInstructorId: number
    category: number
    creditUnitsCategory: number
    groupCourseThai: number
    groupCourseEnglish: number
    semester: number
    mandatorySubjects: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    creditUnits?: true
    responsibleInstructorId?: true
    creditUnitsCategory?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    creditUnits?: true
    responsibleInstructorId?: true
    creditUnitsCategory?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    nameThai?: true
    nameEnglish?: true
    creditUnits?: true
    responsibleInstructorId?: true
    category?: true
    creditUnitsCategory?: true
    groupCourseThai?: true
    groupCourseEnglish?: true
    semester?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    nameThai?: true
    nameEnglish?: true
    creditUnits?: true
    responsibleInstructorId?: true
    category?: true
    creditUnitsCategory?: true
    groupCourseThai?: true
    groupCourseEnglish?: true
    semester?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    nameThai?: true
    nameEnglish?: true
    creditUnits?: true
    responsibleInstructorId?: true
    category?: true
    creditUnitsCategory?: true
    groupCourseThai?: true
    groupCourseEnglish?: true
    semester?: true
    mandatorySubjects?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    nameThai: string
    nameEnglish: string
    creditUnits: number
    responsibleInstructorId: number | null
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects: string[]
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameThai?: boolean
    nameEnglish?: boolean
    creditUnits?: boolean
    responsibleInstructorId?: boolean
    category?: boolean
    creditUnitsCategory?: boolean
    groupCourseThai?: boolean
    groupCourseEnglish?: boolean
    semester?: boolean
    mandatorySubjects?: boolean
    responsibleInstructor?: boolean | Course$responsibleInstructorArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nameThai?: boolean
    nameEnglish?: boolean
    creditUnits?: boolean
    responsibleInstructorId?: boolean
    category?: boolean
    creditUnitsCategory?: boolean
    groupCourseThai?: boolean
    groupCourseEnglish?: boolean
    semester?: boolean
    mandatorySubjects?: boolean
    responsibleInstructor?: boolean | Course$responsibleInstructorArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    nameThai?: boolean
    nameEnglish?: boolean
    creditUnits?: boolean
    responsibleInstructorId?: boolean
    category?: boolean
    creditUnitsCategory?: boolean
    groupCourseThai?: boolean
    groupCourseEnglish?: boolean
    semester?: boolean
    mandatorySubjects?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responsibleInstructor?: boolean | Course$responsibleInstructorArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    responsibleInstructor?: boolean | Course$responsibleInstructorArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      responsibleInstructor: Prisma.$CourseInstructorPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      /**
       * /ชื่อหลักสูตร(ไทย)
       */
      nameThai: string
      /**
       * /ชื่อหลักสูตร(อังกฤษ)
       */
      nameEnglish: string
      /**
       * หน่วยกิต 128+
       */
      creditUnits: number
      responsibleInstructorId: number | null
      category: string
      creditUnitsCategory: number
      groupCourseThai: string
      groupCourseEnglish: string
      semester: string
      mandatorySubjects: string[]
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    responsibleInstructor<T extends Course$responsibleInstructorArgs<ExtArgs> = {}>(args?: Subset<T, Course$responsibleInstructorArgs<ExtArgs>>): Prisma__CourseInstructorClient<$Result.GetResult<Prisma.$CourseInstructorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly nameThai: FieldRef<"Course", 'String'>
    readonly nameEnglish: FieldRef<"Course", 'String'>
    readonly creditUnits: FieldRef<"Course", 'Int'>
    readonly responsibleInstructorId: FieldRef<"Course", 'Int'>
    readonly category: FieldRef<"Course", 'String'>
    readonly creditUnitsCategory: FieldRef<"Course", 'Int'>
    readonly groupCourseThai: FieldRef<"Course", 'String'>
    readonly groupCourseEnglish: FieldRef<"Course", 'String'>
    readonly semester: FieldRef<"Course", 'String'>
    readonly mandatorySubjects: FieldRef<"Course", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.responsibleInstructor
   */
  export type Course$responsibleInstructorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseInstructor
     */
    select?: CourseInstructorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInstructorInclude<ExtArgs> | null
    where?: CourseInstructorWhereInput
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentInfoScalarFieldEnum: {
    id: 'id',
    studentsId: 'studentsId',
    studentIdcard: 'studentIdcard',
    year: 'year',
    room: 'room'
  };

  export type StudentInfoScalarFieldEnum = (typeof StudentInfoScalarFieldEnum)[keyof typeof StudentInfoScalarFieldEnum]


  export const StudentPlanScalarFieldEnum: {
    id: 'id',
    studentsId: 'studentsId'
  };

  export type StudentPlanScalarFieldEnum = (typeof StudentPlanScalarFieldEnum)[keyof typeof StudentPlanScalarFieldEnum]


  export const CourseInstructorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type CourseInstructorScalarFieldEnum = (typeof CourseInstructorScalarFieldEnum)[keyof typeof CourseInstructorScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    nameThai: 'nameThai',
    nameEnglish: 'nameEnglish',
    creditUnits: 'creditUnits',
    responsibleInstructorId: 'responsibleInstructorId',
    category: 'category',
    creditUnitsCategory: 'creditUnitsCategory',
    groupCourseThai: 'groupCourseThai',
    groupCourseEnglish: 'groupCourseEnglish',
    semester: 'semester',
    mandatorySubjects: 'mandatorySubjects'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    studentInfo?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    studentInfo?: StudentInfoOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    studentInfo?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type StudentInfoWhereInput = {
    AND?: StudentInfoWhereInput | StudentInfoWhereInput[]
    OR?: StudentInfoWhereInput[]
    NOT?: StudentInfoWhereInput | StudentInfoWhereInput[]
    id?: IntFilter<"StudentInfo"> | number
    studentsId?: IntFilter<"StudentInfo"> | number
    studentIdcard?: IntFilter<"StudentInfo"> | number
    year?: IntFilter<"StudentInfo"> | number
    room?: IntFilter<"StudentInfo"> | number
    student?: XOR<UserRelationFilter, UserWhereInput>
    studentPlan?: XOR<StudentPlanNullableRelationFilter, StudentPlanWhereInput> | null
  }

  export type StudentInfoOrderByWithRelationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
    student?: UserOrderByWithRelationInput
    studentPlan?: StudentPlanOrderByWithRelationInput
  }

  export type StudentInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentsId?: number
    AND?: StudentInfoWhereInput | StudentInfoWhereInput[]
    OR?: StudentInfoWhereInput[]
    NOT?: StudentInfoWhereInput | StudentInfoWhereInput[]
    studentIdcard?: IntFilter<"StudentInfo"> | number
    year?: IntFilter<"StudentInfo"> | number
    room?: IntFilter<"StudentInfo"> | number
    student?: XOR<UserRelationFilter, UserWhereInput>
    studentPlan?: XOR<StudentPlanNullableRelationFilter, StudentPlanWhereInput> | null
  }, "id" | "studentsId">

  export type StudentInfoOrderByWithAggregationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
    _count?: StudentInfoCountOrderByAggregateInput
    _avg?: StudentInfoAvgOrderByAggregateInput
    _max?: StudentInfoMaxOrderByAggregateInput
    _min?: StudentInfoMinOrderByAggregateInput
    _sum?: StudentInfoSumOrderByAggregateInput
  }

  export type StudentInfoScalarWhereWithAggregatesInput = {
    AND?: StudentInfoScalarWhereWithAggregatesInput | StudentInfoScalarWhereWithAggregatesInput[]
    OR?: StudentInfoScalarWhereWithAggregatesInput[]
    NOT?: StudentInfoScalarWhereWithAggregatesInput | StudentInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentInfo"> | number
    studentsId?: IntWithAggregatesFilter<"StudentInfo"> | number
    studentIdcard?: IntWithAggregatesFilter<"StudentInfo"> | number
    year?: IntWithAggregatesFilter<"StudentInfo"> | number
    room?: IntWithAggregatesFilter<"StudentInfo"> | number
  }

  export type StudentPlanWhereInput = {
    AND?: StudentPlanWhereInput | StudentPlanWhereInput[]
    OR?: StudentPlanWhereInput[]
    NOT?: StudentPlanWhereInput | StudentPlanWhereInput[]
    id?: IntFilter<"StudentPlan"> | number
    studentsId?: IntFilter<"StudentPlan"> | number
    student?: XOR<StudentInfoRelationFilter, StudentInfoWhereInput>
  }

  export type StudentPlanOrderByWithRelationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    student?: StudentInfoOrderByWithRelationInput
  }

  export type StudentPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentsId?: number
    AND?: StudentPlanWhereInput | StudentPlanWhereInput[]
    OR?: StudentPlanWhereInput[]
    NOT?: StudentPlanWhereInput | StudentPlanWhereInput[]
    student?: XOR<StudentInfoRelationFilter, StudentInfoWhereInput>
  }, "id" | "studentsId">

  export type StudentPlanOrderByWithAggregationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    _count?: StudentPlanCountOrderByAggregateInput
    _avg?: StudentPlanAvgOrderByAggregateInput
    _max?: StudentPlanMaxOrderByAggregateInput
    _min?: StudentPlanMinOrderByAggregateInput
    _sum?: StudentPlanSumOrderByAggregateInput
  }

  export type StudentPlanScalarWhereWithAggregatesInput = {
    AND?: StudentPlanScalarWhereWithAggregatesInput | StudentPlanScalarWhereWithAggregatesInput[]
    OR?: StudentPlanScalarWhereWithAggregatesInput[]
    NOT?: StudentPlanScalarWhereWithAggregatesInput | StudentPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentPlan"> | number
    studentsId?: IntWithAggregatesFilter<"StudentPlan"> | number
  }

  export type CourseInstructorWhereInput = {
    AND?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    OR?: CourseInstructorWhereInput[]
    NOT?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    id?: IntFilter<"CourseInstructor"> | number
    name?: StringFilter<"CourseInstructor"> | string
    username?: StringFilter<"CourseInstructor"> | string
    password?: StringFilter<"CourseInstructor"> | string
    role?: EnumRoleFilter<"CourseInstructor"> | $Enums.Role
    courses?: CourseListRelationFilter
  }

  export type CourseInstructorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    courses?: CourseOrderByRelationAggregateInput
  }

  export type CourseInstructorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    OR?: CourseInstructorWhereInput[]
    NOT?: CourseInstructorWhereInput | CourseInstructorWhereInput[]
    name?: StringFilter<"CourseInstructor"> | string
    password?: StringFilter<"CourseInstructor"> | string
    role?: EnumRoleFilter<"CourseInstructor"> | $Enums.Role
    courses?: CourseListRelationFilter
  }, "id" | "username">

  export type CourseInstructorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: CourseInstructorCountOrderByAggregateInput
    _avg?: CourseInstructorAvgOrderByAggregateInput
    _max?: CourseInstructorMaxOrderByAggregateInput
    _min?: CourseInstructorMinOrderByAggregateInput
    _sum?: CourseInstructorSumOrderByAggregateInput
  }

  export type CourseInstructorScalarWhereWithAggregatesInput = {
    AND?: CourseInstructorScalarWhereWithAggregatesInput | CourseInstructorScalarWhereWithAggregatesInput[]
    OR?: CourseInstructorScalarWhereWithAggregatesInput[]
    NOT?: CourseInstructorScalarWhereWithAggregatesInput | CourseInstructorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CourseInstructor"> | number
    name?: StringWithAggregatesFilter<"CourseInstructor"> | string
    username?: StringWithAggregatesFilter<"CourseInstructor"> | string
    password?: StringWithAggregatesFilter<"CourseInstructor"> | string
    role?: EnumRoleWithAggregatesFilter<"CourseInstructor"> | $Enums.Role
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    nameThai?: StringFilter<"Course"> | string
    nameEnglish?: StringFilter<"Course"> | string
    creditUnits?: IntFilter<"Course"> | number
    responsibleInstructorId?: IntNullableFilter<"Course"> | number | null
    category?: StringFilter<"Course"> | string
    creditUnitsCategory?: IntFilter<"Course"> | number
    groupCourseThai?: StringFilter<"Course"> | string
    groupCourseEnglish?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    mandatorySubjects?: StringNullableListFilter<"Course">
    responsibleInstructor?: XOR<CourseInstructorNullableRelationFilter, CourseInstructorWhereInput> | null
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    nameThai?: SortOrder
    nameEnglish?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrderInput | SortOrder
    category?: SortOrder
    creditUnitsCategory?: SortOrder
    groupCourseThai?: SortOrder
    groupCourseEnglish?: SortOrder
    semester?: SortOrder
    mandatorySubjects?: SortOrder
    responsibleInstructor?: CourseInstructorOrderByWithRelationInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    nameThai?: StringFilter<"Course"> | string
    nameEnglish?: StringFilter<"Course"> | string
    creditUnits?: IntFilter<"Course"> | number
    responsibleInstructorId?: IntNullableFilter<"Course"> | number | null
    category?: StringFilter<"Course"> | string
    creditUnitsCategory?: IntFilter<"Course"> | number
    groupCourseThai?: StringFilter<"Course"> | string
    groupCourseEnglish?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    mandatorySubjects?: StringNullableListFilter<"Course">
    responsibleInstructor?: XOR<CourseInstructorNullableRelationFilter, CourseInstructorWhereInput> | null
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    nameThai?: SortOrder
    nameEnglish?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrderInput | SortOrder
    category?: SortOrder
    creditUnitsCategory?: SortOrder
    groupCourseThai?: SortOrder
    groupCourseEnglish?: SortOrder
    semester?: SortOrder
    mandatorySubjects?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    nameThai?: StringWithAggregatesFilter<"Course"> | string
    nameEnglish?: StringWithAggregatesFilter<"Course"> | string
    creditUnits?: IntWithAggregatesFilter<"Course"> | number
    responsibleInstructorId?: IntNullableWithAggregatesFilter<"Course"> | number | null
    category?: StringWithAggregatesFilter<"Course"> | string
    creditUnitsCategory?: IntWithAggregatesFilter<"Course"> | number
    groupCourseThai?: StringWithAggregatesFilter<"Course"> | string
    groupCourseEnglish?: StringWithAggregatesFilter<"Course"> | string
    semester?: StringWithAggregatesFilter<"Course"> | string
    mandatorySubjects?: StringNullableListFilter<"Course">
  }

  export type UserCreateInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
    studentInfo?: StudentInfoCreateNestedOneWithoutStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    studentInfo?: StudentInfoUncheckedCreateNestedOneWithoutStudentInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    studentInfo?: StudentInfoUpdateOneWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    studentInfo?: StudentInfoUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type StudentInfoCreateInput = {
    studentIdcard: number
    year: number
    room: number
    student: UserCreateNestedOneWithoutStudentInfoInput
    studentPlan?: StudentPlanCreateNestedOneWithoutStudentInput
  }

  export type StudentInfoUncheckedCreateInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentInfoUpdateInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutStudentInfoNestedInput
    studentPlan?: StudentPlanUpdateOneWithoutStudentNestedInput
  }

  export type StudentInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type StudentInfoCreateManyInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
  }

  export type StudentInfoUpdateManyMutationInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type StudentInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type StudentPlanCreateInput = {
    student: StudentInfoCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateInput = {
    id?: number
    studentsId: number
  }

  export type StudentPlanUpdateInput = {
    student?: StudentInfoUpdateOneRequiredWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentPlanCreateManyInput = {
    id?: number
    studentsId: number
  }

  export type StudentPlanUpdateManyMutationInput = {

  }

  export type StudentPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseInstructorCreateInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
    courses?: CourseCreateNestedManyWithoutResponsibleInstructorInput
  }

  export type CourseInstructorUncheckedCreateInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    courses?: CourseUncheckedCreateNestedManyWithoutResponsibleInstructorInput
  }

  export type CourseInstructorUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    courses?: CourseUpdateManyWithoutResponsibleInstructorNestedInput
  }

  export type CourseInstructorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    courses?: CourseUncheckedUpdateManyWithoutResponsibleInstructorNestedInput
  }

  export type CourseInstructorCreateManyInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type CourseInstructorUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CourseInstructorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CourseCreateInput = {
    nameThai: string
    nameEnglish: string
    creditUnits: number
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
    responsibleInstructor?: CourseInstructorCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    nameThai: string
    nameEnglish: string
    creditUnits: number
    responsibleInstructorId?: number | null
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
  }

  export type CourseUpdateInput = {
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
    responsibleInstructor?: CourseInstructorUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    responsibleInstructorId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }

  export type CourseCreateManyInput = {
    id?: number
    nameThai: string
    nameEnglish: string
    creditUnits: number
    responsibleInstructorId?: number | null
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
  }

  export type CourseUpdateManyMutationInput = {
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    responsibleInstructorId?: NullableIntFieldUpdateOperationsInput | number | null
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StudentInfoNullableRelationFilter = {
    is?: StudentInfoWhereInput | null
    isNot?: StudentInfoWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StudentPlanNullableRelationFilter = {
    is?: StudentPlanWhereInput | null
    isNot?: StudentPlanWhereInput | null
  }

  export type StudentInfoCountOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoMinOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoSumOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoRelationFilter = {
    is?: StudentInfoWhereInput
    isNot?: StudentInfoWhereInput
  }

  export type StudentPlanCountOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
  }

  export type StudentPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
  }

  export type StudentPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
  }

  export type StudentPlanMinOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
  }

  export type StudentPlanSumOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseInstructorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type CourseInstructorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CourseInstructorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type CourseInstructorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type CourseInstructorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CourseInstructorNullableRelationFilter = {
    is?: CourseInstructorWhereInput | null
    isNot?: CourseInstructorWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    nameThai?: SortOrder
    nameEnglish?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrder
    category?: SortOrder
    creditUnitsCategory?: SortOrder
    groupCourseThai?: SortOrder
    groupCourseEnglish?: SortOrder
    semester?: SortOrder
    mandatorySubjects?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrder
    creditUnitsCategory?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    nameThai?: SortOrder
    nameEnglish?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrder
    category?: SortOrder
    creditUnitsCategory?: SortOrder
    groupCourseThai?: SortOrder
    groupCourseEnglish?: SortOrder
    semester?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    nameThai?: SortOrder
    nameEnglish?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrder
    category?: SortOrder
    creditUnitsCategory?: SortOrder
    groupCourseThai?: SortOrder
    groupCourseEnglish?: SortOrder
    semester?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    creditUnits?: SortOrder
    responsibleInstructorId?: SortOrder
    creditUnitsCategory?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StudentInfoCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type StudentInfoUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type StudentInfoUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    upsert?: StudentInfoUpsertWithoutStudentInput
    disconnect?: StudentInfoWhereInput | boolean
    delete?: StudentInfoWhereInput | boolean
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentInput, StudentInfoUpdateWithoutStudentInput>, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentInfoUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    upsert?: StudentInfoUpsertWithoutStudentInput
    disconnect?: StudentInfoWhereInput | boolean
    delete?: StudentInfoWhereInput | boolean
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentInput, StudentInfoUpdateWithoutStudentInput>, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type UserCreateNestedOneWithoutStudentInfoInput = {
    create?: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInfoInput
    connect?: UserWhereUniqueInput
  }

  export type StudentPlanCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput
    connect?: StudentPlanWhereUniqueInput
  }

  export type StudentPlanUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput
    connect?: StudentPlanWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutStudentInfoNestedInput = {
    create?: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInfoInput
    upsert?: UserUpsertWithoutStudentInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInfoInput, UserUpdateWithoutStudentInfoInput>, UserUncheckedUpdateWithoutStudentInfoInput>
  }

  export type StudentPlanUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput
    upsert?: StudentPlanUpsertWithoutStudentInput
    disconnect?: StudentPlanWhereInput | boolean
    delete?: StudentPlanWhereInput | boolean
    connect?: StudentPlanWhereUniqueInput
    update?: XOR<XOR<StudentPlanUpdateToOneWithWhereWithoutStudentInput, StudentPlanUpdateWithoutStudentInput>, StudentPlanUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPlanUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput
    upsert?: StudentPlanUpsertWithoutStudentInput
    disconnect?: StudentPlanWhereInput | boolean
    delete?: StudentPlanWhereInput | boolean
    connect?: StudentPlanWhereUniqueInput
    update?: XOR<XOR<StudentPlanUpdateToOneWithWhereWithoutStudentInput, StudentPlanUpdateWithoutStudentInput>, StudentPlanUncheckedUpdateWithoutStudentInput>
  }

  export type StudentInfoCreateNestedOneWithoutStudentPlanInput = {
    create?: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentPlanInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type StudentInfoUpdateOneRequiredWithoutStudentPlanNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentPlanInput
    upsert?: StudentInfoUpsertWithoutStudentPlanInput
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentPlanInput, StudentInfoUpdateWithoutStudentPlanInput>, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
  }

  export type CourseCreateNestedManyWithoutResponsibleInstructorInput = {
    create?: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput> | CourseCreateWithoutResponsibleInstructorInput[] | CourseUncheckedCreateWithoutResponsibleInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutResponsibleInstructorInput | CourseCreateOrConnectWithoutResponsibleInstructorInput[]
    createMany?: CourseCreateManyResponsibleInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutResponsibleInstructorInput = {
    create?: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput> | CourseCreateWithoutResponsibleInstructorInput[] | CourseUncheckedCreateWithoutResponsibleInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutResponsibleInstructorInput | CourseCreateOrConnectWithoutResponsibleInstructorInput[]
    createMany?: CourseCreateManyResponsibleInstructorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CourseUpdateManyWithoutResponsibleInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput> | CourseCreateWithoutResponsibleInstructorInput[] | CourseUncheckedCreateWithoutResponsibleInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutResponsibleInstructorInput | CourseCreateOrConnectWithoutResponsibleInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutResponsibleInstructorInput | CourseUpsertWithWhereUniqueWithoutResponsibleInstructorInput[]
    createMany?: CourseCreateManyResponsibleInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutResponsibleInstructorInput | CourseUpdateWithWhereUniqueWithoutResponsibleInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutResponsibleInstructorInput | CourseUpdateManyWithWhereWithoutResponsibleInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutResponsibleInstructorNestedInput = {
    create?: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput> | CourseCreateWithoutResponsibleInstructorInput[] | CourseUncheckedCreateWithoutResponsibleInstructorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutResponsibleInstructorInput | CourseCreateOrConnectWithoutResponsibleInstructorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutResponsibleInstructorInput | CourseUpsertWithWhereUniqueWithoutResponsibleInstructorInput[]
    createMany?: CourseCreateManyResponsibleInstructorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutResponsibleInstructorInput | CourseUpdateWithWhereUniqueWithoutResponsibleInstructorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutResponsibleInstructorInput | CourseUpdateManyWithWhereWithoutResponsibleInstructorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CourseCreatemandatorySubjectsInput = {
    set: string[]
  }

  export type CourseInstructorCreateNestedOneWithoutCoursesInput = {
    create?: XOR<CourseInstructorCreateWithoutCoursesInput, CourseInstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCoursesInput
    connect?: CourseInstructorWhereUniqueInput
  }

  export type CourseUpdatemandatorySubjectsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CourseInstructorUpdateOneWithoutCoursesNestedInput = {
    create?: XOR<CourseInstructorCreateWithoutCoursesInput, CourseInstructorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CourseInstructorCreateOrConnectWithoutCoursesInput
    upsert?: CourseInstructorUpsertWithoutCoursesInput
    disconnect?: CourseInstructorWhereInput | boolean
    delete?: CourseInstructorWhereInput | boolean
    connect?: CourseInstructorWhereUniqueInput
    update?: XOR<XOR<CourseInstructorUpdateToOneWithWhereWithoutCoursesInput, CourseInstructorUpdateWithoutCoursesInput>, CourseInstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StudentInfoCreateWithoutStudentInput = {
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanCreateNestedOneWithoutStudentInput
  }

  export type StudentInfoUncheckedCreateWithoutStudentInput = {
    id?: number
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanUncheckedCreateNestedOneWithoutStudentInput
  }

  export type StudentInfoCreateOrConnectWithoutStudentInput = {
    where: StudentInfoWhereUniqueInput
    create: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
  }

  export type StudentInfoUpsertWithoutStudentInput = {
    update: XOR<StudentInfoUpdateWithoutStudentInput, StudentInfoUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    where?: StudentInfoWhereInput
  }

  export type StudentInfoUpdateToOneWithWhereWithoutStudentInput = {
    where?: StudentInfoWhereInput
    data: XOR<StudentInfoUpdateWithoutStudentInput, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type StudentInfoUpdateWithoutStudentInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUpdateOneWithoutStudentNestedInput
  }

  export type StudentInfoUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type UserCreateWithoutStudentInfoInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserUncheckedCreateWithoutStudentInfoInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserCreateOrConnectWithoutStudentInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
  }

  export type StudentPlanCreateWithoutStudentInput = {

  }

  export type StudentPlanUncheckedCreateWithoutStudentInput = {
    id?: number
  }

  export type StudentPlanCreateOrConnectWithoutStudentInput = {
    where: StudentPlanWhereUniqueInput
    create: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
  }

  export type UserUpsertWithoutStudentInfoInput = {
    update: XOR<UserUpdateWithoutStudentInfoInput, UserUncheckedUpdateWithoutStudentInfoInput>
    create: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInfoInput, UserUncheckedUpdateWithoutStudentInfoInput>
  }

  export type UserUpdateWithoutStudentInfoInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateWithoutStudentInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type StudentPlanUpsertWithoutStudentInput = {
    update: XOR<StudentPlanUpdateWithoutStudentInput, StudentPlanUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
    where?: StudentPlanWhereInput
  }

  export type StudentPlanUpdateToOneWithWhereWithoutStudentInput = {
    where?: StudentPlanWhereInput
    data: XOR<StudentPlanUpdateWithoutStudentInput, StudentPlanUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPlanUpdateWithoutStudentInput = {

  }

  export type StudentPlanUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type StudentInfoCreateWithoutStudentPlanInput = {
    studentIdcard: number
    year: number
    room: number
    student: UserCreateNestedOneWithoutStudentInfoInput
  }

  export type StudentInfoUncheckedCreateWithoutStudentPlanInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
  }

  export type StudentInfoCreateOrConnectWithoutStudentPlanInput = {
    where: StudentInfoWhereUniqueInput
    create: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
  }

  export type StudentInfoUpsertWithoutStudentPlanInput = {
    update: XOR<StudentInfoUpdateWithoutStudentPlanInput, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
    create: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    where?: StudentInfoWhereInput
  }

  export type StudentInfoUpdateToOneWithWhereWithoutStudentPlanInput = {
    where?: StudentInfoWhereInput
    data: XOR<StudentInfoUpdateWithoutStudentPlanInput, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
  }

  export type StudentInfoUpdateWithoutStudentPlanInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutStudentInfoNestedInput
  }

  export type StudentInfoUncheckedUpdateWithoutStudentPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCreateWithoutResponsibleInstructorInput = {
    nameThai: string
    nameEnglish: string
    creditUnits: number
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
  }

  export type CourseUncheckedCreateWithoutResponsibleInstructorInput = {
    id?: number
    nameThai: string
    nameEnglish: string
    creditUnits: number
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
  }

  export type CourseCreateOrConnectWithoutResponsibleInstructorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput>
  }

  export type CourseCreateManyResponsibleInstructorInputEnvelope = {
    data: CourseCreateManyResponsibleInstructorInput | CourseCreateManyResponsibleInstructorInput[]
    skipDuplicates?: boolean
  }

  export type CourseUpsertWithWhereUniqueWithoutResponsibleInstructorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutResponsibleInstructorInput, CourseUncheckedUpdateWithoutResponsibleInstructorInput>
    create: XOR<CourseCreateWithoutResponsibleInstructorInput, CourseUncheckedCreateWithoutResponsibleInstructorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutResponsibleInstructorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutResponsibleInstructorInput, CourseUncheckedUpdateWithoutResponsibleInstructorInput>
  }

  export type CourseUpdateManyWithWhereWithoutResponsibleInstructorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutResponsibleInstructorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    nameThai?: StringFilter<"Course"> | string
    nameEnglish?: StringFilter<"Course"> | string
    creditUnits?: IntFilter<"Course"> | number
    responsibleInstructorId?: IntNullableFilter<"Course"> | number | null
    category?: StringFilter<"Course"> | string
    creditUnitsCategory?: IntFilter<"Course"> | number
    groupCourseThai?: StringFilter<"Course"> | string
    groupCourseEnglish?: StringFilter<"Course"> | string
    semester?: StringFilter<"Course"> | string
    mandatorySubjects?: StringNullableListFilter<"Course">
  }

  export type CourseInstructorCreateWithoutCoursesInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type CourseInstructorUncheckedCreateWithoutCoursesInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type CourseInstructorCreateOrConnectWithoutCoursesInput = {
    where: CourseInstructorWhereUniqueInput
    create: XOR<CourseInstructorCreateWithoutCoursesInput, CourseInstructorUncheckedCreateWithoutCoursesInput>
  }

  export type CourseInstructorUpsertWithoutCoursesInput = {
    update: XOR<CourseInstructorUpdateWithoutCoursesInput, CourseInstructorUncheckedUpdateWithoutCoursesInput>
    create: XOR<CourseInstructorCreateWithoutCoursesInput, CourseInstructorUncheckedCreateWithoutCoursesInput>
    where?: CourseInstructorWhereInput
  }

  export type CourseInstructorUpdateToOneWithWhereWithoutCoursesInput = {
    where?: CourseInstructorWhereInput
    data: XOR<CourseInstructorUpdateWithoutCoursesInput, CourseInstructorUncheckedUpdateWithoutCoursesInput>
  }

  export type CourseInstructorUpdateWithoutCoursesInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CourseInstructorUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type CourseCreateManyResponsibleInstructorInput = {
    id?: number
    nameThai: string
    nameEnglish: string
    creditUnits: number
    category: string
    creditUnitsCategory: number
    groupCourseThai: string
    groupCourseEnglish: string
    semester: string
    mandatorySubjects?: CourseCreatemandatorySubjectsInput | string[]
  }

  export type CourseUpdateWithoutResponsibleInstructorInput = {
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }

  export type CourseUncheckedUpdateWithoutResponsibleInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }

  export type CourseUncheckedUpdateManyWithoutResponsibleInstructorInput = {
    id?: IntFieldUpdateOperationsInput | number
    nameThai?: StringFieldUpdateOperationsInput | string
    nameEnglish?: StringFieldUpdateOperationsInput | string
    creditUnits?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    creditUnitsCategory?: IntFieldUpdateOperationsInput | number
    groupCourseThai?: StringFieldUpdateOperationsInput | string
    groupCourseEnglish?: StringFieldUpdateOperationsInput | string
    semester?: StringFieldUpdateOperationsInput | string
    mandatorySubjects?: CourseUpdatemandatorySubjectsInput | string[]
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CourseInstructorCountOutputTypeDefaultArgs instead
     */
    export type CourseInstructorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseInstructorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentInfoDefaultArgs instead
     */
    export type StudentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentPlanDefaultArgs instead
     */
    export type StudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseInstructorDefaultArgs instead
     */
    export type CourseInstructorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseInstructorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
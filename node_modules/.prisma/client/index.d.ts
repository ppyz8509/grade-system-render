
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model StudentInfo
 * 
 */
export type StudentInfo = $Result.DefaultSelection<Prisma.$StudentInfoPayload>
/**
 * Model StudentPlan
 * 
 */
export type StudentPlan = $Result.DefaultSelection<Prisma.$StudentPlanPayload>
/**
 * Model Major
 * หลักสูตร
 */
export type Major = $Result.DefaultSelection<Prisma.$MajorPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Group
 * กลุ่มวิชา
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  STUDENT: 'STUDENT',
  ADVISOR: 'ADVISOR',
  COURSE_INSTRUCTOR: 'COURSE_INSTRUCTOR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.studentInfo`: Exposes CRUD operations for the **StudentInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentInfos
    * const studentInfos = await prisma.studentInfo.findMany()
    * ```
    */
  get studentInfo(): Prisma.StudentInfoDelegate<ExtArgs>;

  /**
   * `prisma.studentPlan`: Exposes CRUD operations for the **StudentPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StudentPlans
    * const studentPlans = await prisma.studentPlan.findMany()
    * ```
    */
  get studentPlan(): Prisma.StudentPlanDelegate<ExtArgs>;

  /**
   * `prisma.major`: Exposes CRUD operations for the **Major** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Majors
    * const majors = await prisma.major.findMany()
    * ```
    */
  get major(): Prisma.MajorDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    StudentInfo: 'StudentInfo',
    StudentPlan: 'StudentPlan',
    Major: 'Major',
    Category: 'Category',
    Group: 'Group',
    Course: 'Course'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'studentInfo' | 'studentPlan' | 'major' | 'category' | 'group' | 'course'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      StudentInfo: {
        payload: Prisma.$StudentInfoPayload<ExtArgs>
        fields: Prisma.StudentInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentInfoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentInfoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          findFirst: {
            args: Prisma.StudentInfoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentInfoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          findMany: {
            args: Prisma.StudentInfoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>[]
          }
          create: {
            args: Prisma.StudentInfoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          createMany: {
            args: Prisma.StudentInfoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentInfoCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>[]
          }
          delete: {
            args: Prisma.StudentInfoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          update: {
            args: Prisma.StudentInfoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          deleteMany: {
            args: Prisma.StudentInfoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentInfoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentInfoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentInfoPayload>
          }
          aggregate: {
            args: Prisma.StudentInfoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentInfo>
          }
          groupBy: {
            args: Prisma.StudentInfoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentInfoCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentInfoCountAggregateOutputType> | number
          }
        }
      }
      StudentPlan: {
        payload: Prisma.$StudentPlanPayload<ExtArgs>
        fields: Prisma.StudentPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentPlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentPlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          findFirst: {
            args: Prisma.StudentPlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentPlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          findMany: {
            args: Prisma.StudentPlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>[]
          }
          create: {
            args: Prisma.StudentPlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          createMany: {
            args: Prisma.StudentPlanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentPlanCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>[]
          }
          delete: {
            args: Prisma.StudentPlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          update: {
            args: Prisma.StudentPlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          deleteMany: {
            args: Prisma.StudentPlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentPlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentPlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPlanPayload>
          }
          aggregate: {
            args: Prisma.StudentPlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudentPlan>
          }
          groupBy: {
            args: Prisma.StudentPlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentPlanCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentPlanCountAggregateOutputType> | number
          }
        }
      }
      Major: {
        payload: Prisma.$MajorPayload<ExtArgs>
        fields: Prisma.MajorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MajorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MajorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findFirst: {
            args: Prisma.MajorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MajorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findMany: {
            args: Prisma.MajorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          create: {
            args: Prisma.MajorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          createMany: {
            args: Prisma.MajorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MajorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          delete: {
            args: Prisma.MajorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          update: {
            args: Prisma.MajorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          deleteMany: {
            args: Prisma.MajorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MajorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MajorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          aggregate: {
            args: Prisma.MajorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMajor>
          }
          groupBy: {
            args: Prisma.MajorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MajorGroupByOutputType>[]
          }
          count: {
            args: Prisma.MajorCountArgs<ExtArgs>,
            result: $Utils.Optional<MajorCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StudentInfoCountOutputType
   */

  export type StudentInfoCountOutputType = {
    studentPlan: number
  }

  export type StudentInfoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentPlan?: boolean | StudentInfoCountOutputTypeCountStudentPlanArgs
  }

  // Custom InputTypes
  /**
   * StudentInfoCountOutputType without action
   */
  export type StudentInfoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfoCountOutputType
     */
    select?: StudentInfoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StudentInfoCountOutputType without action
   */
  export type StudentInfoCountOutputTypeCountStudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
  }


  /**
   * Count Type MajorCountOutputType
   */

  export type MajorCountOutputType = {
    category: number
    course: number
  }

  export type MajorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | MajorCountOutputTypeCountCategoryArgs
    course?: boolean | MajorCountOutputTypeCountCourseArgs
  }

  // Custom InputTypes
  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MajorCountOutputType
     */
    select?: MajorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountCourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    group: number
    studentPlan: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    group?: boolean | CategoryCountOutputTypeCountGroupArgs
    studentPlan?: boolean | CategoryCountOutputTypeCountStudentPlanArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountStudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    studentPlan: number
    course: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentPlan?: boolean | GroupCountOutputTypeCountStudentPlanArgs
    course?: boolean | GroupCountOutputTypeCountCourseArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountStudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountCourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    studentPlan: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentPlan?: boolean | CourseCountOutputTypeCountStudentPlanArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountStudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    username: string | null
    password: string | null
    role: $Enums.Role | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    username: number
    password: number
    role: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    username?: true
    password?: true
    role?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    studentInfo?: boolean | User$studentInfoArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    studentInfo?: boolean | User$studentInfoArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      studentInfo: Prisma.$StudentInfoPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      username: string
      password: string
      role: $Enums.Role
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    studentInfo<T extends User$studentInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$studentInfoArgs<ExtArgs>>): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.studentInfo
   */
  export type User$studentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    where?: StudentInfoWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model StudentInfo
   */

  export type AggregateStudentInfo = {
    _count: StudentInfoCountAggregateOutputType | null
    _avg: StudentInfoAvgAggregateOutputType | null
    _sum: StudentInfoSumAggregateOutputType | null
    _min: StudentInfoMinAggregateOutputType | null
    _max: StudentInfoMaxAggregateOutputType | null
  }

  export type StudentInfoAvgAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoSumAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoMinAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoMaxAggregateOutputType = {
    id: number | null
    studentsId: number | null
    studentIdcard: number | null
    year: number | null
    room: number | null
  }

  export type StudentInfoCountAggregateOutputType = {
    id: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    _all: number
  }


  export type StudentInfoAvgAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoSumAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoMinAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoMaxAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
  }

  export type StudentInfoCountAggregateInputType = {
    id?: true
    studentsId?: true
    studentIdcard?: true
    year?: true
    room?: true
    _all?: true
  }

  export type StudentInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentInfo to aggregate.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentInfos
    **/
    _count?: true | StudentInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentInfoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentInfoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentInfoMaxAggregateInputType
  }

  export type GetStudentInfoAggregateType<T extends StudentInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentInfo[P]>
      : GetScalarType<T[P], AggregateStudentInfo[P]>
  }




  export type StudentInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentInfoWhereInput
    orderBy?: StudentInfoOrderByWithAggregationInput | StudentInfoOrderByWithAggregationInput[]
    by: StudentInfoScalarFieldEnum[] | StudentInfoScalarFieldEnum
    having?: StudentInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentInfoCountAggregateInputType | true
    _avg?: StudentInfoAvgAggregateInputType
    _sum?: StudentInfoSumAggregateInputType
    _min?: StudentInfoMinAggregateInputType
    _max?: StudentInfoMaxAggregateInputType
  }

  export type StudentInfoGroupByOutputType = {
    id: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    _count: StudentInfoCountAggregateOutputType | null
    _avg: StudentInfoAvgAggregateOutputType | null
    _sum: StudentInfoSumAggregateOutputType | null
    _min: StudentInfoMinAggregateOutputType | null
    _max: StudentInfoMaxAggregateOutputType | null
  }

  type GetStudentInfoGroupByPayload<T extends StudentInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentInfoGroupByOutputType[P]>
            : GetScalarType<T[P], StudentInfoGroupByOutputType[P]>
        }
      >
    >


  export type StudentInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    studentPlan?: boolean | StudentInfo$studentPlanArgs<ExtArgs>
    _count?: boolean | StudentInfoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentInfo"]>

  export type StudentInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["studentInfo"]>

  export type StudentInfoSelectScalar = {
    id?: boolean
    studentsId?: boolean
    studentIdcard?: boolean
    year?: boolean
    room?: boolean
  }

  export type StudentInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    studentPlan?: boolean | StudentInfo$studentPlanArgs<ExtArgs>
    _count?: boolean | StudentInfoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StudentInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $StudentInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentInfo"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      studentPlan: Prisma.$StudentPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentsId: number
      studentIdcard: number
      year: number
      room: number
    }, ExtArgs["result"]["studentInfo"]>
    composites: {}
  }

  type StudentInfoGetPayload<S extends boolean | null | undefined | StudentInfoDefaultArgs> = $Result.GetResult<Prisma.$StudentInfoPayload, S>

  type StudentInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentInfoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentInfoCountAggregateInputType | true
    }

  export interface StudentInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentInfo'], meta: { name: 'StudentInfo' } }
    /**
     * Find zero or one StudentInfo that matches the filter.
     * @param {StudentInfoFindUniqueArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentInfoFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentInfo that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentInfoFindUniqueOrThrowArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentInfoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindFirstArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentInfoFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindFirstArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindFirstOrThrowArgs} args - Arguments to find a StudentInfo
     * @example
     * // Get one StudentInfo
     * const studentInfo = await prisma.studentInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentInfoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentInfos
     * const studentInfos = await prisma.studentInfo.findMany()
     * 
     * // Get first 10 StudentInfos
     * const studentInfos = await prisma.studentInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentInfoWithIdOnly = await prisma.studentInfo.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentInfoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentInfo.
     * @param {StudentInfoCreateArgs} args - Arguments to create a StudentInfo.
     * @example
     * // Create one StudentInfo
     * const StudentInfo = await prisma.studentInfo.create({
     *   data: {
     *     // ... data to create a StudentInfo
     *   }
     * })
     * 
    **/
    create<T extends StudentInfoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoCreateArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentInfos.
     * @param {StudentInfoCreateManyArgs} args - Arguments to create many StudentInfos.
     * @example
     * // Create many StudentInfos
     * const studentInfo = await prisma.studentInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentInfoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentInfos and returns the data saved in the database.
     * @param {StudentInfoCreateManyAndReturnArgs} args - Arguments to create many StudentInfos.
     * @example
     * // Create many StudentInfos
     * const studentInfo = await prisma.studentInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentInfos and only return the `id`
     * const studentInfoWithIdOnly = await prisma.studentInfo.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StudentInfoCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a StudentInfo.
     * @param {StudentInfoDeleteArgs} args - Arguments to delete one StudentInfo.
     * @example
     * // Delete one StudentInfo
     * const StudentInfo = await prisma.studentInfo.delete({
     *   where: {
     *     // ... filter to delete one StudentInfo
     *   }
     * })
     * 
    **/
    delete<T extends StudentInfoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoDeleteArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentInfo.
     * @param {StudentInfoUpdateArgs} args - Arguments to update one StudentInfo.
     * @example
     * // Update one StudentInfo
     * const studentInfo = await prisma.studentInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentInfoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpdateArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentInfos.
     * @param {StudentInfoDeleteManyArgs} args - Arguments to filter StudentInfos to delete.
     * @example
     * // Delete a few StudentInfos
     * const { count } = await prisma.studentInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentInfoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentInfoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentInfos
     * const studentInfo = await prisma.studentInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentInfoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentInfo.
     * @param {StudentInfoUpsertArgs} args - Arguments to update or create a StudentInfo.
     * @example
     * // Update or create a StudentInfo
     * const studentInfo = await prisma.studentInfo.upsert({
     *   create: {
     *     // ... data to create a StudentInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentInfo we want to update
     *   }
     * })
    **/
    upsert<T extends StudentInfoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentInfoUpsertArgs<ExtArgs>>
    ): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoCountArgs} args - Arguments to filter StudentInfos to count.
     * @example
     * // Count the number of StudentInfos
     * const count = await prisma.studentInfo.count({
     *   where: {
     *     // ... the filter for the StudentInfos we want to count
     *   }
     * })
    **/
    count<T extends StudentInfoCountArgs>(
      args?: Subset<T, StudentInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentInfoAggregateArgs>(args: Subset<T, StudentInfoAggregateArgs>): Prisma.PrismaPromise<GetStudentInfoAggregateType<T>>

    /**
     * Group by StudentInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentInfoGroupByArgs['orderBy'] }
        : { orderBy?: StudentInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentInfo model
   */
  readonly fields: StudentInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    studentPlan<T extends StudentInfo$studentPlanArgs<ExtArgs> = {}>(args?: Subset<T, StudentInfo$studentPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentInfo model
   */ 
  interface StudentInfoFieldRefs {
    readonly id: FieldRef<"StudentInfo", 'Int'>
    readonly studentsId: FieldRef<"StudentInfo", 'Int'>
    readonly studentIdcard: FieldRef<"StudentInfo", 'Int'>
    readonly year: FieldRef<"StudentInfo", 'Int'>
    readonly room: FieldRef<"StudentInfo", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * StudentInfo findUnique
   */
  export type StudentInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo findUniqueOrThrow
   */
  export type StudentInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo findFirst
   */
  export type StudentInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentInfos.
     */
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo findFirstOrThrow
   */
  export type StudentInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfo to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentInfos.
     */
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo findMany
   */
  export type StudentInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter, which StudentInfos to fetch.
     */
    where?: StudentInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentInfos to fetch.
     */
    orderBy?: StudentInfoOrderByWithRelationInput | StudentInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentInfos.
     */
    cursor?: StudentInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentInfos.
     */
    skip?: number
    distinct?: StudentInfoScalarFieldEnum | StudentInfoScalarFieldEnum[]
  }

  /**
   * StudentInfo create
   */
  export type StudentInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentInfo.
     */
    data: XOR<StudentInfoCreateInput, StudentInfoUncheckedCreateInput>
  }

  /**
   * StudentInfo createMany
   */
  export type StudentInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentInfos.
     */
    data: StudentInfoCreateManyInput | StudentInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentInfo createManyAndReturn
   */
  export type StudentInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentInfos.
     */
    data: StudentInfoCreateManyInput | StudentInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentInfo update
   */
  export type StudentInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentInfo.
     */
    data: XOR<StudentInfoUpdateInput, StudentInfoUncheckedUpdateInput>
    /**
     * Choose, which StudentInfo to update.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo updateMany
   */
  export type StudentInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentInfos.
     */
    data: XOR<StudentInfoUpdateManyMutationInput, StudentInfoUncheckedUpdateManyInput>
    /**
     * Filter which StudentInfos to update
     */
    where?: StudentInfoWhereInput
  }

  /**
   * StudentInfo upsert
   */
  export type StudentInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentInfo to update in case it exists.
     */
    where: StudentInfoWhereUniqueInput
    /**
     * In case the StudentInfo found by the `where` argument doesn't exist, create a new StudentInfo with this data.
     */
    create: XOR<StudentInfoCreateInput, StudentInfoUncheckedCreateInput>
    /**
     * In case the StudentInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentInfoUpdateInput, StudentInfoUncheckedUpdateInput>
  }

  /**
   * StudentInfo delete
   */
  export type StudentInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    /**
     * Filter which StudentInfo to delete.
     */
    where: StudentInfoWhereUniqueInput
  }

  /**
   * StudentInfo deleteMany
   */
  export type StudentInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentInfos to delete
     */
    where?: StudentInfoWhereInput
  }

  /**
   * StudentInfo.studentPlan
   */
  export type StudentInfo$studentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    cursor?: StudentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentInfo without action
   */
  export type StudentInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
  }


  /**
   * Model StudentPlan
   */

  export type AggregateStudentPlan = {
    _count: StudentPlanCountAggregateOutputType | null
    _avg: StudentPlanAvgAggregateOutputType | null
    _sum: StudentPlanSumAggregateOutputType | null
    _min: StudentPlanMinAggregateOutputType | null
    _max: StudentPlanMaxAggregateOutputType | null
  }

  export type StudentPlanAvgAggregateOutputType = {
    id: number | null
    studentsId: number | null
    categoryId: number | null
    groupId: number | null
    courseId: number | null
  }

  export type StudentPlanSumAggregateOutputType = {
    id: number | null
    studentsId: number | null
    categoryId: number | null
    groupId: number | null
    courseId: number | null
  }

  export type StudentPlanMinAggregateOutputType = {
    id: number | null
    studentPlanName: string | null
    studentPlanYear: string | null
    studentsId: number | null
    categoryId: number | null
    categoryName: string | null
    groupId: number | null
    groupName: string | null
    courseId: number | null
    courseName: string | null
  }

  export type StudentPlanMaxAggregateOutputType = {
    id: number | null
    studentPlanName: string | null
    studentPlanYear: string | null
    studentsId: number | null
    categoryId: number | null
    categoryName: string | null
    groupId: number | null
    groupName: string | null
    courseId: number | null
    courseName: string | null
  }

  export type StudentPlanCountAggregateOutputType = {
    id: number
    studentPlanName: number
    studentPlanYear: number
    studentsId: number
    categoryId: number
    categoryName: number
    groupId: number
    groupName: number
    courseId: number
    courseName: number
    _all: number
  }


  export type StudentPlanAvgAggregateInputType = {
    id?: true
    studentsId?: true
    categoryId?: true
    groupId?: true
    courseId?: true
  }

  export type StudentPlanSumAggregateInputType = {
    id?: true
    studentsId?: true
    categoryId?: true
    groupId?: true
    courseId?: true
  }

  export type StudentPlanMinAggregateInputType = {
    id?: true
    studentPlanName?: true
    studentPlanYear?: true
    studentsId?: true
    categoryId?: true
    categoryName?: true
    groupId?: true
    groupName?: true
    courseId?: true
    courseName?: true
  }

  export type StudentPlanMaxAggregateInputType = {
    id?: true
    studentPlanName?: true
    studentPlanYear?: true
    studentsId?: true
    categoryId?: true
    categoryName?: true
    groupId?: true
    groupName?: true
    courseId?: true
    courseName?: true
  }

  export type StudentPlanCountAggregateInputType = {
    id?: true
    studentPlanName?: true
    studentPlanYear?: true
    studentsId?: true
    categoryId?: true
    categoryName?: true
    groupId?: true
    groupName?: true
    courseId?: true
    courseName?: true
    _all?: true
  }

  export type StudentPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPlan to aggregate.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StudentPlans
    **/
    _count?: true | StudentPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StudentPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StudentPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentPlanMaxAggregateInputType
  }

  export type GetStudentPlanAggregateType<T extends StudentPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateStudentPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudentPlan[P]>
      : GetScalarType<T[P], AggregateStudentPlan[P]>
  }




  export type StudentPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithAggregationInput | StudentPlanOrderByWithAggregationInput[]
    by: StudentPlanScalarFieldEnum[] | StudentPlanScalarFieldEnum
    having?: StudentPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentPlanCountAggregateInputType | true
    _avg?: StudentPlanAvgAggregateInputType
    _sum?: StudentPlanSumAggregateInputType
    _min?: StudentPlanMinAggregateInputType
    _max?: StudentPlanMaxAggregateInputType
  }

  export type StudentPlanGroupByOutputType = {
    id: number
    studentPlanName: string
    studentPlanYear: string
    studentsId: number | null
    categoryId: number | null
    categoryName: string | null
    groupId: number | null
    groupName: string | null
    courseId: number | null
    courseName: string | null
    _count: StudentPlanCountAggregateOutputType | null
    _avg: StudentPlanAvgAggregateOutputType | null
    _sum: StudentPlanSumAggregateOutputType | null
    _min: StudentPlanMinAggregateOutputType | null
    _max: StudentPlanMaxAggregateOutputType | null
  }

  type GetStudentPlanGroupByPayload<T extends StudentPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentPlanGroupByOutputType[P]>
            : GetScalarType<T[P], StudentPlanGroupByOutputType[P]>
        }
      >
    >


  export type StudentPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentPlanName?: boolean
    studentPlanYear?: boolean
    studentsId?: boolean
    categoryId?: boolean
    categoryName?: boolean
    groupId?: boolean
    groupName?: boolean
    courseId?: boolean
    courseName?: boolean
    student?: boolean | StudentPlan$studentArgs<ExtArgs>
    category?: boolean | StudentPlan$categoryArgs<ExtArgs>
    group?: boolean | StudentPlan$groupArgs<ExtArgs>
    course?: boolean | StudentPlan$courseArgs<ExtArgs>
  }, ExtArgs["result"]["studentPlan"]>

  export type StudentPlanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentPlanName?: boolean
    studentPlanYear?: boolean
    studentsId?: boolean
    categoryId?: boolean
    categoryName?: boolean
    groupId?: boolean
    groupName?: boolean
    courseId?: boolean
    courseName?: boolean
    student?: boolean | StudentPlan$studentArgs<ExtArgs>
    category?: boolean | StudentPlan$categoryArgs<ExtArgs>
    group?: boolean | StudentPlan$groupArgs<ExtArgs>
    course?: boolean | StudentPlan$courseArgs<ExtArgs>
  }, ExtArgs["result"]["studentPlan"]>

  export type StudentPlanSelectScalar = {
    id?: boolean
    studentPlanName?: boolean
    studentPlanYear?: boolean
    studentsId?: boolean
    categoryId?: boolean
    categoryName?: boolean
    groupId?: boolean
    groupName?: boolean
    courseId?: boolean
    courseName?: boolean
  }

  export type StudentPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentPlan$studentArgs<ExtArgs>
    category?: boolean | StudentPlan$categoryArgs<ExtArgs>
    group?: boolean | StudentPlan$groupArgs<ExtArgs>
    course?: boolean | StudentPlan$courseArgs<ExtArgs>
  }
  export type StudentPlanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | StudentPlan$studentArgs<ExtArgs>
    category?: boolean | StudentPlan$categoryArgs<ExtArgs>
    group?: boolean | StudentPlan$groupArgs<ExtArgs>
    course?: boolean | StudentPlan$courseArgs<ExtArgs>
  }

  export type $StudentPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StudentPlan"
    objects: {
      student: Prisma.$StudentInfoPayload<ExtArgs> | null
      category: Prisma.$CategoryPayload<ExtArgs> | null
      group: Prisma.$GroupPayload<ExtArgs> | null
      course: Prisma.$CoursePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      studentPlanName: string
      studentPlanYear: string
      studentsId: number | null
      categoryId: number | null
      categoryName: string | null
      groupId: number | null
      groupName: string | null
      courseId: number | null
      courseName: string | null
    }, ExtArgs["result"]["studentPlan"]>
    composites: {}
  }

  type StudentPlanGetPayload<S extends boolean | null | undefined | StudentPlanDefaultArgs> = $Result.GetResult<Prisma.$StudentPlanPayload, S>

  type StudentPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentPlanCountAggregateInputType | true
    }

  export interface StudentPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StudentPlan'], meta: { name: 'StudentPlan' } }
    /**
     * Find zero or one StudentPlan that matches the filter.
     * @param {StudentPlanFindUniqueArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentPlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one StudentPlan that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentPlanFindUniqueOrThrowArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentPlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first StudentPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindFirstArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentPlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindFirstArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first StudentPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindFirstOrThrowArgs} args - Arguments to find a StudentPlan
     * @example
     * // Get one StudentPlan
     * const studentPlan = await prisma.studentPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentPlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more StudentPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StudentPlans
     * const studentPlans = await prisma.studentPlan.findMany()
     * 
     * // Get first 10 StudentPlans
     * const studentPlans = await prisma.studentPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const studentPlanWithIdOnly = await prisma.studentPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends StudentPlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a StudentPlan.
     * @param {StudentPlanCreateArgs} args - Arguments to create a StudentPlan.
     * @example
     * // Create one StudentPlan
     * const StudentPlan = await prisma.studentPlan.create({
     *   data: {
     *     // ... data to create a StudentPlan
     *   }
     * })
     * 
    **/
    create<T extends StudentPlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanCreateArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many StudentPlans.
     * @param {StudentPlanCreateManyArgs} args - Arguments to create many StudentPlans.
     * @example
     * // Create many StudentPlans
     * const studentPlan = await prisma.studentPlan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentPlanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StudentPlans and returns the data saved in the database.
     * @param {StudentPlanCreateManyAndReturnArgs} args - Arguments to create many StudentPlans.
     * @example
     * // Create many StudentPlans
     * const studentPlan = await prisma.studentPlan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StudentPlans and only return the `id`
     * const studentPlanWithIdOnly = await prisma.studentPlan.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StudentPlanCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a StudentPlan.
     * @param {StudentPlanDeleteArgs} args - Arguments to delete one StudentPlan.
     * @example
     * // Delete one StudentPlan
     * const StudentPlan = await prisma.studentPlan.delete({
     *   where: {
     *     // ... filter to delete one StudentPlan
     *   }
     * })
     * 
    **/
    delete<T extends StudentPlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanDeleteArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one StudentPlan.
     * @param {StudentPlanUpdateArgs} args - Arguments to update one StudentPlan.
     * @example
     * // Update one StudentPlan
     * const studentPlan = await prisma.studentPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentPlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpdateArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more StudentPlans.
     * @param {StudentPlanDeleteManyArgs} args - Arguments to filter StudentPlans to delete.
     * @example
     * // Delete a few StudentPlans
     * const { count } = await prisma.studentPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentPlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentPlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StudentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StudentPlans
     * const studentPlan = await prisma.studentPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentPlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one StudentPlan.
     * @param {StudentPlanUpsertArgs} args - Arguments to update or create a StudentPlan.
     * @example
     * // Update or create a StudentPlan
     * const studentPlan = await prisma.studentPlan.upsert({
     *   create: {
     *     // ... data to create a StudentPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StudentPlan we want to update
     *   }
     * })
    **/
    upsert<T extends StudentPlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentPlanUpsertArgs<ExtArgs>>
    ): Prisma__StudentPlanClient<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of StudentPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanCountArgs} args - Arguments to filter StudentPlans to count.
     * @example
     * // Count the number of StudentPlans
     * const count = await prisma.studentPlan.count({
     *   where: {
     *     // ... the filter for the StudentPlans we want to count
     *   }
     * })
    **/
    count<T extends StudentPlanCountArgs>(
      args?: Subset<T, StudentPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StudentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentPlanAggregateArgs>(args: Subset<T, StudentPlanAggregateArgs>): Prisma.PrismaPromise<GetStudentPlanAggregateType<T>>

    /**
     * Group by StudentPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentPlanGroupByArgs['orderBy'] }
        : { orderBy?: StudentPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StudentPlan model
   */
  readonly fields: StudentPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StudentPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    student<T extends StudentPlan$studentArgs<ExtArgs> = {}>(args?: Subset<T, StudentPlan$studentArgs<ExtArgs>>): Prisma__StudentInfoClient<$Result.GetResult<Prisma.$StudentInfoPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    category<T extends StudentPlan$categoryArgs<ExtArgs> = {}>(args?: Subset<T, StudentPlan$categoryArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    group<T extends StudentPlan$groupArgs<ExtArgs> = {}>(args?: Subset<T, StudentPlan$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    course<T extends StudentPlan$courseArgs<ExtArgs> = {}>(args?: Subset<T, StudentPlan$courseArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the StudentPlan model
   */ 
  interface StudentPlanFieldRefs {
    readonly id: FieldRef<"StudentPlan", 'Int'>
    readonly studentPlanName: FieldRef<"StudentPlan", 'String'>
    readonly studentPlanYear: FieldRef<"StudentPlan", 'String'>
    readonly studentsId: FieldRef<"StudentPlan", 'Int'>
    readonly categoryId: FieldRef<"StudentPlan", 'Int'>
    readonly categoryName: FieldRef<"StudentPlan", 'String'>
    readonly groupId: FieldRef<"StudentPlan", 'Int'>
    readonly groupName: FieldRef<"StudentPlan", 'String'>
    readonly courseId: FieldRef<"StudentPlan", 'Int'>
    readonly courseName: FieldRef<"StudentPlan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StudentPlan findUnique
   */
  export type StudentPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan findUniqueOrThrow
   */
  export type StudentPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan findFirst
   */
  export type StudentPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPlans.
     */
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan findFirstOrThrow
   */
  export type StudentPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlan to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StudentPlans.
     */
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan findMany
   */
  export type StudentPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter, which StudentPlans to fetch.
     */
    where?: StudentPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StudentPlans to fetch.
     */
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StudentPlans.
     */
    cursor?: StudentPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StudentPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StudentPlans.
     */
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * StudentPlan create
   */
  export type StudentPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a StudentPlan.
     */
    data: XOR<StudentPlanCreateInput, StudentPlanUncheckedCreateInput>
  }

  /**
   * StudentPlan createMany
   */
  export type StudentPlanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StudentPlans.
     */
    data: StudentPlanCreateManyInput | StudentPlanCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StudentPlan createManyAndReturn
   */
  export type StudentPlanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many StudentPlans.
     */
    data: StudentPlanCreateManyInput | StudentPlanCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StudentPlan update
   */
  export type StudentPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a StudentPlan.
     */
    data: XOR<StudentPlanUpdateInput, StudentPlanUncheckedUpdateInput>
    /**
     * Choose, which StudentPlan to update.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan updateMany
   */
  export type StudentPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StudentPlans.
     */
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyInput>
    /**
     * Filter which StudentPlans to update
     */
    where?: StudentPlanWhereInput
  }

  /**
   * StudentPlan upsert
   */
  export type StudentPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the StudentPlan to update in case it exists.
     */
    where: StudentPlanWhereUniqueInput
    /**
     * In case the StudentPlan found by the `where` argument doesn't exist, create a new StudentPlan with this data.
     */
    create: XOR<StudentPlanCreateInput, StudentPlanUncheckedCreateInput>
    /**
     * In case the StudentPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentPlanUpdateInput, StudentPlanUncheckedUpdateInput>
  }

  /**
   * StudentPlan delete
   */
  export type StudentPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    /**
     * Filter which StudentPlan to delete.
     */
    where: StudentPlanWhereUniqueInput
  }

  /**
   * StudentPlan deleteMany
   */
  export type StudentPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StudentPlans to delete
     */
    where?: StudentPlanWhereInput
  }

  /**
   * StudentPlan.student
   */
  export type StudentPlan$studentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentInfo
     */
    select?: StudentInfoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInfoInclude<ExtArgs> | null
    where?: StudentInfoWhereInput
  }

  /**
   * StudentPlan.category
   */
  export type StudentPlan$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
  }

  /**
   * StudentPlan.group
   */
  export type StudentPlan$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * StudentPlan.course
   */
  export type StudentPlan$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
  }

  /**
   * StudentPlan without action
   */
  export type StudentPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
  }


  /**
   * Model Major
   */

  export type AggregateMajor = {
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  export type MajorAvgAggregateOutputType = {
    id: number | null
  }

  export type MajorSumAggregateOutputType = {
    id: number | null
  }

  export type MajorMinAggregateOutputType = {
    id: number | null
    majorNameTH: string | null
    majorNameENG: string | null
    majorYear: string | null
    majorUnit: string | null
    majorStatus: string | null
    majorCode: string | null
    majorSupervisor: string | null
  }

  export type MajorMaxAggregateOutputType = {
    id: number | null
    majorNameTH: string | null
    majorNameENG: string | null
    majorYear: string | null
    majorUnit: string | null
    majorStatus: string | null
    majorCode: string | null
    majorSupervisor: string | null
  }

  export type MajorCountAggregateOutputType = {
    id: number
    majorNameTH: number
    majorNameENG: number
    majorYear: number
    majorUnit: number
    majorStatus: number
    majorCode: number
    majorSupervisor: number
    _all: number
  }


  export type MajorAvgAggregateInputType = {
    id?: true
  }

  export type MajorSumAggregateInputType = {
    id?: true
  }

  export type MajorMinAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
  }

  export type MajorMaxAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
  }

  export type MajorCountAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
    _all?: true
  }

  export type MajorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Major to aggregate.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Majors
    **/
    _count?: true | MajorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MajorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MajorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MajorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MajorMaxAggregateInputType
  }

  export type GetMajorAggregateType<T extends MajorAggregateArgs> = {
        [P in keyof T & keyof AggregateMajor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMajor[P]>
      : GetScalarType<T[P], AggregateMajor[P]>
  }




  export type MajorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MajorWhereInput
    orderBy?: MajorOrderByWithAggregationInput | MajorOrderByWithAggregationInput[]
    by: MajorScalarFieldEnum[] | MajorScalarFieldEnum
    having?: MajorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MajorCountAggregateInputType | true
    _avg?: MajorAvgAggregateInputType
    _sum?: MajorSumAggregateInputType
    _min?: MajorMinAggregateInputType
    _max?: MajorMaxAggregateInputType
  }

  export type MajorGroupByOutputType = {
    id: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  type GetMajorGroupByPayload<T extends MajorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MajorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MajorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MajorGroupByOutputType[P]>
            : GetScalarType<T[P], MajorGroupByOutputType[P]>
        }
      >
    >


  export type MajorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
    category?: boolean | Major$categoryArgs<ExtArgs>
    course?: boolean | Major$courseArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["major"]>

  export type MajorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
  }, ExtArgs["result"]["major"]>

  export type MajorSelectScalar = {
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
  }

  export type MajorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | Major$categoryArgs<ExtArgs>
    course?: boolean | Major$courseArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MajorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MajorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Major"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>[]
      course: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      majorNameTH: string
      majorNameENG: string
      majorYear: string
      majorUnit: string
      majorStatus: string
      majorCode: string
      majorSupervisor: string
    }, ExtArgs["result"]["major"]>
    composites: {}
  }

  type MajorGetPayload<S extends boolean | null | undefined | MajorDefaultArgs> = $Result.GetResult<Prisma.$MajorPayload, S>

  type MajorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MajorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MajorCountAggregateInputType | true
    }

  export interface MajorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Major'], meta: { name: 'Major' } }
    /**
     * Find zero or one Major that matches the filter.
     * @param {MajorFindUniqueArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MajorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MajorFindUniqueArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Major that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MajorFindUniqueOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MajorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Major that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MajorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindFirstArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Major that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MajorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Majors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Majors
     * const majors = await prisma.major.findMany()
     * 
     * // Get first 10 Majors
     * const majors = await prisma.major.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const majorWithIdOnly = await prisma.major.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MajorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Major.
     * @param {MajorCreateArgs} args - Arguments to create a Major.
     * @example
     * // Create one Major
     * const Major = await prisma.major.create({
     *   data: {
     *     // ... data to create a Major
     *   }
     * })
     * 
    **/
    create<T extends MajorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MajorCreateArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Majors.
     * @param {MajorCreateManyArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MajorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Majors and returns the data saved in the database.
     * @param {MajorCreateManyAndReturnArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Majors and only return the `id`
     * const majorWithIdOnly = await prisma.major.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MajorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Major.
     * @param {MajorDeleteArgs} args - Arguments to delete one Major.
     * @example
     * // Delete one Major
     * const Major = await prisma.major.delete({
     *   where: {
     *     // ... filter to delete one Major
     *   }
     * })
     * 
    **/
    delete<T extends MajorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MajorDeleteArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Major.
     * @param {MajorUpdateArgs} args - Arguments to update one Major.
     * @example
     * // Update one Major
     * const major = await prisma.major.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MajorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpdateArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Majors.
     * @param {MajorDeleteManyArgs} args - Arguments to filter Majors to delete.
     * @example
     * // Delete a few Majors
     * const { count } = await prisma.major.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MajorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Majors
     * const major = await prisma.major.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MajorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Major.
     * @param {MajorUpsertArgs} args - Arguments to update or create a Major.
     * @example
     * // Update or create a Major
     * const major = await prisma.major.upsert({
     *   create: {
     *     // ... data to create a Major
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Major we want to update
     *   }
     * })
    **/
    upsert<T extends MajorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpsertArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorCountArgs} args - Arguments to filter Majors to count.
     * @example
     * // Count the number of Majors
     * const count = await prisma.major.count({
     *   where: {
     *     // ... the filter for the Majors we want to count
     *   }
     * })
    **/
    count<T extends MajorCountArgs>(
      args?: Subset<T, MajorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MajorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MajorAggregateArgs>(args: Subset<T, MajorAggregateArgs>): Prisma.PrismaPromise<GetMajorAggregateType<T>>

    /**
     * Group by Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MajorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MajorGroupByArgs['orderBy'] }
        : { orderBy?: MajorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MajorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMajorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Major model
   */
  readonly fields: MajorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Major.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MajorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends Major$categoryArgs<ExtArgs> = {}>(args?: Subset<T, Major$categoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    course<T extends Major$courseArgs<ExtArgs> = {}>(args?: Subset<T, Major$courseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Major model
   */ 
  interface MajorFieldRefs {
    readonly id: FieldRef<"Major", 'Int'>
    readonly majorNameTH: FieldRef<"Major", 'String'>
    readonly majorNameENG: FieldRef<"Major", 'String'>
    readonly majorYear: FieldRef<"Major", 'String'>
    readonly majorUnit: FieldRef<"Major", 'String'>
    readonly majorStatus: FieldRef<"Major", 'String'>
    readonly majorCode: FieldRef<"Major", 'String'>
    readonly majorSupervisor: FieldRef<"Major", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Major findUnique
   */
  export type MajorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findUniqueOrThrow
   */
  export type MajorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findFirst
   */
  export type MajorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findFirstOrThrow
   */
  export type MajorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findMany
   */
  export type MajorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Majors to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major create
   */
  export type MajorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to create a Major.
     */
    data: XOR<MajorCreateInput, MajorUncheckedCreateInput>
  }

  /**
   * Major createMany
   */
  export type MajorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Major createManyAndReturn
   */
  export type MajorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Major update
   */
  export type MajorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to update a Major.
     */
    data: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
    /**
     * Choose, which Major to update.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major updateMany
   */
  export type MajorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Majors.
     */
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyInput>
    /**
     * Filter which Majors to update
     */
    where?: MajorWhereInput
  }

  /**
   * Major upsert
   */
  export type MajorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The filter to search for the Major to update in case it exists.
     */
    where: MajorWhereUniqueInput
    /**
     * In case the Major found by the `where` argument doesn't exist, create a new Major with this data.
     */
    create: XOR<MajorCreateInput, MajorUncheckedCreateInput>
    /**
     * In case the Major was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
  }

  /**
   * Major delete
   */
  export type MajorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter which Major to delete.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major deleteMany
   */
  export type MajorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Majors to delete
     */
    where?: MajorWhereInput
  }

  /**
   * Major.category
   */
  export type Major$categoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Major.course
   */
  export type Major$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Major without action
   */
  export type MajorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    majorId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    majorId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryUnit: string | null
    majorId: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryUnit: string | null
    majorId: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    categoryName: number
    categoryUnit: number
    majorId: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    majorId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    majorId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    categoryName: string
    categoryUnit: string
    majorId: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | Category$groupArgs<ExtArgs>
    studentPlan?: boolean | Category$studentPlanArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | Category$groupArgs<ExtArgs>
    studentPlan?: boolean | Category$studentPlanArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      major: Prisma.$MajorPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>[]
      studentPlan: Prisma.$StudentPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryName: string
      categoryUnit: string
      majorId: number
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    group<T extends Category$groupArgs<ExtArgs> = {}>(args?: Subset<T, Category$groupArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    studentPlan<T extends Category$studentPlanArgs<ExtArgs> = {}>(args?: Subset<T, Category$studentPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly categoryName: FieldRef<"Category", 'String'>
    readonly categoryUnit: FieldRef<"Category", 'String'>
    readonly majorId: FieldRef<"Category", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.group
   */
  export type Category$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Category.studentPlan
   */
  export type Category$studentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    cursor?: StudentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupUnit: string | null
    categoryId: number | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupUnit: string | null
    categoryId: number | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    groupName: number
    groupUnit: number
    categoryId: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
    categoryId?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    groupName: string
    groupUnit: string
    categoryId: number
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    studentPlan?: boolean | Group$studentPlanArgs<ExtArgs>
    course?: boolean | Group$courseArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    studentPlan?: boolean | Group$studentPlanArgs<ExtArgs>
    course?: boolean | Group$courseArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      studentPlan: Prisma.$StudentPlanPayload<ExtArgs>[]
      course: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      groupName: string
      groupUnit: string
      categoryId: number
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupCreateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends GroupCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    studentPlan<T extends Group$studentPlanArgs<ExtArgs> = {}>(args?: Subset<T, Group$studentPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    course<T extends Group$courseArgs<ExtArgs> = {}>(args?: Subset<T, Group$courseArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'Int'>
    readonly groupName: FieldRef<"Group", 'String'>
    readonly groupUnit: FieldRef<"Group", 'String'>
    readonly categoryId: FieldRef<"Group", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.studentPlan
   */
  export type Group$studentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    cursor?: StudentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * Group.course
   */
  export type Group$courseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    courseUnit: number | null
    majorId: number | null
    groupId: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    courseUnit: number | null
    majorId: number | null
    groupId: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseNameTH: string | null
    courseNameENG: string | null
    courseYear: string | null
    courseUnit: number | null
    majorId: number | null
    groupId: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseNameTH: string | null
    courseNameENG: string | null
    courseYear: string | null
    courseUnit: number | null
    majorId: number | null
    groupId: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    courseCode: number
    courseNameTH: number
    courseNameENG: number
    courseYear: number
    courseUnit: number
    majorId: number
    groupId: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    courseUnit?: true
    majorId?: true
    groupId?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    courseUnit?: true
    majorId?: true
    groupId?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    groupId?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    groupId?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    groupId?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId: number
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    groupId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    studentPlan?: boolean | Course$studentPlanArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    groupId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    groupId?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
    studentPlan?: boolean | Course$studentPlanArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    group?: boolean | GroupDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      major: Prisma.$MajorPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs>
      studentPlan: Prisma.$StudentPlanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseCode: string
      courseNameTH: string
      courseNameENG: string
      courseYear: string
      courseUnit: number
      majorId: number
      groupId: number
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    group<T extends GroupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GroupDefaultArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    studentPlan<T extends Course$studentPlanArgs<ExtArgs> = {}>(args?: Subset<T, Course$studentPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly courseCode: FieldRef<"Course", 'String'>
    readonly courseNameTH: FieldRef<"Course", 'String'>
    readonly courseNameENG: FieldRef<"Course", 'String'>
    readonly courseYear: FieldRef<"Course", 'String'>
    readonly courseUnit: FieldRef<"Course", 'Int'>
    readonly majorId: FieldRef<"Course", 'Int'>
    readonly groupId: FieldRef<"Course", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.studentPlan
   */
  export type Course$studentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StudentPlan
     */
    select?: StudentPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentPlanInclude<ExtArgs> | null
    where?: StudentPlanWhereInput
    orderBy?: StudentPlanOrderByWithRelationInput | StudentPlanOrderByWithRelationInput[]
    cursor?: StudentPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentPlanScalarFieldEnum | StudentPlanScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    username: 'username',
    password: 'password',
    role: 'role'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const StudentInfoScalarFieldEnum: {
    id: 'id',
    studentsId: 'studentsId',
    studentIdcard: 'studentIdcard',
    year: 'year',
    room: 'room'
  };

  export type StudentInfoScalarFieldEnum = (typeof StudentInfoScalarFieldEnum)[keyof typeof StudentInfoScalarFieldEnum]


  export const StudentPlanScalarFieldEnum: {
    id: 'id',
    studentPlanName: 'studentPlanName',
    studentPlanYear: 'studentPlanYear',
    studentsId: 'studentsId',
    categoryId: 'categoryId',
    categoryName: 'categoryName',
    groupId: 'groupId',
    groupName: 'groupName',
    courseId: 'courseId',
    courseName: 'courseName'
  };

  export type StudentPlanScalarFieldEnum = (typeof StudentPlanScalarFieldEnum)[keyof typeof StudentPlanScalarFieldEnum]


  export const MajorScalarFieldEnum: {
    id: 'id',
    majorNameTH: 'majorNameTH',
    majorNameENG: 'majorNameENG',
    majorYear: 'majorYear',
    majorUnit: 'majorUnit',
    majorStatus: 'majorStatus',
    majorCode: 'majorCode',
    majorSupervisor: 'majorSupervisor'
  };

  export type MajorScalarFieldEnum = (typeof MajorScalarFieldEnum)[keyof typeof MajorScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    categoryName: 'categoryName',
    categoryUnit: 'categoryUnit',
    majorId: 'majorId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    groupUnit: 'groupUnit',
    categoryId: 'categoryId'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    courseCode: 'courseCode',
    courseNameTH: 'courseNameTH',
    courseNameENG: 'courseNameENG',
    courseYear: 'courseYear',
    courseUnit: 'courseUnit',
    majorId: 'majorId',
    groupId: 'groupId'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    studentInfo?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    studentInfo?: StudentInfoOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    studentInfo?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
  }

  export type StudentInfoWhereInput = {
    AND?: StudentInfoWhereInput | StudentInfoWhereInput[]
    OR?: StudentInfoWhereInput[]
    NOT?: StudentInfoWhereInput | StudentInfoWhereInput[]
    id?: IntFilter<"StudentInfo"> | number
    studentsId?: IntFilter<"StudentInfo"> | number
    studentIdcard?: IntFilter<"StudentInfo"> | number
    year?: IntFilter<"StudentInfo"> | number
    room?: IntFilter<"StudentInfo"> | number
    student?: XOR<UserRelationFilter, UserWhereInput>
    studentPlan?: StudentPlanListRelationFilter
  }

  export type StudentInfoOrderByWithRelationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
    student?: UserOrderByWithRelationInput
    studentPlan?: StudentPlanOrderByRelationAggregateInput
  }

  export type StudentInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentsId?: number
    AND?: StudentInfoWhereInput | StudentInfoWhereInput[]
    OR?: StudentInfoWhereInput[]
    NOT?: StudentInfoWhereInput | StudentInfoWhereInput[]
    studentIdcard?: IntFilter<"StudentInfo"> | number
    year?: IntFilter<"StudentInfo"> | number
    room?: IntFilter<"StudentInfo"> | number
    student?: XOR<UserRelationFilter, UserWhereInput>
    studentPlan?: StudentPlanListRelationFilter
  }, "id" | "studentsId">

  export type StudentInfoOrderByWithAggregationInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
    _count?: StudentInfoCountOrderByAggregateInput
    _avg?: StudentInfoAvgOrderByAggregateInput
    _max?: StudentInfoMaxOrderByAggregateInput
    _min?: StudentInfoMinOrderByAggregateInput
    _sum?: StudentInfoSumOrderByAggregateInput
  }

  export type StudentInfoScalarWhereWithAggregatesInput = {
    AND?: StudentInfoScalarWhereWithAggregatesInput | StudentInfoScalarWhereWithAggregatesInput[]
    OR?: StudentInfoScalarWhereWithAggregatesInput[]
    NOT?: StudentInfoScalarWhereWithAggregatesInput | StudentInfoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentInfo"> | number
    studentsId?: IntWithAggregatesFilter<"StudentInfo"> | number
    studentIdcard?: IntWithAggregatesFilter<"StudentInfo"> | number
    year?: IntWithAggregatesFilter<"StudentInfo"> | number
    room?: IntWithAggregatesFilter<"StudentInfo"> | number
  }

  export type StudentPlanWhereInput = {
    AND?: StudentPlanWhereInput | StudentPlanWhereInput[]
    OR?: StudentPlanWhereInput[]
    NOT?: StudentPlanWhereInput | StudentPlanWhereInput[]
    id?: IntFilter<"StudentPlan"> | number
    studentPlanName?: StringFilter<"StudentPlan"> | string
    studentPlanYear?: StringFilter<"StudentPlan"> | string
    studentsId?: IntNullableFilter<"StudentPlan"> | number | null
    categoryId?: IntNullableFilter<"StudentPlan"> | number | null
    categoryName?: StringNullableFilter<"StudentPlan"> | string | null
    groupId?: IntNullableFilter<"StudentPlan"> | number | null
    groupName?: StringNullableFilter<"StudentPlan"> | string | null
    courseId?: IntNullableFilter<"StudentPlan"> | number | null
    courseName?: StringNullableFilter<"StudentPlan"> | string | null
    student?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
  }

  export type StudentPlanOrderByWithRelationInput = {
    id?: SortOrder
    studentPlanName?: SortOrder
    studentPlanYear?: SortOrder
    studentsId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    categoryName?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    groupName?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    courseName?: SortOrderInput | SortOrder
    student?: StudentInfoOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type StudentPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    studentsId?: number
    AND?: StudentPlanWhereInput | StudentPlanWhereInput[]
    OR?: StudentPlanWhereInput[]
    NOT?: StudentPlanWhereInput | StudentPlanWhereInput[]
    studentPlanName?: StringFilter<"StudentPlan"> | string
    studentPlanYear?: StringFilter<"StudentPlan"> | string
    categoryId?: IntNullableFilter<"StudentPlan"> | number | null
    categoryName?: StringNullableFilter<"StudentPlan"> | string | null
    groupId?: IntNullableFilter<"StudentPlan"> | number | null
    groupName?: StringNullableFilter<"StudentPlan"> | string | null
    courseId?: IntNullableFilter<"StudentPlan"> | number | null
    courseName?: StringNullableFilter<"StudentPlan"> | string | null
    student?: XOR<StudentInfoNullableRelationFilter, StudentInfoWhereInput> | null
    category?: XOR<CategoryNullableRelationFilter, CategoryWhereInput> | null
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    course?: XOR<CourseNullableRelationFilter, CourseWhereInput> | null
  }, "id" | "studentsId">

  export type StudentPlanOrderByWithAggregationInput = {
    id?: SortOrder
    studentPlanName?: SortOrder
    studentPlanYear?: SortOrder
    studentsId?: SortOrderInput | SortOrder
    categoryId?: SortOrderInput | SortOrder
    categoryName?: SortOrderInput | SortOrder
    groupId?: SortOrderInput | SortOrder
    groupName?: SortOrderInput | SortOrder
    courseId?: SortOrderInput | SortOrder
    courseName?: SortOrderInput | SortOrder
    _count?: StudentPlanCountOrderByAggregateInput
    _avg?: StudentPlanAvgOrderByAggregateInput
    _max?: StudentPlanMaxOrderByAggregateInput
    _min?: StudentPlanMinOrderByAggregateInput
    _sum?: StudentPlanSumOrderByAggregateInput
  }

  export type StudentPlanScalarWhereWithAggregatesInput = {
    AND?: StudentPlanScalarWhereWithAggregatesInput | StudentPlanScalarWhereWithAggregatesInput[]
    OR?: StudentPlanScalarWhereWithAggregatesInput[]
    NOT?: StudentPlanScalarWhereWithAggregatesInput | StudentPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StudentPlan"> | number
    studentPlanName?: StringWithAggregatesFilter<"StudentPlan"> | string
    studentPlanYear?: StringWithAggregatesFilter<"StudentPlan"> | string
    studentsId?: IntNullableWithAggregatesFilter<"StudentPlan"> | number | null
    categoryId?: IntNullableWithAggregatesFilter<"StudentPlan"> | number | null
    categoryName?: StringNullableWithAggregatesFilter<"StudentPlan"> | string | null
    groupId?: IntNullableWithAggregatesFilter<"StudentPlan"> | number | null
    groupName?: StringNullableWithAggregatesFilter<"StudentPlan"> | string | null
    courseId?: IntNullableWithAggregatesFilter<"StudentPlan"> | number | null
    courseName?: StringNullableWithAggregatesFilter<"StudentPlan"> | string | null
  }

  export type MajorWhereInput = {
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    id?: IntFilter<"Major"> | number
    majorNameTH?: StringFilter<"Major"> | string
    majorNameENG?: StringFilter<"Major"> | string
    majorYear?: StringFilter<"Major"> | string
    majorUnit?: StringFilter<"Major"> | string
    majorStatus?: StringFilter<"Major"> | string
    majorCode?: StringFilter<"Major"> | string
    majorSupervisor?: StringFilter<"Major"> | string
    category?: CategoryListRelationFilter
    course?: CourseListRelationFilter
  }

  export type MajorOrderByWithRelationInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
    category?: CategoryOrderByRelationAggregateInput
    course?: CourseOrderByRelationAggregateInput
  }

  export type MajorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    majorNameTH?: StringFilter<"Major"> | string
    majorNameENG?: StringFilter<"Major"> | string
    majorYear?: StringFilter<"Major"> | string
    majorUnit?: StringFilter<"Major"> | string
    majorStatus?: StringFilter<"Major"> | string
    majorCode?: StringFilter<"Major"> | string
    majorSupervisor?: StringFilter<"Major"> | string
    category?: CategoryListRelationFilter
    course?: CourseListRelationFilter
  }, "id">

  export type MajorOrderByWithAggregationInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
    _count?: MajorCountOrderByAggregateInput
    _avg?: MajorAvgOrderByAggregateInput
    _max?: MajorMaxOrderByAggregateInput
    _min?: MajorMinOrderByAggregateInput
    _sum?: MajorSumOrderByAggregateInput
  }

  export type MajorScalarWhereWithAggregatesInput = {
    AND?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    OR?: MajorScalarWhereWithAggregatesInput[]
    NOT?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Major"> | number
    majorNameTH?: StringWithAggregatesFilter<"Major"> | string
    majorNameENG?: StringWithAggregatesFilter<"Major"> | string
    majorYear?: StringWithAggregatesFilter<"Major"> | string
    majorUnit?: StringWithAggregatesFilter<"Major"> | string
    majorStatus?: StringWithAggregatesFilter<"Major"> | string
    majorCode?: StringWithAggregatesFilter<"Major"> | string
    majorSupervisor?: StringWithAggregatesFilter<"Major"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    group?: GroupListRelationFilter
    studentPlan?: StudentPlanListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
    major?: MajorOrderByWithRelationInput
    group?: GroupOrderByRelationAggregateInput
    studentPlan?: StudentPlanOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    group?: GroupListRelationFilter
    studentPlan?: StudentPlanListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    categoryName?: StringWithAggregatesFilter<"Category"> | string
    categoryUnit?: StringWithAggregatesFilter<"Category"> | string
    majorId?: IntWithAggregatesFilter<"Category"> | number
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: IntFilter<"Group"> | number
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    studentPlan?: StudentPlanListRelationFilter
    course?: CourseListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    category?: CategoryOrderByWithRelationInput
    studentPlan?: StudentPlanOrderByRelationAggregateInput
    course?: CourseOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    studentPlan?: StudentPlanListRelationFilter
    course?: CourseListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Group"> | number
    groupName?: StringWithAggregatesFilter<"Group"> | string
    groupUnit?: StringWithAggregatesFilter<"Group"> | string
    categoryId?: IntWithAggregatesFilter<"Group"> | number
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    groupId?: IntFilter<"Course"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    studentPlan?: StudentPlanListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
    major?: MajorOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
    studentPlan?: StudentPlanOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    groupId?: IntFilter<"Course"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    group?: XOR<GroupRelationFilter, GroupWhereInput>
    studentPlan?: StudentPlanListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    courseCode?: StringWithAggregatesFilter<"Course"> | string
    courseNameTH?: StringWithAggregatesFilter<"Course"> | string
    courseNameENG?: StringWithAggregatesFilter<"Course"> | string
    courseYear?: StringWithAggregatesFilter<"Course"> | string
    courseUnit?: IntWithAggregatesFilter<"Course"> | number
    majorId?: IntWithAggregatesFilter<"Course"> | number
    groupId?: IntWithAggregatesFilter<"Course"> | number
  }

  export type UserCreateInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
    studentInfo?: StudentInfoCreateNestedOneWithoutStudentInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
    studentInfo?: StudentInfoUncheckedCreateNestedOneWithoutStudentInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    studentInfo?: StudentInfoUpdateOneWithoutStudentNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    studentInfo?: StudentInfoUncheckedUpdateOneWithoutStudentNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type StudentInfoCreateInput = {
    studentIdcard: number
    year: number
    room: number
    student: UserCreateNestedOneWithoutStudentInfoInput
    studentPlan?: StudentPlanCreateNestedManyWithoutStudentInput
  }

  export type StudentInfoUncheckedCreateInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentInfoUpdateInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutStudentInfoNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutStudentNestedInput
  }

  export type StudentInfoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type StudentInfoCreateManyInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
  }

  export type StudentInfoUpdateManyMutationInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type StudentInfoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type StudentPlanCreateInput = {
    studentPlanName: string
    studentPlanYear: string
    categoryName?: string | null
    groupName?: string | null
    courseName?: string | null
    student?: StudentInfoCreateNestedOneWithoutStudentPlanInput
    category?: CategoryCreateNestedOneWithoutStudentPlanInput
    group?: GroupCreateNestedOneWithoutStudentPlanInput
    course?: CourseCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanUpdateInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentInfoUpdateOneWithoutStudentPlanNestedInput
    category?: CategoryUpdateOneWithoutStudentPlanNestedInput
    group?: GroupUpdateOneWithoutStudentPlanNestedInput
    course?: CourseUpdateOneWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanCreateManyInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanUpdateManyMutationInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MajorCreateInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    category?: CategoryCreateNestedManyWithoutMajorInput
    course?: CourseCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    category?: CategoryUncheckedCreateNestedManyWithoutMajorInput
    course?: CourseUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorUpdateInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateManyWithoutMajorNestedInput
    course?: CourseUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    category?: CategoryUncheckedUpdateManyWithoutMajorNestedInput
    course?: CourseUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type MajorCreateManyInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
  }

  export type MajorUpdateManyMutationInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
  }

  export type MajorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoryInput
    group?: GroupCreateNestedManyWithoutCategoryInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    group?: GroupUncheckedCreateNestedManyWithoutCategoryInput
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoryNestedInput
    group?: GroupUpdateManyWithoutCategoryNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    group?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
  }

  export type CategoryUpdateManyMutationInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupCreateInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupInput
    studentPlan?: StudentPlanCreateNestedManyWithoutGroupInput
    course?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutGroupInput
    course?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutGroupNestedInput
    course?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutGroupNestedInput
    course?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
  }

  export type GroupUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseCreateInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCourseInput
    group: GroupCreateNestedOneWithoutCourseInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCourseNestedInput
    group?: GroupUpdateOneRequiredWithoutCourseNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId: number
  }

  export type CourseUpdateManyMutationInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StudentInfoNullableRelationFilter = {
    is?: StudentInfoWhereInput | null
    isNot?: StudentInfoWhereInput | null
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type StudentPlanListRelationFilter = {
    every?: StudentPlanWhereInput
    some?: StudentPlanWhereInput
    none?: StudentPlanWhereInput
  }

  export type StudentPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StudentInfoCountOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoAvgOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoMinOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type StudentInfoSumOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    studentIdcard?: SortOrder
    year?: SortOrder
    room?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CategoryNullableRelationFilter = {
    is?: CategoryWhereInput | null
    isNot?: CategoryWhereInput | null
  }

  export type GroupNullableRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type CourseNullableRelationFilter = {
    is?: CourseWhereInput | null
    isNot?: CourseWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type StudentPlanCountOrderByAggregateInput = {
    id?: SortOrder
    studentPlanName?: SortOrder
    studentPlanYear?: SortOrder
    studentsId?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
    groupId?: SortOrder
    groupName?: SortOrder
    courseId?: SortOrder
    courseName?: SortOrder
  }

  export type StudentPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
    courseId?: SortOrder
  }

  export type StudentPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    studentPlanName?: SortOrder
    studentPlanYear?: SortOrder
    studentsId?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
    groupId?: SortOrder
    groupName?: SortOrder
    courseId?: SortOrder
    courseName?: SortOrder
  }

  export type StudentPlanMinOrderByAggregateInput = {
    id?: SortOrder
    studentPlanName?: SortOrder
    studentPlanYear?: SortOrder
    studentsId?: SortOrder
    categoryId?: SortOrder
    categoryName?: SortOrder
    groupId?: SortOrder
    groupName?: SortOrder
    courseId?: SortOrder
    courseName?: SortOrder
  }

  export type StudentPlanSumOrderByAggregateInput = {
    id?: SortOrder
    studentsId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
    courseId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MajorCountOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MajorMaxOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorMinOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MajorRelationFilter = {
    is?: MajorWhereInput
    isNot?: MajorWhereInput
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
  }

  export type GroupRelationFilter = {
    is?: GroupWhereInput
    isNot?: GroupWhereInput
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    groupId?: SortOrder
  }

  export type StudentInfoCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type StudentInfoUncheckedCreateNestedOneWithoutStudentInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type StudentInfoUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    upsert?: StudentInfoUpsertWithoutStudentInput
    disconnect?: StudentInfoWhereInput | boolean
    delete?: StudentInfoWhereInput | boolean
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentInput, StudentInfoUpdateWithoutStudentInput>, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StudentInfoUncheckedUpdateOneWithoutStudentNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentInput
    upsert?: StudentInfoUpsertWithoutStudentInput
    disconnect?: StudentInfoWhereInput | boolean
    delete?: StudentInfoWhereInput | boolean
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentInput, StudentInfoUpdateWithoutStudentInput>, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type UserCreateNestedOneWithoutStudentInfoInput = {
    create?: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInfoInput
    connect?: UserWhereUniqueInput
  }

  export type StudentPlanCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput> | StudentPlanCreateWithoutStudentInput[] | StudentPlanUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput | StudentPlanCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPlanCreateManyStudentInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type StudentPlanUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput> | StudentPlanCreateWithoutStudentInput[] | StudentPlanUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput | StudentPlanCreateOrConnectWithoutStudentInput[]
    createMany?: StudentPlanCreateManyStudentInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutStudentInfoNestedInput = {
    create?: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutStudentInfoInput
    upsert?: UserUpsertWithoutStudentInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutStudentInfoInput, UserUpdateWithoutStudentInfoInput>, UserUncheckedUpdateWithoutStudentInfoInput>
  }

  export type StudentPlanUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput> | StudentPlanCreateWithoutStudentInput[] | StudentPlanUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput | StudentPlanCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutStudentInput | StudentPlanUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPlanCreateManyStudentInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutStudentInput | StudentPlanUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutStudentInput | StudentPlanUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type StudentPlanUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput> | StudentPlanCreateWithoutStudentInput[] | StudentPlanUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutStudentInput | StudentPlanCreateOrConnectWithoutStudentInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutStudentInput | StudentPlanUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: StudentPlanCreateManyStudentInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutStudentInput | StudentPlanUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutStudentInput | StudentPlanUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type StudentInfoCreateNestedOneWithoutStudentPlanInput = {
    create?: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentPlanInput
    connect?: StudentInfoWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutStudentPlanInput = {
    create?: XOR<CategoryCreateWithoutStudentPlanInput, CategoryUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutStudentPlanInput
    connect?: CategoryWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutStudentPlanInput = {
    create?: XOR<GroupCreateWithoutStudentPlanInput, GroupUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: GroupCreateOrConnectWithoutStudentPlanInput
    connect?: GroupWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutStudentPlanInput = {
    create?: XOR<CourseCreateWithoutStudentPlanInput, CourseUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentPlanInput
    connect?: CourseWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type StudentInfoUpdateOneWithoutStudentPlanNestedInput = {
    create?: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: StudentInfoCreateOrConnectWithoutStudentPlanInput
    upsert?: StudentInfoUpsertWithoutStudentPlanInput
    disconnect?: StudentInfoWhereInput | boolean
    delete?: StudentInfoWhereInput | boolean
    connect?: StudentInfoWhereUniqueInput
    update?: XOR<XOR<StudentInfoUpdateToOneWithWhereWithoutStudentPlanInput, StudentInfoUpdateWithoutStudentPlanInput>, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
  }

  export type CategoryUpdateOneWithoutStudentPlanNestedInput = {
    create?: XOR<CategoryCreateWithoutStudentPlanInput, CategoryUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutStudentPlanInput
    upsert?: CategoryUpsertWithoutStudentPlanInput
    disconnect?: CategoryWhereInput | boolean
    delete?: CategoryWhereInput | boolean
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutStudentPlanInput, CategoryUpdateWithoutStudentPlanInput>, CategoryUncheckedUpdateWithoutStudentPlanInput>
  }

  export type GroupUpdateOneWithoutStudentPlanNestedInput = {
    create?: XOR<GroupCreateWithoutStudentPlanInput, GroupUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: GroupCreateOrConnectWithoutStudentPlanInput
    upsert?: GroupUpsertWithoutStudentPlanInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutStudentPlanInput, GroupUpdateWithoutStudentPlanInput>, GroupUncheckedUpdateWithoutStudentPlanInput>
  }

  export type CourseUpdateOneWithoutStudentPlanNestedInput = {
    create?: XOR<CourseCreateWithoutStudentPlanInput, CourseUncheckedCreateWithoutStudentPlanInput>
    connectOrCreate?: CourseCreateOrConnectWithoutStudentPlanInput
    upsert?: CourseUpsertWithoutStudentPlanInput
    disconnect?: CourseWhereInput | boolean
    delete?: CourseWhereInput | boolean
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutStudentPlanInput, CourseUpdateWithoutStudentPlanInput>, CourseUncheckedUpdateWithoutStudentPlanInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CategoryCreateNestedManyWithoutMajorInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutMajorInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutMajorInput | CategoryUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutMajorInput | CategoryUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutMajorInput | CategoryUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutMajorInput | CourseUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutMajorInput | CourseUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutMajorInput | CourseUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutMajorInput | CategoryUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutMajorInput | CategoryUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutMajorInput | CategoryUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutMajorInput | CourseUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutMajorInput | CourseUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutMajorInput | CourseUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type MajorCreateNestedOneWithoutCategoryInput = {
    create?: XOR<MajorCreateWithoutCategoryInput, MajorUncheckedCreateWithoutCategoryInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCategoryInput
    connect?: MajorWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type StudentPlanCreateNestedManyWithoutCategoryInput = {
    create?: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput> | StudentPlanCreateWithoutCategoryInput[] | StudentPlanUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCategoryInput | StudentPlanCreateOrConnectWithoutCategoryInput[]
    createMany?: StudentPlanCreateManyCategoryInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type StudentPlanUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput> | StudentPlanCreateWithoutCategoryInput[] | StudentPlanUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCategoryInput | StudentPlanCreateOrConnectWithoutCategoryInput[]
    createMany?: StudentPlanCreateManyCategoryInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type MajorUpdateOneRequiredWithoutCategoryNestedInput = {
    create?: XOR<MajorCreateWithoutCategoryInput, MajorUncheckedCreateWithoutCategoryInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCategoryInput
    upsert?: MajorUpsertWithoutCategoryInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutCategoryInput, MajorUpdateWithoutCategoryInput>, MajorUncheckedUpdateWithoutCategoryInput>
  }

  export type GroupUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutCategoryInput | GroupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutCategoryInput | GroupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutCategoryInput | GroupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type StudentPlanUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput> | StudentPlanCreateWithoutCategoryInput[] | StudentPlanUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCategoryInput | StudentPlanCreateOrConnectWithoutCategoryInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutCategoryInput | StudentPlanUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: StudentPlanCreateManyCategoryInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutCategoryInput | StudentPlanUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutCategoryInput | StudentPlanUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutCategoryInput | GroupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutCategoryInput | GroupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutCategoryInput | GroupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type StudentPlanUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput> | StudentPlanCreateWithoutCategoryInput[] | StudentPlanUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCategoryInput | StudentPlanCreateOrConnectWithoutCategoryInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutCategoryInput | StudentPlanUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: StudentPlanCreateManyCategoryInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutCategoryInput | StudentPlanUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutCategoryInput | StudentPlanUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutGroupInput = {
    create?: XOR<CategoryCreateWithoutGroupInput, CategoryUncheckedCreateWithoutGroupInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutGroupInput
    connect?: CategoryWhereUniqueInput
  }

  export type StudentPlanCreateNestedManyWithoutGroupInput = {
    create?: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput> | StudentPlanCreateWithoutGroupInput[] | StudentPlanUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutGroupInput | StudentPlanCreateOrConnectWithoutGroupInput[]
    createMany?: StudentPlanCreateManyGroupInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutGroupInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type StudentPlanUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput> | StudentPlanCreateWithoutGroupInput[] | StudentPlanUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutGroupInput | StudentPlanCreateOrConnectWithoutGroupInput[]
    createMany?: StudentPlanCreateManyGroupInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutGroupNestedInput = {
    create?: XOR<CategoryCreateWithoutGroupInput, CategoryUncheckedCreateWithoutGroupInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutGroupInput
    upsert?: CategoryUpsertWithoutGroupInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutGroupInput, CategoryUpdateWithoutGroupInput>, CategoryUncheckedUpdateWithoutGroupInput>
  }

  export type StudentPlanUpdateManyWithoutGroupNestedInput = {
    create?: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput> | StudentPlanCreateWithoutGroupInput[] | StudentPlanUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutGroupInput | StudentPlanCreateOrConnectWithoutGroupInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutGroupInput | StudentPlanUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: StudentPlanCreateManyGroupInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutGroupInput | StudentPlanUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutGroupInput | StudentPlanUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutGroupNestedInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutGroupInput | CourseUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutGroupInput | CourseUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutGroupInput | CourseUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type StudentPlanUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput> | StudentPlanCreateWithoutGroupInput[] | StudentPlanUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutGroupInput | StudentPlanCreateOrConnectWithoutGroupInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutGroupInput | StudentPlanUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: StudentPlanCreateManyGroupInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutGroupInput | StudentPlanUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutGroupInput | StudentPlanUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutGroupInput | CourseUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutGroupInput | CourseUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutGroupInput | CourseUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type MajorCreateNestedOneWithoutCourseInput = {
    create?: XOR<MajorCreateWithoutCourseInput, MajorUncheckedCreateWithoutCourseInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCourseInput
    connect?: MajorWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutCourseInput = {
    create?: XOR<GroupCreateWithoutCourseInput, GroupUncheckedCreateWithoutCourseInput>
    connectOrCreate?: GroupCreateOrConnectWithoutCourseInput
    connect?: GroupWhereUniqueInput
  }

  export type StudentPlanCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput> | StudentPlanCreateWithoutCourseInput[] | StudentPlanUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCourseInput | StudentPlanCreateOrConnectWithoutCourseInput[]
    createMany?: StudentPlanCreateManyCourseInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type StudentPlanUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput> | StudentPlanCreateWithoutCourseInput[] | StudentPlanUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCourseInput | StudentPlanCreateOrConnectWithoutCourseInput[]
    createMany?: StudentPlanCreateManyCourseInputEnvelope
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
  }

  export type MajorUpdateOneRequiredWithoutCourseNestedInput = {
    create?: XOR<MajorCreateWithoutCourseInput, MajorUncheckedCreateWithoutCourseInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCourseInput
    upsert?: MajorUpsertWithoutCourseInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutCourseInput, MajorUpdateWithoutCourseInput>, MajorUncheckedUpdateWithoutCourseInput>
  }

  export type GroupUpdateOneRequiredWithoutCourseNestedInput = {
    create?: XOR<GroupCreateWithoutCourseInput, GroupUncheckedCreateWithoutCourseInput>
    connectOrCreate?: GroupCreateOrConnectWithoutCourseInput
    upsert?: GroupUpsertWithoutCourseInput
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutCourseInput, GroupUpdateWithoutCourseInput>, GroupUncheckedUpdateWithoutCourseInput>
  }

  export type StudentPlanUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput> | StudentPlanCreateWithoutCourseInput[] | StudentPlanUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCourseInput | StudentPlanCreateOrConnectWithoutCourseInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutCourseInput | StudentPlanUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentPlanCreateManyCourseInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutCourseInput | StudentPlanUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutCourseInput | StudentPlanUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type StudentPlanUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput> | StudentPlanCreateWithoutCourseInput[] | StudentPlanUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: StudentPlanCreateOrConnectWithoutCourseInput | StudentPlanCreateOrConnectWithoutCourseInput[]
    upsert?: StudentPlanUpsertWithWhereUniqueWithoutCourseInput | StudentPlanUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: StudentPlanCreateManyCourseInputEnvelope
    set?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    disconnect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    delete?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    connect?: StudentPlanWhereUniqueInput | StudentPlanWhereUniqueInput[]
    update?: StudentPlanUpdateWithWhereUniqueWithoutCourseInput | StudentPlanUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: StudentPlanUpdateManyWithWhereWithoutCourseInput | StudentPlanUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StudentInfoCreateWithoutStudentInput = {
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanCreateNestedManyWithoutStudentInput
  }

  export type StudentInfoUncheckedCreateWithoutStudentInput = {
    id?: number
    studentIdcard: number
    year: number
    room: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutStudentInput
  }

  export type StudentInfoCreateOrConnectWithoutStudentInput = {
    where: StudentInfoWhereUniqueInput
    create: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
  }

  export type StudentInfoUpsertWithoutStudentInput = {
    update: XOR<StudentInfoUpdateWithoutStudentInput, StudentInfoUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentInfoCreateWithoutStudentInput, StudentInfoUncheckedCreateWithoutStudentInput>
    where?: StudentInfoWhereInput
  }

  export type StudentInfoUpdateToOneWithWhereWithoutStudentInput = {
    where?: StudentInfoWhereInput
    data: XOR<StudentInfoUpdateWithoutStudentInput, StudentInfoUncheckedUpdateWithoutStudentInput>
  }

  export type StudentInfoUpdateWithoutStudentInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUpdateManyWithoutStudentNestedInput
  }

  export type StudentInfoUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutStudentNestedInput
  }

  export type UserCreateWithoutStudentInfoInput = {
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserUncheckedCreateWithoutStudentInfoInput = {
    id?: number
    name: string
    username: string
    password: string
    role: $Enums.Role
  }

  export type UserCreateOrConnectWithoutStudentInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
  }

  export type StudentPlanCreateWithoutStudentInput = {
    studentPlanName: string
    studentPlanYear: string
    categoryName?: string | null
    groupName?: string | null
    courseName?: string | null
    category?: CategoryCreateNestedOneWithoutStudentPlanInput
    group?: GroupCreateNestedOneWithoutStudentPlanInput
    course?: CourseCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateWithoutStudentInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanCreateOrConnectWithoutStudentInput = {
    where: StudentPlanWhereUniqueInput
    create: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
  }

  export type StudentPlanCreateManyStudentInputEnvelope = {
    data: StudentPlanCreateManyStudentInput | StudentPlanCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutStudentInfoInput = {
    update: XOR<UserUpdateWithoutStudentInfoInput, UserUncheckedUpdateWithoutStudentInfoInput>
    create: XOR<UserCreateWithoutStudentInfoInput, UserUncheckedCreateWithoutStudentInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutStudentInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutStudentInfoInput, UserUncheckedUpdateWithoutStudentInfoInput>
  }

  export type UserUpdateWithoutStudentInfoInput = {
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserUncheckedUpdateWithoutStudentInfoInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type StudentPlanUpsertWithWhereUniqueWithoutStudentInput = {
    where: StudentPlanWhereUniqueInput
    update: XOR<StudentPlanUpdateWithoutStudentInput, StudentPlanUncheckedUpdateWithoutStudentInput>
    create: XOR<StudentPlanCreateWithoutStudentInput, StudentPlanUncheckedCreateWithoutStudentInput>
  }

  export type StudentPlanUpdateWithWhereUniqueWithoutStudentInput = {
    where: StudentPlanWhereUniqueInput
    data: XOR<StudentPlanUpdateWithoutStudentInput, StudentPlanUncheckedUpdateWithoutStudentInput>
  }

  export type StudentPlanUpdateManyWithWhereWithoutStudentInput = {
    where: StudentPlanScalarWhereInput
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyWithoutStudentInput>
  }

  export type StudentPlanScalarWhereInput = {
    AND?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
    OR?: StudentPlanScalarWhereInput[]
    NOT?: StudentPlanScalarWhereInput | StudentPlanScalarWhereInput[]
    id?: IntFilter<"StudentPlan"> | number
    studentPlanName?: StringFilter<"StudentPlan"> | string
    studentPlanYear?: StringFilter<"StudentPlan"> | string
    studentsId?: IntNullableFilter<"StudentPlan"> | number | null
    categoryId?: IntNullableFilter<"StudentPlan"> | number | null
    categoryName?: StringNullableFilter<"StudentPlan"> | string | null
    groupId?: IntNullableFilter<"StudentPlan"> | number | null
    groupName?: StringNullableFilter<"StudentPlan"> | string | null
    courseId?: IntNullableFilter<"StudentPlan"> | number | null
    courseName?: StringNullableFilter<"StudentPlan"> | string | null
  }

  export type StudentInfoCreateWithoutStudentPlanInput = {
    studentIdcard: number
    year: number
    room: number
    student: UserCreateNestedOneWithoutStudentInfoInput
  }

  export type StudentInfoUncheckedCreateWithoutStudentPlanInput = {
    id?: number
    studentsId: number
    studentIdcard: number
    year: number
    room: number
  }

  export type StudentInfoCreateOrConnectWithoutStudentPlanInput = {
    where: StudentInfoWhereUniqueInput
    create: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
  }

  export type CategoryCreateWithoutStudentPlanInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoryInput
    group?: GroupCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutStudentPlanInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    group?: GroupUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutStudentPlanInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutStudentPlanInput, CategoryUncheckedCreateWithoutStudentPlanInput>
  }

  export type GroupCreateWithoutStudentPlanInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupInput
    course?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutStudentPlanInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    course?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutStudentPlanInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutStudentPlanInput, GroupUncheckedCreateWithoutStudentPlanInput>
  }

  export type CourseCreateWithoutStudentPlanInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCourseInput
    group: GroupCreateNestedOneWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutStudentPlanInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId: number
  }

  export type CourseCreateOrConnectWithoutStudentPlanInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutStudentPlanInput, CourseUncheckedCreateWithoutStudentPlanInput>
  }

  export type StudentInfoUpsertWithoutStudentPlanInput = {
    update: XOR<StudentInfoUpdateWithoutStudentPlanInput, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
    create: XOR<StudentInfoCreateWithoutStudentPlanInput, StudentInfoUncheckedCreateWithoutStudentPlanInput>
    where?: StudentInfoWhereInput
  }

  export type StudentInfoUpdateToOneWithWhereWithoutStudentPlanInput = {
    where?: StudentInfoWhereInput
    data: XOR<StudentInfoUpdateWithoutStudentPlanInput, StudentInfoUncheckedUpdateWithoutStudentPlanInput>
  }

  export type StudentInfoUpdateWithoutStudentPlanInput = {
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
    student?: UserUpdateOneRequiredWithoutStudentInfoNestedInput
  }

  export type StudentInfoUncheckedUpdateWithoutStudentPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentsId?: IntFieldUpdateOperationsInput | number
    studentIdcard?: IntFieldUpdateOperationsInput | number
    year?: IntFieldUpdateOperationsInput | number
    room?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryUpsertWithoutStudentPlanInput = {
    update: XOR<CategoryUpdateWithoutStudentPlanInput, CategoryUncheckedUpdateWithoutStudentPlanInput>
    create: XOR<CategoryCreateWithoutStudentPlanInput, CategoryUncheckedCreateWithoutStudentPlanInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutStudentPlanInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutStudentPlanInput, CategoryUncheckedUpdateWithoutStudentPlanInput>
  }

  export type CategoryUpdateWithoutStudentPlanInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoryNestedInput
    group?: GroupUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutStudentPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    group?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type GroupUpsertWithoutStudentPlanInput = {
    update: XOR<GroupUpdateWithoutStudentPlanInput, GroupUncheckedUpdateWithoutStudentPlanInput>
    create: XOR<GroupCreateWithoutStudentPlanInput, GroupUncheckedCreateWithoutStudentPlanInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutStudentPlanInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutStudentPlanInput, GroupUncheckedUpdateWithoutStudentPlanInput>
  }

  export type GroupUpdateWithoutStudentPlanInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupNestedInput
    course?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutStudentPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    course?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type CourseUpsertWithoutStudentPlanInput = {
    update: XOR<CourseUpdateWithoutStudentPlanInput, CourseUncheckedUpdateWithoutStudentPlanInput>
    create: XOR<CourseCreateWithoutStudentPlanInput, CourseUncheckedCreateWithoutStudentPlanInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutStudentPlanInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutStudentPlanInput, CourseUncheckedUpdateWithoutStudentPlanInput>
  }

  export type CourseUpdateWithoutStudentPlanInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCourseNestedInput
    group?: GroupUpdateOneRequiredWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutStudentPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type CategoryCreateWithoutMajorInput = {
    categoryName: string
    categoryUnit: string
    group?: GroupCreateNestedManyWithoutCategoryInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutMajorInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    group?: GroupUncheckedCreateNestedManyWithoutCategoryInput
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput>
  }

  export type CategoryCreateManyMajorInputEnvelope = {
    data: CategoryCreateManyMajorInput | CategoryCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutMajorInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    group: GroupCreateNestedOneWithoutCourseInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutMajorInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    groupId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutMajorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput>
  }

  export type CourseCreateManyMajorInputEnvelope = {
    data: CourseCreateManyMajorInput | CourseCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutMajorInput, CategoryUncheckedUpdateWithoutMajorInput>
    create: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutMajorInput, CategoryUncheckedUpdateWithoutMajorInput>
  }

  export type CategoryUpdateManyWithWhereWithoutMajorInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutMajorInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
  }

  export type CourseUpsertWithWhereUniqueWithoutMajorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutMajorInput, CourseUncheckedUpdateWithoutMajorInput>
    create: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutMajorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutMajorInput, CourseUncheckedUpdateWithoutMajorInput>
  }

  export type CourseUpdateManyWithWhereWithoutMajorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutMajorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    groupId?: IntFilter<"Course"> | number
  }

  export type MajorCreateWithoutCategoryInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    course?: CourseCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateWithoutCategoryInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    course?: CourseUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorCreateOrConnectWithoutCategoryInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutCategoryInput, MajorUncheckedCreateWithoutCategoryInput>
  }

  export type GroupCreateWithoutCategoryInput = {
    groupName: string
    groupUnit: string
    studentPlan?: StudentPlanCreateNestedManyWithoutGroupInput
    course?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutCategoryInput = {
    id?: number
    groupName: string
    groupUnit: string
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutGroupInput
    course?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput>
  }

  export type GroupCreateManyCategoryInputEnvelope = {
    data: GroupCreateManyCategoryInput | GroupCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type StudentPlanCreateWithoutCategoryInput = {
    studentPlanName: string
    studentPlanYear: string
    categoryName?: string | null
    groupName?: string | null
    courseName?: string | null
    student?: StudentInfoCreateNestedOneWithoutStudentPlanInput
    group?: GroupCreateNestedOneWithoutStudentPlanInput
    course?: CourseCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateWithoutCategoryInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanCreateOrConnectWithoutCategoryInput = {
    where: StudentPlanWhereUniqueInput
    create: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput>
  }

  export type StudentPlanCreateManyCategoryInputEnvelope = {
    data: StudentPlanCreateManyCategoryInput | StudentPlanCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MajorUpsertWithoutCategoryInput = {
    update: XOR<MajorUpdateWithoutCategoryInput, MajorUncheckedUpdateWithoutCategoryInput>
    create: XOR<MajorCreateWithoutCategoryInput, MajorUncheckedCreateWithoutCategoryInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutCategoryInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutCategoryInput, MajorUncheckedUpdateWithoutCategoryInput>
  }

  export type MajorUpdateWithoutCategoryInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    course?: CourseUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    course?: CourseUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type GroupUpsertWithWhereUniqueWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutCategoryInput, GroupUncheckedUpdateWithoutCategoryInput>
    create: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutCategoryInput, GroupUncheckedUpdateWithoutCategoryInput>
  }

  export type GroupUpdateManyWithWhereWithoutCategoryInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutCategoryInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: IntFilter<"Group"> | number
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
  }

  export type StudentPlanUpsertWithWhereUniqueWithoutCategoryInput = {
    where: StudentPlanWhereUniqueInput
    update: XOR<StudentPlanUpdateWithoutCategoryInput, StudentPlanUncheckedUpdateWithoutCategoryInput>
    create: XOR<StudentPlanCreateWithoutCategoryInput, StudentPlanUncheckedCreateWithoutCategoryInput>
  }

  export type StudentPlanUpdateWithWhereUniqueWithoutCategoryInput = {
    where: StudentPlanWhereUniqueInput
    data: XOR<StudentPlanUpdateWithoutCategoryInput, StudentPlanUncheckedUpdateWithoutCategoryInput>
  }

  export type StudentPlanUpdateManyWithWhereWithoutCategoryInput = {
    where: StudentPlanScalarWhereInput
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutGroupInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoryInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutGroupInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutGroupInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutGroupInput, CategoryUncheckedCreateWithoutGroupInput>
  }

  export type StudentPlanCreateWithoutGroupInput = {
    studentPlanName: string
    studentPlanYear: string
    categoryName?: string | null
    groupName?: string | null
    courseName?: string | null
    student?: StudentInfoCreateNestedOneWithoutStudentPlanInput
    category?: CategoryCreateNestedOneWithoutStudentPlanInput
    course?: CourseCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateWithoutGroupInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanCreateOrConnectWithoutGroupInput = {
    where: StudentPlanWhereUniqueInput
    create: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput>
  }

  export type StudentPlanCreateManyGroupInputEnvelope = {
    data: StudentPlanCreateManyGroupInput | StudentPlanCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutGroupInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCourseInput
    studentPlan?: StudentPlanCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutGroupInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutGroupInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput>
  }

  export type CourseCreateManyGroupInputEnvelope = {
    data: CourseCreateManyGroupInput | CourseCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutGroupInput = {
    update: XOR<CategoryUpdateWithoutGroupInput, CategoryUncheckedUpdateWithoutGroupInput>
    create: XOR<CategoryCreateWithoutGroupInput, CategoryUncheckedCreateWithoutGroupInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutGroupInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutGroupInput, CategoryUncheckedUpdateWithoutGroupInput>
  }

  export type CategoryUpdateWithoutGroupInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoryNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type StudentPlanUpsertWithWhereUniqueWithoutGroupInput = {
    where: StudentPlanWhereUniqueInput
    update: XOR<StudentPlanUpdateWithoutGroupInput, StudentPlanUncheckedUpdateWithoutGroupInput>
    create: XOR<StudentPlanCreateWithoutGroupInput, StudentPlanUncheckedCreateWithoutGroupInput>
  }

  export type StudentPlanUpdateWithWhereUniqueWithoutGroupInput = {
    where: StudentPlanWhereUniqueInput
    data: XOR<StudentPlanUpdateWithoutGroupInput, StudentPlanUncheckedUpdateWithoutGroupInput>
  }

  export type StudentPlanUpdateManyWithWhereWithoutGroupInput = {
    where: StudentPlanScalarWhereInput
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyWithoutGroupInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutGroupInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutGroupInput, CourseUncheckedUpdateWithoutGroupInput>
    create: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutGroupInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutGroupInput, CourseUncheckedUpdateWithoutGroupInput>
  }

  export type CourseUpdateManyWithWhereWithoutGroupInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutGroupInput>
  }

  export type MajorCreateWithoutCourseInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    category?: CategoryCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateWithoutCourseInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    category?: CategoryUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorCreateOrConnectWithoutCourseInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutCourseInput, MajorUncheckedCreateWithoutCourseInput>
  }

  export type GroupCreateWithoutCourseInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupInput
    studentPlan?: StudentPlanCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutCourseInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    studentPlan?: StudentPlanUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutCourseInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutCourseInput, GroupUncheckedCreateWithoutCourseInput>
  }

  export type StudentPlanCreateWithoutCourseInput = {
    studentPlanName: string
    studentPlanYear: string
    categoryName?: string | null
    groupName?: string | null
    courseName?: string | null
    student?: StudentInfoCreateNestedOneWithoutStudentPlanInput
    category?: CategoryCreateNestedOneWithoutStudentPlanInput
    group?: GroupCreateNestedOneWithoutStudentPlanInput
  }

  export type StudentPlanUncheckedCreateWithoutCourseInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseName?: string | null
  }

  export type StudentPlanCreateOrConnectWithoutCourseInput = {
    where: StudentPlanWhereUniqueInput
    create: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput>
  }

  export type StudentPlanCreateManyCourseInputEnvelope = {
    data: StudentPlanCreateManyCourseInput | StudentPlanCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type MajorUpsertWithoutCourseInput = {
    update: XOR<MajorUpdateWithoutCourseInput, MajorUncheckedUpdateWithoutCourseInput>
    create: XOR<MajorCreateWithoutCourseInput, MajorUncheckedCreateWithoutCourseInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutCourseInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutCourseInput, MajorUncheckedUpdateWithoutCourseInput>
  }

  export type MajorUpdateWithoutCourseInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    category?: CategoryUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type GroupUpsertWithoutCourseInput = {
    update: XOR<GroupUpdateWithoutCourseInput, GroupUncheckedUpdateWithoutCourseInput>
    create: XOR<GroupCreateWithoutCourseInput, GroupUncheckedCreateWithoutCourseInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutCourseInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutCourseInput, GroupUncheckedUpdateWithoutCourseInput>
  }

  export type GroupUpdateWithoutCourseInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type StudentPlanUpsertWithWhereUniqueWithoutCourseInput = {
    where: StudentPlanWhereUniqueInput
    update: XOR<StudentPlanUpdateWithoutCourseInput, StudentPlanUncheckedUpdateWithoutCourseInput>
    create: XOR<StudentPlanCreateWithoutCourseInput, StudentPlanUncheckedCreateWithoutCourseInput>
  }

  export type StudentPlanUpdateWithWhereUniqueWithoutCourseInput = {
    where: StudentPlanWhereUniqueInput
    data: XOR<StudentPlanUpdateWithoutCourseInput, StudentPlanUncheckedUpdateWithoutCourseInput>
  }

  export type StudentPlanUpdateManyWithWhereWithoutCourseInput = {
    where: StudentPlanScalarWhereInput
    data: XOR<StudentPlanUpdateManyMutationInput, StudentPlanUncheckedUpdateManyWithoutCourseInput>
  }

  export type StudentPlanCreateManyStudentInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type StudentPlanUpdateWithoutStudentInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
    category?: CategoryUpdateOneWithoutStudentPlanNestedInput
    group?: GroupUpdateOneWithoutStudentPlanNestedInput
    course?: CourseUpdateOneWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanUncheckedUpdateManyWithoutStudentInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyMajorInput = {
    id?: number
    categoryName: string
    categoryUnit: string
  }

  export type CourseCreateManyMajorInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    groupId: number
  }

  export type CategoryUpdateWithoutMajorInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    group?: GroupUpdateManyWithoutCategoryNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    group?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpdateWithoutMajorInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    group?: GroupUpdateOneRequiredWithoutCourseNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    groupId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupCreateManyCategoryInput = {
    id?: number
    groupName: string
    groupUnit: string
  }

  export type StudentPlanCreateManyCategoryInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type GroupUpdateWithoutCategoryInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    studentPlan?: StudentPlanUpdateManyWithoutGroupNestedInput
    course?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutGroupNestedInput
    course?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
  }

  export type StudentPlanUpdateWithoutCategoryInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentInfoUpdateOneWithoutStudentPlanNestedInput
    group?: GroupUpdateOneWithoutStudentPlanNestedInput
    course?: CourseUpdateOneWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanCreateManyGroupInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupName?: string | null
    courseId?: number | null
    courseName?: string | null
  }

  export type CourseCreateManyGroupInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
  }

  export type StudentPlanUpdateWithoutGroupInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentInfoUpdateOneWithoutStudentPlanNestedInput
    category?: CategoryUpdateOneWithoutStudentPlanNestedInput
    course?: CourseUpdateOneWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseId?: NullableIntFieldUpdateOperationsInput | number | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseUpdateWithoutGroupInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCourseNestedInput
    studentPlan?: StudentPlanUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    studentPlan?: StudentPlanUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
  }

  export type StudentPlanCreateManyCourseInput = {
    id?: number
    studentPlanName: string
    studentPlanYear: string
    studentsId?: number | null
    categoryId?: number | null
    categoryName?: string | null
    groupId?: number | null
    groupName?: string | null
    courseName?: string | null
  }

  export type StudentPlanUpdateWithoutCourseInput = {
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
    student?: StudentInfoUpdateOneWithoutStudentPlanNestedInput
    category?: CategoryUpdateOneWithoutStudentPlanNestedInput
    group?: GroupUpdateOneWithoutStudentPlanNestedInput
  }

  export type StudentPlanUncheckedUpdateWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentPlanUncheckedUpdateManyWithoutCourseInput = {
    id?: IntFieldUpdateOperationsInput | number
    studentPlanName?: StringFieldUpdateOperationsInput | string
    studentPlanYear?: StringFieldUpdateOperationsInput | string
    studentsId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    categoryName?: NullableStringFieldUpdateOperationsInput | string | null
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
    groupName?: NullableStringFieldUpdateOperationsInput | string | null
    courseName?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use StudentInfoCountOutputTypeDefaultArgs instead
     */
    export type StudentInfoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentInfoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MajorCountOutputTypeDefaultArgs instead
     */
    export type MajorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MajorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseCountOutputTypeDefaultArgs instead
     */
    export type CourseCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentInfoDefaultArgs instead
     */
    export type StudentInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentInfoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentPlanDefaultArgs instead
     */
    export type StudentPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MajorDefaultArgs instead
     */
    export type MajorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MajorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}
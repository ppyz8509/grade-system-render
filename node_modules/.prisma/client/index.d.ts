
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Admin
 * 
 */
export type Admin = $Result.DefaultSelection<Prisma.$AdminPayload>
/**
 * Model COURSE_INSTRUCTOR
 * 
 */
export type COURSE_INSTRUCTOR = $Result.DefaultSelection<Prisma.$COURSE_INSTRUCTORPayload>
/**
 * Model Student
 * 
 */
export type Student = $Result.DefaultSelection<Prisma.$StudentPayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Classroom
 * 
 */
export type Classroom = $Result.DefaultSelection<Prisma.$ClassroomPayload>
/**
 * Model Advisor
 * 
 */
export type Advisor = $Result.DefaultSelection<Prisma.$AdvisorPayload>
/**
 * Model Major
 * 
 */
export type Major = $Result.DefaultSelection<Prisma.$MajorPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Group
 * 
 */
export type Group = $Result.DefaultSelection<Prisma.$GroupPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  STUDENT: 'STUDENT',
  ADVISOR: 'ADVISOR',
  COURSE_INSTRUCTOR: 'COURSE_INSTRUCTOR'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Admins
 * const admins = await prisma.admin.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Admins
   * const admins = await prisma.admin.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.admin`: Exposes CRUD operations for the **Admin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Admins
    * const admins = await prisma.admin.findMany()
    * ```
    */
  get admin(): Prisma.AdminDelegate<ExtArgs>;

  /**
   * `prisma.cOURSE_INSTRUCTOR`: Exposes CRUD operations for the **COURSE_INSTRUCTOR** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more COURSE_INSTRUCTORS
    * const cOURSE_INSTRUCTORS = await prisma.cOURSE_INSTRUCTOR.findMany()
    * ```
    */
  get cOURSE_INSTRUCTOR(): Prisma.COURSE_INSTRUCTORDelegate<ExtArgs>;

  /**
   * `prisma.student`: Exposes CRUD operations for the **Student** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Students
    * const students = await prisma.student.findMany()
    * ```
    */
  get student(): Prisma.StudentDelegate<ExtArgs>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs>;

  /**
   * `prisma.classroom`: Exposes CRUD operations for the **Classroom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classrooms
    * const classrooms = await prisma.classroom.findMany()
    * ```
    */
  get classroom(): Prisma.ClassroomDelegate<ExtArgs>;

  /**
   * `prisma.advisor`: Exposes CRUD operations for the **Advisor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Advisors
    * const advisors = await prisma.advisor.findMany()
    * ```
    */
  get advisor(): Prisma.AdvisorDelegate<ExtArgs>;

  /**
   * `prisma.major`: Exposes CRUD operations for the **Major** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Majors
    * const majors = await prisma.major.findMany()
    * ```
    */
  get major(): Prisma.MajorDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.group`: Exposes CRUD operations for the **Group** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Groups
    * const groups = await prisma.group.findMany()
    * ```
    */
  get group(): Prisma.GroupDelegate<ExtArgs>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Admin: 'Admin',
    COURSE_INSTRUCTOR: 'COURSE_INSTRUCTOR',
    Student: 'Student',
    Teacher: 'Teacher',
    Classroom: 'Classroom',
    Advisor: 'Advisor',
    Major: 'Major',
    Category: 'Category',
    Group: 'Group',
    Course: 'Course'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'admin' | 'cOURSE_INSTRUCTOR' | 'student' | 'teacher' | 'classroom' | 'advisor' | 'major' | 'category' | 'group' | 'course'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Admin: {
        payload: Prisma.$AdminPayload<ExtArgs>
        fields: Prisma.AdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdminFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdminFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findFirst: {
            args: Prisma.AdminFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdminFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          findMany: {
            args: Prisma.AdminFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          create: {
            args: Prisma.AdminCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          createMany: {
            args: Prisma.AdminCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdminCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>[]
          }
          delete: {
            args: Prisma.AdminDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          update: {
            args: Prisma.AdminUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          deleteMany: {
            args: Prisma.AdminDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdminUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdminUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdminPayload>
          }
          aggregate: {
            args: Prisma.AdminAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdmin>
          }
          groupBy: {
            args: Prisma.AdminGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdminCountArgs<ExtArgs>,
            result: $Utils.Optional<AdminCountAggregateOutputType> | number
          }
        }
      }
      COURSE_INSTRUCTOR: {
        payload: Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>
        fields: Prisma.COURSE_INSTRUCTORFieldRefs
        operations: {
          findUnique: {
            args: Prisma.COURSE_INSTRUCTORFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.COURSE_INSTRUCTORFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          findFirst: {
            args: Prisma.COURSE_INSTRUCTORFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.COURSE_INSTRUCTORFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          findMany: {
            args: Prisma.COURSE_INSTRUCTORFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>[]
          }
          create: {
            args: Prisma.COURSE_INSTRUCTORCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          createMany: {
            args: Prisma.COURSE_INSTRUCTORCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.COURSE_INSTRUCTORCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>[]
          }
          delete: {
            args: Prisma.COURSE_INSTRUCTORDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          update: {
            args: Prisma.COURSE_INSTRUCTORUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          deleteMany: {
            args: Prisma.COURSE_INSTRUCTORDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.COURSE_INSTRUCTORUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.COURSE_INSTRUCTORUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$COURSE_INSTRUCTORPayload>
          }
          aggregate: {
            args: Prisma.COURSE_INSTRUCTORAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCOURSE_INSTRUCTOR>
          }
          groupBy: {
            args: Prisma.COURSE_INSTRUCTORGroupByArgs<ExtArgs>,
            result: $Utils.Optional<COURSE_INSTRUCTORGroupByOutputType>[]
          }
          count: {
            args: Prisma.COURSE_INSTRUCTORCountArgs<ExtArgs>,
            result: $Utils.Optional<COURSE_INSTRUCTORCountAggregateOutputType> | number
          }
        }
      }
      Student: {
        payload: Prisma.$StudentPayload<ExtArgs>
        fields: Prisma.StudentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StudentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StudentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findFirst: {
            args: Prisma.StudentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StudentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          findMany: {
            args: Prisma.StudentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          create: {
            args: Prisma.StudentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          createMany: {
            args: Prisma.StudentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StudentCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>[]
          }
          delete: {
            args: Prisma.StudentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          update: {
            args: Prisma.StudentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          deleteMany: {
            args: Prisma.StudentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.StudentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.StudentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$StudentPayload>
          }
          aggregate: {
            args: Prisma.StudentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateStudent>
          }
          groupBy: {
            args: Prisma.StudentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<StudentGroupByOutputType>[]
          }
          count: {
            args: Prisma.StudentCountArgs<ExtArgs>,
            result: $Utils.Optional<StudentCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>,
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Classroom: {
        payload: Prisma.$ClassroomPayload<ExtArgs>
        fields: Prisma.ClassroomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassroomFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassroomFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          findFirst: {
            args: Prisma.ClassroomFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassroomFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          findMany: {
            args: Prisma.ClassroomFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>[]
          }
          create: {
            args: Prisma.ClassroomCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          createMany: {
            args: Prisma.ClassroomCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassroomCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>[]
          }
          delete: {
            args: Prisma.ClassroomDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          update: {
            args: Prisma.ClassroomUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          deleteMany: {
            args: Prisma.ClassroomDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ClassroomUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ClassroomUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ClassroomPayload>
          }
          aggregate: {
            args: Prisma.ClassroomAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateClassroom>
          }
          groupBy: {
            args: Prisma.ClassroomGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ClassroomGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassroomCountArgs<ExtArgs>,
            result: $Utils.Optional<ClassroomCountAggregateOutputType> | number
          }
        }
      }
      Advisor: {
        payload: Prisma.$AdvisorPayload<ExtArgs>
        fields: Prisma.AdvisorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdvisorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdvisorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          findFirst: {
            args: Prisma.AdvisorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdvisorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          findMany: {
            args: Prisma.AdvisorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>[]
          }
          create: {
            args: Prisma.AdvisorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          createMany: {
            args: Prisma.AdvisorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdvisorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>[]
          }
          delete: {
            args: Prisma.AdvisorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          update: {
            args: Prisma.AdvisorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          deleteMany: {
            args: Prisma.AdvisorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdvisorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdvisorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdvisorPayload>
          }
          aggregate: {
            args: Prisma.AdvisorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdvisor>
          }
          groupBy: {
            args: Prisma.AdvisorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdvisorGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdvisorCountArgs<ExtArgs>,
            result: $Utils.Optional<AdvisorCountAggregateOutputType> | number
          }
        }
      }
      Major: {
        payload: Prisma.$MajorPayload<ExtArgs>
        fields: Prisma.MajorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MajorFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MajorFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findFirst: {
            args: Prisma.MajorFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MajorFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          findMany: {
            args: Prisma.MajorFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          create: {
            args: Prisma.MajorCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          createMany: {
            args: Prisma.MajorCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MajorCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>[]
          }
          delete: {
            args: Prisma.MajorDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          update: {
            args: Prisma.MajorUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          deleteMany: {
            args: Prisma.MajorDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MajorUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MajorUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MajorPayload>
          }
          aggregate: {
            args: Prisma.MajorAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMajor>
          }
          groupBy: {
            args: Prisma.MajorGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MajorGroupByOutputType>[]
          }
          count: {
            args: Prisma.MajorCountArgs<ExtArgs>,
            result: $Utils.Optional<MajorCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Group: {
        payload: Prisma.$GroupPayload<ExtArgs>
        fields: Prisma.GroupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GroupFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GroupFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findFirst: {
            args: Prisma.GroupFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GroupFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          findMany: {
            args: Prisma.GroupFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          create: {
            args: Prisma.GroupCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          createMany: {
            args: Prisma.GroupCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GroupCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>[]
          }
          delete: {
            args: Prisma.GroupDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          update: {
            args: Prisma.GroupUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          deleteMany: {
            args: Prisma.GroupDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GroupUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GroupUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$GroupPayload>
          }
          aggregate: {
            args: Prisma.GroupAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGroup>
          }
          groupBy: {
            args: Prisma.GroupGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GroupGroupByOutputType>[]
          }
          count: {
            args: Prisma.GroupCountArgs<ExtArgs>,
            result: $Utils.Optional<GroupCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>,
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    advisorrooms: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    advisorrooms?: boolean | TeacherCountOutputTypeCountAdvisorroomsArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountAdvisorroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisorWhereInput
  }


  /**
   * Count Type ClassroomCountOutputType
   */

  export type ClassroomCountOutputType = {
    teachers: number
    students: number
  }

  export type ClassroomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | ClassroomCountOutputTypeCountTeachersArgs
    students?: boolean | ClassroomCountOutputTypeCountStudentsArgs
  }

  // Custom InputTypes
  /**
   * ClassroomCountOutputType without action
   */
  export type ClassroomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassroomCountOutputType
     */
    select?: ClassroomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassroomCountOutputType without action
   */
  export type ClassroomCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisorWhereInput
  }

  /**
   * ClassroomCountOutputType without action
   */
  export type ClassroomCountOutputTypeCountStudentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
  }


  /**
   * Count Type MajorCountOutputType
   */

  export type MajorCountOutputType = {
    categories: number
    courses: number
  }

  export type MajorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | MajorCountOutputTypeCountCategoriesArgs
    courses?: boolean | MajorCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MajorCountOutputType
     */
    select?: MajorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountCategoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
  }

  /**
   * MajorCountOutputType without action
   */
  export type MajorCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    groups: number
    courses: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    groups?: boolean | CategoryCountOutputTypeCountGroupsArgs
    courses?: boolean | CategoryCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountGroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Count Type GroupCountOutputType
   */

  export type GroupCountOutputType = {
    subgroups: number
    courses: number
  }

  export type GroupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subgroups?: boolean | GroupCountOutputTypeCountSubgroupsArgs
    courses?: boolean | GroupCountOutputTypeCountCoursesArgs
  }

  // Custom InputTypes
  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GroupCountOutputType
     */
    select?: GroupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountSubgroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
  }

  /**
   * GroupCountOutputType without action
   */
  export type GroupCountOutputTypeCountCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Admin
   */

  export type AggregateAdmin = {
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  export type AdminAvgAggregateOutputType = {
    Admin_id: number | null
    A_phone: number | null
  }

  export type AdminSumAggregateOutputType = {
    Admin_id: number | null
    A_phone: number | null
  }

  export type AdminMinAggregateOutputType = {
    Admin_id: number | null
    A_fristname: string | null
    A_lastname: string | null
    A_username: string | null
    A_password: string | null
    role: $Enums.Role | null
    A_phone: number | null
    A_email: string | null
  }

  export type AdminMaxAggregateOutputType = {
    Admin_id: number | null
    A_fristname: string | null
    A_lastname: string | null
    A_username: string | null
    A_password: string | null
    role: $Enums.Role | null
    A_phone: number | null
    A_email: string | null
  }

  export type AdminCountAggregateOutputType = {
    Admin_id: number
    A_fristname: number
    A_lastname: number
    A_username: number
    A_password: number
    role: number
    A_phone: number
    A_email: number
    _all: number
  }


  export type AdminAvgAggregateInputType = {
    Admin_id?: true
    A_phone?: true
  }

  export type AdminSumAggregateInputType = {
    Admin_id?: true
    A_phone?: true
  }

  export type AdminMinAggregateInputType = {
    Admin_id?: true
    A_fristname?: true
    A_lastname?: true
    A_username?: true
    A_password?: true
    role?: true
    A_phone?: true
    A_email?: true
  }

  export type AdminMaxAggregateInputType = {
    Admin_id?: true
    A_fristname?: true
    A_lastname?: true
    A_username?: true
    A_password?: true
    role?: true
    A_phone?: true
    A_email?: true
  }

  export type AdminCountAggregateInputType = {
    Admin_id?: true
    A_fristname?: true
    A_lastname?: true
    A_username?: true
    A_password?: true
    role?: true
    A_phone?: true
    A_email?: true
    _all?: true
  }

  export type AdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admin to aggregate.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Admins
    **/
    _count?: true | AdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdminAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdminSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdminMaxAggregateInputType
  }

  export type GetAdminAggregateType<T extends AdminAggregateArgs> = {
        [P in keyof T & keyof AggregateAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdmin[P]>
      : GetScalarType<T[P], AggregateAdmin[P]>
  }




  export type AdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdminWhereInput
    orderBy?: AdminOrderByWithAggregationInput | AdminOrderByWithAggregationInput[]
    by: AdminScalarFieldEnum[] | AdminScalarFieldEnum
    having?: AdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdminCountAggregateInputType | true
    _avg?: AdminAvgAggregateInputType
    _sum?: AdminSumAggregateInputType
    _min?: AdminMinAggregateInputType
    _max?: AdminMaxAggregateInputType
  }

  export type AdminGroupByOutputType = {
    Admin_id: number
    A_fristname: string
    A_lastname: string
    A_username: string
    A_password: string
    role: $Enums.Role
    A_phone: number | null
    A_email: string | null
    _count: AdminCountAggregateOutputType | null
    _avg: AdminAvgAggregateOutputType | null
    _sum: AdminSumAggregateOutputType | null
    _min: AdminMinAggregateOutputType | null
    _max: AdminMaxAggregateOutputType | null
  }

  type GetAdminGroupByPayload<T extends AdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdminGroupByOutputType[P]>
            : GetScalarType<T[P], AdminGroupByOutputType[P]>
        }
      >
    >


  export type AdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Admin_id?: boolean
    A_fristname?: boolean
    A_lastname?: boolean
    A_username?: boolean
    A_password?: boolean
    role?: boolean
    A_phone?: boolean
    A_email?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Admin_id?: boolean
    A_fristname?: boolean
    A_lastname?: boolean
    A_username?: boolean
    A_password?: boolean
    role?: boolean
    A_phone?: boolean
    A_email?: boolean
  }, ExtArgs["result"]["admin"]>

  export type AdminSelectScalar = {
    Admin_id?: boolean
    A_fristname?: boolean
    A_lastname?: boolean
    A_username?: boolean
    A_password?: boolean
    role?: boolean
    A_phone?: boolean
    A_email?: boolean
  }


  export type $AdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Admin"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      Admin_id: number
      A_fristname: string
      A_lastname: string
      A_username: string
      A_password: string
      role: $Enums.Role
      A_phone: number | null
      A_email: string | null
    }, ExtArgs["result"]["admin"]>
    composites: {}
  }

  type AdminGetPayload<S extends boolean | null | undefined | AdminDefaultArgs> = $Result.GetResult<Prisma.$AdminPayload, S>

  type AdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdminFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdminCountAggregateInputType | true
    }

  export interface AdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Admin'], meta: { name: 'Admin' } }
    /**
     * Find zero or one Admin that matches the filter.
     * @param {AdminFindUniqueArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdminFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdminFindUniqueArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Admin that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdminFindUniqueOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdminFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Admin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdminFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Admin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindFirstOrThrowArgs} args - Arguments to find a Admin
     * @example
     * // Get one Admin
     * const admin = await prisma.admin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdminFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Admins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Admins
     * const admins = await prisma.admin.findMany()
     * 
     * // Get first 10 Admins
     * const admins = await prisma.admin.findMany({ take: 10 })
     * 
     * // Only select the `Admin_id`
     * const adminWithAdmin_idOnly = await prisma.admin.findMany({ select: { Admin_id: true } })
     * 
    **/
    findMany<T extends AdminFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Admin.
     * @param {AdminCreateArgs} args - Arguments to create a Admin.
     * @example
     * // Create one Admin
     * const Admin = await prisma.admin.create({
     *   data: {
     *     // ... data to create a Admin
     *   }
     * })
     * 
    **/
    create<T extends AdminCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminCreateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Admins.
     * @param {AdminCreateManyArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdminCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Admins and returns the data saved in the database.
     * @param {AdminCreateManyAndReturnArgs} args - Arguments to create many Admins.
     * @example
     * // Create many Admins
     * const admin = await prisma.admin.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Admins and only return the `Admin_id`
     * const adminWithAdmin_idOnly = await prisma.admin.createManyAndReturn({ 
     *   select: { Admin_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AdminCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Admin.
     * @param {AdminDeleteArgs} args - Arguments to delete one Admin.
     * @example
     * // Delete one Admin
     * const Admin = await prisma.admin.delete({
     *   where: {
     *     // ... filter to delete one Admin
     *   }
     * })
     * 
    **/
    delete<T extends AdminDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdminDeleteArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Admin.
     * @param {AdminUpdateArgs} args - Arguments to update one Admin.
     * @example
     * // Update one Admin
     * const admin = await prisma.admin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdminUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Admins.
     * @param {AdminDeleteManyArgs} args - Arguments to filter Admins to delete.
     * @example
     * // Delete a few Admins
     * const { count } = await prisma.admin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdminDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdminDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Admins
     * const admin = await prisma.admin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdminUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Admin.
     * @param {AdminUpsertArgs} args - Arguments to update or create a Admin.
     * @example
     * // Update or create a Admin
     * const admin = await prisma.admin.upsert({
     *   create: {
     *     // ... data to create a Admin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Admin we want to update
     *   }
     * })
    **/
    upsert<T extends AdminUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdminUpsertArgs<ExtArgs>>
    ): Prisma__AdminClient<$Result.GetResult<Prisma.$AdminPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Admins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminCountArgs} args - Arguments to filter Admins to count.
     * @example
     * // Count the number of Admins
     * const count = await prisma.admin.count({
     *   where: {
     *     // ... the filter for the Admins we want to count
     *   }
     * })
    **/
    count<T extends AdminCountArgs>(
      args?: Subset<T, AdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdminAggregateArgs>(args: Subset<T, AdminAggregateArgs>): Prisma.PrismaPromise<GetAdminAggregateType<T>>

    /**
     * Group by Admin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdminGroupByArgs['orderBy'] }
        : { orderBy?: AdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Admin model
   */
  readonly fields: AdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Admin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Admin model
   */ 
  interface AdminFieldRefs {
    readonly Admin_id: FieldRef<"Admin", 'Int'>
    readonly A_fristname: FieldRef<"Admin", 'String'>
    readonly A_lastname: FieldRef<"Admin", 'String'>
    readonly A_username: FieldRef<"Admin", 'String'>
    readonly A_password: FieldRef<"Admin", 'String'>
    readonly role: FieldRef<"Admin", 'Role'>
    readonly A_phone: FieldRef<"Admin", 'Int'>
    readonly A_email: FieldRef<"Admin", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Admin findUnique
   */
  export type AdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findUniqueOrThrow
   */
  export type AdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin findFirst
   */
  export type AdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findFirstOrThrow
   */
  export type AdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admin to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Admins.
     */
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin findMany
   */
  export type AdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter, which Admins to fetch.
     */
    where?: AdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Admins to fetch.
     */
    orderBy?: AdminOrderByWithRelationInput | AdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Admins.
     */
    cursor?: AdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Admins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Admins.
     */
    skip?: number
    distinct?: AdminScalarFieldEnum | AdminScalarFieldEnum[]
  }

  /**
   * Admin create
   */
  export type AdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to create a Admin.
     */
    data: XOR<AdminCreateInput, AdminUncheckedCreateInput>
  }

  /**
   * Admin createMany
   */
  export type AdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin createManyAndReturn
   */
  export type AdminCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Admins.
     */
    data: AdminCreateManyInput | AdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Admin update
   */
  export type AdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The data needed to update a Admin.
     */
    data: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
    /**
     * Choose, which Admin to update.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin updateMany
   */
  export type AdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Admins.
     */
    data: XOR<AdminUpdateManyMutationInput, AdminUncheckedUpdateManyInput>
    /**
     * Filter which Admins to update
     */
    where?: AdminWhereInput
  }

  /**
   * Admin upsert
   */
  export type AdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * The filter to search for the Admin to update in case it exists.
     */
    where: AdminWhereUniqueInput
    /**
     * In case the Admin found by the `where` argument doesn't exist, create a new Admin with this data.
     */
    create: XOR<AdminCreateInput, AdminUncheckedCreateInput>
    /**
     * In case the Admin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdminUpdateInput, AdminUncheckedUpdateInput>
  }

  /**
   * Admin delete
   */
  export type AdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
    /**
     * Filter which Admin to delete.
     */
    where: AdminWhereUniqueInput
  }

  /**
   * Admin deleteMany
   */
  export type AdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Admins to delete
     */
    where?: AdminWhereInput
  }

  /**
   * Admin without action
   */
  export type AdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Admin
     */
    select?: AdminSelect<ExtArgs> | null
  }


  /**
   * Model COURSE_INSTRUCTOR
   */

  export type AggregateCOURSE_INSTRUCTOR = {
    _count: COURSE_INSTRUCTORCountAggregateOutputType | null
    _avg: COURSE_INSTRUCTORAvgAggregateOutputType | null
    _sum: COURSE_INSTRUCTORSumAggregateOutputType | null
    _min: COURSE_INSTRUCTORMinAggregateOutputType | null
    _max: COURSE_INSTRUCTORMaxAggregateOutputType | null
  }

  export type COURSE_INSTRUCTORAvgAggregateOutputType = {
    C_id: number | null
    C_phone: number | null
  }

  export type COURSE_INSTRUCTORSumAggregateOutputType = {
    C_id: number | null
    C_phone: number | null
  }

  export type COURSE_INSTRUCTORMinAggregateOutputType = {
    C_id: number | null
    C_fristname: string | null
    C_lastname: string | null
    C_username: string | null
    C_password: string | null
    role: $Enums.Role | null
    C_phone: number | null
    C_email: string | null
  }

  export type COURSE_INSTRUCTORMaxAggregateOutputType = {
    C_id: number | null
    C_fristname: string | null
    C_lastname: string | null
    C_username: string | null
    C_password: string | null
    role: $Enums.Role | null
    C_phone: number | null
    C_email: string | null
  }

  export type COURSE_INSTRUCTORCountAggregateOutputType = {
    C_id: number
    C_fristname: number
    C_lastname: number
    C_username: number
    C_password: number
    role: number
    C_phone: number
    C_email: number
    _all: number
  }


  export type COURSE_INSTRUCTORAvgAggregateInputType = {
    C_id?: true
    C_phone?: true
  }

  export type COURSE_INSTRUCTORSumAggregateInputType = {
    C_id?: true
    C_phone?: true
  }

  export type COURSE_INSTRUCTORMinAggregateInputType = {
    C_id?: true
    C_fristname?: true
    C_lastname?: true
    C_username?: true
    C_password?: true
    role?: true
    C_phone?: true
    C_email?: true
  }

  export type COURSE_INSTRUCTORMaxAggregateInputType = {
    C_id?: true
    C_fristname?: true
    C_lastname?: true
    C_username?: true
    C_password?: true
    role?: true
    C_phone?: true
    C_email?: true
  }

  export type COURSE_INSTRUCTORCountAggregateInputType = {
    C_id?: true
    C_fristname?: true
    C_lastname?: true
    C_username?: true
    C_password?: true
    role?: true
    C_phone?: true
    C_email?: true
    _all?: true
  }

  export type COURSE_INSTRUCTORAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which COURSE_INSTRUCTOR to aggregate.
     */
    where?: COURSE_INSTRUCTORWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of COURSE_INSTRUCTORS to fetch.
     */
    orderBy?: COURSE_INSTRUCTOROrderByWithRelationInput | COURSE_INSTRUCTOROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: COURSE_INSTRUCTORWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` COURSE_INSTRUCTORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` COURSE_INSTRUCTORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned COURSE_INSTRUCTORS
    **/
    _count?: true | COURSE_INSTRUCTORCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: COURSE_INSTRUCTORAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: COURSE_INSTRUCTORSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: COURSE_INSTRUCTORMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: COURSE_INSTRUCTORMaxAggregateInputType
  }

  export type GetCOURSE_INSTRUCTORAggregateType<T extends COURSE_INSTRUCTORAggregateArgs> = {
        [P in keyof T & keyof AggregateCOURSE_INSTRUCTOR]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCOURSE_INSTRUCTOR[P]>
      : GetScalarType<T[P], AggregateCOURSE_INSTRUCTOR[P]>
  }




  export type COURSE_INSTRUCTORGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: COURSE_INSTRUCTORWhereInput
    orderBy?: COURSE_INSTRUCTOROrderByWithAggregationInput | COURSE_INSTRUCTOROrderByWithAggregationInput[]
    by: COURSE_INSTRUCTORScalarFieldEnum[] | COURSE_INSTRUCTORScalarFieldEnum
    having?: COURSE_INSTRUCTORScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: COURSE_INSTRUCTORCountAggregateInputType | true
    _avg?: COURSE_INSTRUCTORAvgAggregateInputType
    _sum?: COURSE_INSTRUCTORSumAggregateInputType
    _min?: COURSE_INSTRUCTORMinAggregateInputType
    _max?: COURSE_INSTRUCTORMaxAggregateInputType
  }

  export type COURSE_INSTRUCTORGroupByOutputType = {
    C_id: number
    C_fristname: string
    C_lastname: string
    C_username: string
    C_password: string
    role: $Enums.Role
    C_phone: number | null
    C_email: string | null
    _count: COURSE_INSTRUCTORCountAggregateOutputType | null
    _avg: COURSE_INSTRUCTORAvgAggregateOutputType | null
    _sum: COURSE_INSTRUCTORSumAggregateOutputType | null
    _min: COURSE_INSTRUCTORMinAggregateOutputType | null
    _max: COURSE_INSTRUCTORMaxAggregateOutputType | null
  }

  type GetCOURSE_INSTRUCTORGroupByPayload<T extends COURSE_INSTRUCTORGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<COURSE_INSTRUCTORGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof COURSE_INSTRUCTORGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], COURSE_INSTRUCTORGroupByOutputType[P]>
            : GetScalarType<T[P], COURSE_INSTRUCTORGroupByOutputType[P]>
        }
      >
    >


  export type COURSE_INSTRUCTORSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    C_id?: boolean
    C_fristname?: boolean
    C_lastname?: boolean
    C_username?: boolean
    C_password?: boolean
    role?: boolean
    C_phone?: boolean
    C_email?: boolean
  }, ExtArgs["result"]["cOURSE_INSTRUCTOR"]>

  export type COURSE_INSTRUCTORSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    C_id?: boolean
    C_fristname?: boolean
    C_lastname?: boolean
    C_username?: boolean
    C_password?: boolean
    role?: boolean
    C_phone?: boolean
    C_email?: boolean
  }, ExtArgs["result"]["cOURSE_INSTRUCTOR"]>

  export type COURSE_INSTRUCTORSelectScalar = {
    C_id?: boolean
    C_fristname?: boolean
    C_lastname?: boolean
    C_username?: boolean
    C_password?: boolean
    role?: boolean
    C_phone?: boolean
    C_email?: boolean
  }


  export type $COURSE_INSTRUCTORPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "COURSE_INSTRUCTOR"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      C_id: number
      C_fristname: string
      C_lastname: string
      C_username: string
      C_password: string
      role: $Enums.Role
      C_phone: number | null
      C_email: string | null
    }, ExtArgs["result"]["cOURSE_INSTRUCTOR"]>
    composites: {}
  }

  type COURSE_INSTRUCTORGetPayload<S extends boolean | null | undefined | COURSE_INSTRUCTORDefaultArgs> = $Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload, S>

  type COURSE_INSTRUCTORCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<COURSE_INSTRUCTORFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: COURSE_INSTRUCTORCountAggregateInputType | true
    }

  export interface COURSE_INSTRUCTORDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['COURSE_INSTRUCTOR'], meta: { name: 'COURSE_INSTRUCTOR' } }
    /**
     * Find zero or one COURSE_INSTRUCTOR that matches the filter.
     * @param {COURSE_INSTRUCTORFindUniqueArgs} args - Arguments to find a COURSE_INSTRUCTOR
     * @example
     * // Get one COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends COURSE_INSTRUCTORFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORFindUniqueArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one COURSE_INSTRUCTOR that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {COURSE_INSTRUCTORFindUniqueOrThrowArgs} args - Arguments to find a COURSE_INSTRUCTOR
     * @example
     * // Get one COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends COURSE_INSTRUCTORFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first COURSE_INSTRUCTOR that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORFindFirstArgs} args - Arguments to find a COURSE_INSTRUCTOR
     * @example
     * // Get one COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends COURSE_INSTRUCTORFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORFindFirstArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first COURSE_INSTRUCTOR that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORFindFirstOrThrowArgs} args - Arguments to find a COURSE_INSTRUCTOR
     * @example
     * // Get one COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends COURSE_INSTRUCTORFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more COURSE_INSTRUCTORS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all COURSE_INSTRUCTORS
     * const cOURSE_INSTRUCTORS = await prisma.cOURSE_INSTRUCTOR.findMany()
     * 
     * // Get first 10 COURSE_INSTRUCTORS
     * const cOURSE_INSTRUCTORS = await prisma.cOURSE_INSTRUCTOR.findMany({ take: 10 })
     * 
     * // Only select the `C_id`
     * const cOURSE_INSTRUCTORWithC_idOnly = await prisma.cOURSE_INSTRUCTOR.findMany({ select: { C_id: true } })
     * 
    **/
    findMany<T extends COURSE_INSTRUCTORFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a COURSE_INSTRUCTOR.
     * @param {COURSE_INSTRUCTORCreateArgs} args - Arguments to create a COURSE_INSTRUCTOR.
     * @example
     * // Create one COURSE_INSTRUCTOR
     * const COURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.create({
     *   data: {
     *     // ... data to create a COURSE_INSTRUCTOR
     *   }
     * })
     * 
    **/
    create<T extends COURSE_INSTRUCTORCreateArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORCreateArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many COURSE_INSTRUCTORS.
     * @param {COURSE_INSTRUCTORCreateManyArgs} args - Arguments to create many COURSE_INSTRUCTORS.
     * @example
     * // Create many COURSE_INSTRUCTORS
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends COURSE_INSTRUCTORCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many COURSE_INSTRUCTORS and returns the data saved in the database.
     * @param {COURSE_INSTRUCTORCreateManyAndReturnArgs} args - Arguments to create many COURSE_INSTRUCTORS.
     * @example
     * // Create many COURSE_INSTRUCTORS
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many COURSE_INSTRUCTORS and only return the `C_id`
     * const cOURSE_INSTRUCTORWithC_idOnly = await prisma.cOURSE_INSTRUCTOR.createManyAndReturn({ 
     *   select: { C_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends COURSE_INSTRUCTORCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a COURSE_INSTRUCTOR.
     * @param {COURSE_INSTRUCTORDeleteArgs} args - Arguments to delete one COURSE_INSTRUCTOR.
     * @example
     * // Delete one COURSE_INSTRUCTOR
     * const COURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.delete({
     *   where: {
     *     // ... filter to delete one COURSE_INSTRUCTOR
     *   }
     * })
     * 
    **/
    delete<T extends COURSE_INSTRUCTORDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORDeleteArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one COURSE_INSTRUCTOR.
     * @param {COURSE_INSTRUCTORUpdateArgs} args - Arguments to update one COURSE_INSTRUCTOR.
     * @example
     * // Update one COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends COURSE_INSTRUCTORUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORUpdateArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more COURSE_INSTRUCTORS.
     * @param {COURSE_INSTRUCTORDeleteManyArgs} args - Arguments to filter COURSE_INSTRUCTORS to delete.
     * @example
     * // Delete a few COURSE_INSTRUCTORS
     * const { count } = await prisma.cOURSE_INSTRUCTOR.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends COURSE_INSTRUCTORDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, COURSE_INSTRUCTORDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more COURSE_INSTRUCTORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many COURSE_INSTRUCTORS
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends COURSE_INSTRUCTORUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one COURSE_INSTRUCTOR.
     * @param {COURSE_INSTRUCTORUpsertArgs} args - Arguments to update or create a COURSE_INSTRUCTOR.
     * @example
     * // Update or create a COURSE_INSTRUCTOR
     * const cOURSE_INSTRUCTOR = await prisma.cOURSE_INSTRUCTOR.upsert({
     *   create: {
     *     // ... data to create a COURSE_INSTRUCTOR
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the COURSE_INSTRUCTOR we want to update
     *   }
     * })
    **/
    upsert<T extends COURSE_INSTRUCTORUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, COURSE_INSTRUCTORUpsertArgs<ExtArgs>>
    ): Prisma__COURSE_INSTRUCTORClient<$Result.GetResult<Prisma.$COURSE_INSTRUCTORPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of COURSE_INSTRUCTORS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORCountArgs} args - Arguments to filter COURSE_INSTRUCTORS to count.
     * @example
     * // Count the number of COURSE_INSTRUCTORS
     * const count = await prisma.cOURSE_INSTRUCTOR.count({
     *   where: {
     *     // ... the filter for the COURSE_INSTRUCTORS we want to count
     *   }
     * })
    **/
    count<T extends COURSE_INSTRUCTORCountArgs>(
      args?: Subset<T, COURSE_INSTRUCTORCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], COURSE_INSTRUCTORCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a COURSE_INSTRUCTOR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends COURSE_INSTRUCTORAggregateArgs>(args: Subset<T, COURSE_INSTRUCTORAggregateArgs>): Prisma.PrismaPromise<GetCOURSE_INSTRUCTORAggregateType<T>>

    /**
     * Group by COURSE_INSTRUCTOR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {COURSE_INSTRUCTORGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends COURSE_INSTRUCTORGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: COURSE_INSTRUCTORGroupByArgs['orderBy'] }
        : { orderBy?: COURSE_INSTRUCTORGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, COURSE_INSTRUCTORGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCOURSE_INSTRUCTORGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the COURSE_INSTRUCTOR model
   */
  readonly fields: COURSE_INSTRUCTORFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for COURSE_INSTRUCTOR.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__COURSE_INSTRUCTORClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the COURSE_INSTRUCTOR model
   */ 
  interface COURSE_INSTRUCTORFieldRefs {
    readonly C_id: FieldRef<"COURSE_INSTRUCTOR", 'Int'>
    readonly C_fristname: FieldRef<"COURSE_INSTRUCTOR", 'String'>
    readonly C_lastname: FieldRef<"COURSE_INSTRUCTOR", 'String'>
    readonly C_username: FieldRef<"COURSE_INSTRUCTOR", 'String'>
    readonly C_password: FieldRef<"COURSE_INSTRUCTOR", 'String'>
    readonly role: FieldRef<"COURSE_INSTRUCTOR", 'Role'>
    readonly C_phone: FieldRef<"COURSE_INSTRUCTOR", 'Int'>
    readonly C_email: FieldRef<"COURSE_INSTRUCTOR", 'String'>
  }
    

  // Custom InputTypes
  /**
   * COURSE_INSTRUCTOR findUnique
   */
  export type COURSE_INSTRUCTORFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter, which COURSE_INSTRUCTOR to fetch.
     */
    where: COURSE_INSTRUCTORWhereUniqueInput
  }

  /**
   * COURSE_INSTRUCTOR findUniqueOrThrow
   */
  export type COURSE_INSTRUCTORFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter, which COURSE_INSTRUCTOR to fetch.
     */
    where: COURSE_INSTRUCTORWhereUniqueInput
  }

  /**
   * COURSE_INSTRUCTOR findFirst
   */
  export type COURSE_INSTRUCTORFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter, which COURSE_INSTRUCTOR to fetch.
     */
    where?: COURSE_INSTRUCTORWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of COURSE_INSTRUCTORS to fetch.
     */
    orderBy?: COURSE_INSTRUCTOROrderByWithRelationInput | COURSE_INSTRUCTOROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for COURSE_INSTRUCTORS.
     */
    cursor?: COURSE_INSTRUCTORWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` COURSE_INSTRUCTORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` COURSE_INSTRUCTORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of COURSE_INSTRUCTORS.
     */
    distinct?: COURSE_INSTRUCTORScalarFieldEnum | COURSE_INSTRUCTORScalarFieldEnum[]
  }

  /**
   * COURSE_INSTRUCTOR findFirstOrThrow
   */
  export type COURSE_INSTRUCTORFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter, which COURSE_INSTRUCTOR to fetch.
     */
    where?: COURSE_INSTRUCTORWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of COURSE_INSTRUCTORS to fetch.
     */
    orderBy?: COURSE_INSTRUCTOROrderByWithRelationInput | COURSE_INSTRUCTOROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for COURSE_INSTRUCTORS.
     */
    cursor?: COURSE_INSTRUCTORWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` COURSE_INSTRUCTORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` COURSE_INSTRUCTORS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of COURSE_INSTRUCTORS.
     */
    distinct?: COURSE_INSTRUCTORScalarFieldEnum | COURSE_INSTRUCTORScalarFieldEnum[]
  }

  /**
   * COURSE_INSTRUCTOR findMany
   */
  export type COURSE_INSTRUCTORFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter, which COURSE_INSTRUCTORS to fetch.
     */
    where?: COURSE_INSTRUCTORWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of COURSE_INSTRUCTORS to fetch.
     */
    orderBy?: COURSE_INSTRUCTOROrderByWithRelationInput | COURSE_INSTRUCTOROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing COURSE_INSTRUCTORS.
     */
    cursor?: COURSE_INSTRUCTORWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` COURSE_INSTRUCTORS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` COURSE_INSTRUCTORS.
     */
    skip?: number
    distinct?: COURSE_INSTRUCTORScalarFieldEnum | COURSE_INSTRUCTORScalarFieldEnum[]
  }

  /**
   * COURSE_INSTRUCTOR create
   */
  export type COURSE_INSTRUCTORCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * The data needed to create a COURSE_INSTRUCTOR.
     */
    data: XOR<COURSE_INSTRUCTORCreateInput, COURSE_INSTRUCTORUncheckedCreateInput>
  }

  /**
   * COURSE_INSTRUCTOR createMany
   */
  export type COURSE_INSTRUCTORCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many COURSE_INSTRUCTORS.
     */
    data: COURSE_INSTRUCTORCreateManyInput | COURSE_INSTRUCTORCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * COURSE_INSTRUCTOR createManyAndReturn
   */
  export type COURSE_INSTRUCTORCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many COURSE_INSTRUCTORS.
     */
    data: COURSE_INSTRUCTORCreateManyInput | COURSE_INSTRUCTORCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * COURSE_INSTRUCTOR update
   */
  export type COURSE_INSTRUCTORUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * The data needed to update a COURSE_INSTRUCTOR.
     */
    data: XOR<COURSE_INSTRUCTORUpdateInput, COURSE_INSTRUCTORUncheckedUpdateInput>
    /**
     * Choose, which COURSE_INSTRUCTOR to update.
     */
    where: COURSE_INSTRUCTORWhereUniqueInput
  }

  /**
   * COURSE_INSTRUCTOR updateMany
   */
  export type COURSE_INSTRUCTORUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update COURSE_INSTRUCTORS.
     */
    data: XOR<COURSE_INSTRUCTORUpdateManyMutationInput, COURSE_INSTRUCTORUncheckedUpdateManyInput>
    /**
     * Filter which COURSE_INSTRUCTORS to update
     */
    where?: COURSE_INSTRUCTORWhereInput
  }

  /**
   * COURSE_INSTRUCTOR upsert
   */
  export type COURSE_INSTRUCTORUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * The filter to search for the COURSE_INSTRUCTOR to update in case it exists.
     */
    where: COURSE_INSTRUCTORWhereUniqueInput
    /**
     * In case the COURSE_INSTRUCTOR found by the `where` argument doesn't exist, create a new COURSE_INSTRUCTOR with this data.
     */
    create: XOR<COURSE_INSTRUCTORCreateInput, COURSE_INSTRUCTORUncheckedCreateInput>
    /**
     * In case the COURSE_INSTRUCTOR was found with the provided `where` argument, update it with this data.
     */
    update: XOR<COURSE_INSTRUCTORUpdateInput, COURSE_INSTRUCTORUncheckedUpdateInput>
  }

  /**
   * COURSE_INSTRUCTOR delete
   */
  export type COURSE_INSTRUCTORDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
    /**
     * Filter which COURSE_INSTRUCTOR to delete.
     */
    where: COURSE_INSTRUCTORWhereUniqueInput
  }

  /**
   * COURSE_INSTRUCTOR deleteMany
   */
  export type COURSE_INSTRUCTORDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which COURSE_INSTRUCTORS to delete
     */
    where?: COURSE_INSTRUCTORWhereInput
  }

  /**
   * COURSE_INSTRUCTOR without action
   */
  export type COURSE_INSTRUCTORDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the COURSE_INSTRUCTOR
     */
    select?: COURSE_INSTRUCTORSelect<ExtArgs> | null
  }


  /**
   * Model Student
   */

  export type AggregateStudent = {
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  export type StudentMinAggregateOutputType = {
    S_id: string | null
    S_fristname: string | null
    S_lastname: string | null
    S_username: string | null
    S_password: string | null
    role: $Enums.Role | null
    S_phone: string | null
    S_email: string | null
    room: string | null
  }

  export type StudentMaxAggregateOutputType = {
    S_id: string | null
    S_fristname: string | null
    S_lastname: string | null
    S_username: string | null
    S_password: string | null
    role: $Enums.Role | null
    S_phone: string | null
    S_email: string | null
    room: string | null
  }

  export type StudentCountAggregateOutputType = {
    S_id: number
    S_fristname: number
    S_lastname: number
    S_username: number
    S_password: number
    role: number
    S_phone: number
    S_email: number
    room: number
    _all: number
  }


  export type StudentMinAggregateInputType = {
    S_id?: true
    S_fristname?: true
    S_lastname?: true
    S_username?: true
    S_password?: true
    role?: true
    S_phone?: true
    S_email?: true
    room?: true
  }

  export type StudentMaxAggregateInputType = {
    S_id?: true
    S_fristname?: true
    S_lastname?: true
    S_username?: true
    S_password?: true
    role?: true
    S_phone?: true
    S_email?: true
    room?: true
  }

  export type StudentCountAggregateInputType = {
    S_id?: true
    S_fristname?: true
    S_lastname?: true
    S_username?: true
    S_password?: true
    role?: true
    S_phone?: true
    S_email?: true
    room?: true
    _all?: true
  }

  export type StudentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Student to aggregate.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Students
    **/
    _count?: true | StudentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StudentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StudentMaxAggregateInputType
  }

  export type GetStudentAggregateType<T extends StudentAggregateArgs> = {
        [P in keyof T & keyof AggregateStudent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStudent[P]>
      : GetScalarType<T[P], AggregateStudent[P]>
  }




  export type StudentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithAggregationInput | StudentOrderByWithAggregationInput[]
    by: StudentScalarFieldEnum[] | StudentScalarFieldEnum
    having?: StudentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StudentCountAggregateInputType | true
    _min?: StudentMinAggregateInputType
    _max?: StudentMaxAggregateInputType
  }

  export type StudentGroupByOutputType = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role: $Enums.Role
    S_phone: string | null
    S_email: string | null
    room: string
    _count: StudentCountAggregateOutputType | null
    _min: StudentMinAggregateOutputType | null
    _max: StudentMaxAggregateOutputType | null
  }

  type GetStudentGroupByPayload<T extends StudentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StudentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StudentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StudentGroupByOutputType[P]>
            : GetScalarType<T[P], StudentGroupByOutputType[P]>
        }
      >
    >


  export type StudentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    S_id?: boolean
    S_fristname?: boolean
    S_lastname?: boolean
    S_username?: boolean
    S_password?: boolean
    role?: boolean
    S_phone?: boolean
    S_email?: boolean
    room?: boolean
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    S_id?: boolean
    S_fristname?: boolean
    S_lastname?: boolean
    S_username?: boolean
    S_password?: boolean
    role?: boolean
    S_phone?: boolean
    S_email?: boolean
    room?: boolean
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["student"]>

  export type StudentSelectScalar = {
    S_id?: boolean
    S_fristname?: boolean
    S_lastname?: boolean
    S_username?: boolean
    S_password?: boolean
    role?: boolean
    S_phone?: boolean
    S_email?: boolean
    room?: boolean
  }

  export type StudentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }
  export type StudentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }

  export type $StudentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Student"
    objects: {
      classroom: Prisma.$ClassroomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      S_id: string
      S_fristname: string
      S_lastname: string
      S_username: string
      S_password: string
      role: $Enums.Role
      S_phone: string | null
      S_email: string | null
      room: string
    }, ExtArgs["result"]["student"]>
    composites: {}
  }

  type StudentGetPayload<S extends boolean | null | undefined | StudentDefaultArgs> = $Result.GetResult<Prisma.$StudentPayload, S>

  type StudentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<StudentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: StudentCountAggregateInputType | true
    }

  export interface StudentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Student'], meta: { name: 'Student' } }
    /**
     * Find zero or one Student that matches the filter.
     * @param {StudentFindUniqueArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends StudentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, StudentFindUniqueArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Student that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {StudentFindUniqueOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends StudentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Student that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends StudentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Student that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindFirstOrThrowArgs} args - Arguments to find a Student
     * @example
     * // Get one Student
     * const student = await prisma.student.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends StudentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Students that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Students
     * const students = await prisma.student.findMany()
     * 
     * // Get first 10 Students
     * const students = await prisma.student.findMany({ take: 10 })
     * 
     * // Only select the `S_id`
     * const studentWithS_idOnly = await prisma.student.findMany({ select: { S_id: true } })
     * 
    **/
    findMany<T extends StudentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Student.
     * @param {StudentCreateArgs} args - Arguments to create a Student.
     * @example
     * // Create one Student
     * const Student = await prisma.student.create({
     *   data: {
     *     // ... data to create a Student
     *   }
     * })
     * 
    **/
    create<T extends StudentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentCreateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Students.
     * @param {StudentCreateManyArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends StudentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Students and returns the data saved in the database.
     * @param {StudentCreateManyAndReturnArgs} args - Arguments to create many Students.
     * @example
     * // Create many Students
     * const student = await prisma.student.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Students and only return the `S_id`
     * const studentWithS_idOnly = await prisma.student.createManyAndReturn({ 
     *   select: { S_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends StudentCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Student.
     * @param {StudentDeleteArgs} args - Arguments to delete one Student.
     * @example
     * // Delete one Student
     * const Student = await prisma.student.delete({
     *   where: {
     *     // ... filter to delete one Student
     *   }
     * })
     * 
    **/
    delete<T extends StudentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, StudentDeleteArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Student.
     * @param {StudentUpdateArgs} args - Arguments to update one Student.
     * @example
     * // Update one Student
     * const student = await prisma.student.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends StudentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Students.
     * @param {StudentDeleteManyArgs} args - Arguments to filter Students to delete.
     * @example
     * // Delete a few Students
     * const { count } = await prisma.student.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends StudentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, StudentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Students
     * const student = await prisma.student.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends StudentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Student.
     * @param {StudentUpsertArgs} args - Arguments to update or create a Student.
     * @example
     * // Update or create a Student
     * const student = await prisma.student.upsert({
     *   create: {
     *     // ... data to create a Student
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Student we want to update
     *   }
     * })
    **/
    upsert<T extends StudentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, StudentUpsertArgs<ExtArgs>>
    ): Prisma__StudentClient<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Students.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentCountArgs} args - Arguments to filter Students to count.
     * @example
     * // Count the number of Students
     * const count = await prisma.student.count({
     *   where: {
     *     // ... the filter for the Students we want to count
     *   }
     * })
    **/
    count<T extends StudentCountArgs>(
      args?: Subset<T, StudentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StudentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StudentAggregateArgs>(args: Subset<T, StudentAggregateArgs>): Prisma.PrismaPromise<GetStudentAggregateType<T>>

    /**
     * Group by Student.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StudentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StudentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StudentGroupByArgs['orderBy'] }
        : { orderBy?: StudentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StudentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStudentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Student model
   */
  readonly fields: StudentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Student.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StudentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    classroom<T extends ClassroomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassroomDefaultArgs<ExtArgs>>): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Student model
   */ 
  interface StudentFieldRefs {
    readonly S_id: FieldRef<"Student", 'String'>
    readonly S_fristname: FieldRef<"Student", 'String'>
    readonly S_lastname: FieldRef<"Student", 'String'>
    readonly S_username: FieldRef<"Student", 'String'>
    readonly S_password: FieldRef<"Student", 'String'>
    readonly role: FieldRef<"Student", 'Role'>
    readonly S_phone: FieldRef<"Student", 'String'>
    readonly S_email: FieldRef<"Student", 'String'>
    readonly room: FieldRef<"Student", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Student findUnique
   */
  export type StudentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findUniqueOrThrow
   */
  export type StudentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student findFirst
   */
  export type StudentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findFirstOrThrow
   */
  export type StudentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Student to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Students.
     */
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student findMany
   */
  export type StudentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter, which Students to fetch.
     */
    where?: StudentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Students to fetch.
     */
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Students.
     */
    cursor?: StudentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Students from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Students.
     */
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Student create
   */
  export type StudentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to create a Student.
     */
    data: XOR<StudentCreateInput, StudentUncheckedCreateInput>
  }

  /**
   * Student createMany
   */
  export type StudentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Student createManyAndReturn
   */
  export type StudentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Students.
     */
    data: StudentCreateManyInput | StudentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Student update
   */
  export type StudentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The data needed to update a Student.
     */
    data: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
    /**
     * Choose, which Student to update.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student updateMany
   */
  export type StudentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Students.
     */
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyInput>
    /**
     * Filter which Students to update
     */
    where?: StudentWhereInput
  }

  /**
   * Student upsert
   */
  export type StudentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * The filter to search for the Student to update in case it exists.
     */
    where: StudentWhereUniqueInput
    /**
     * In case the Student found by the `where` argument doesn't exist, create a new Student with this data.
     */
    create: XOR<StudentCreateInput, StudentUncheckedCreateInput>
    /**
     * In case the Student was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StudentUpdateInput, StudentUncheckedUpdateInput>
  }

  /**
   * Student delete
   */
  export type StudentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    /**
     * Filter which Student to delete.
     */
    where: StudentWhereUniqueInput
  }

  /**
   * Student deleteMany
   */
  export type StudentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Students to delete
     */
    where?: StudentWhereInput
  }

  /**
   * Student without action
   */
  export type StudentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    T_id: number | null
    T_phone: number | null
  }

  export type TeacherSumAggregateOutputType = {
    T_id: number | null
    T_phone: number | null
  }

  export type TeacherMinAggregateOutputType = {
    T_id: number | null
    T_fristname: string | null
    T_lastname: string | null
    T_username: string | null
    T_password: string | null
    role: $Enums.Role | null
    T_phone: number | null
    T_email: string | null
  }

  export type TeacherMaxAggregateOutputType = {
    T_id: number | null
    T_fristname: string | null
    T_lastname: string | null
    T_username: string | null
    T_password: string | null
    role: $Enums.Role | null
    T_phone: number | null
    T_email: string | null
  }

  export type TeacherCountAggregateOutputType = {
    T_id: number
    T_fristname: number
    T_lastname: number
    T_username: number
    T_password: number
    role: number
    T_phone: number
    T_email: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    T_id?: true
    T_phone?: true
  }

  export type TeacherSumAggregateInputType = {
    T_id?: true
    T_phone?: true
  }

  export type TeacherMinAggregateInputType = {
    T_id?: true
    T_fristname?: true
    T_lastname?: true
    T_username?: true
    T_password?: true
    role?: true
    T_phone?: true
    T_email?: true
  }

  export type TeacherMaxAggregateInputType = {
    T_id?: true
    T_fristname?: true
    T_lastname?: true
    T_username?: true
    T_password?: true
    role?: true
    T_phone?: true
    T_email?: true
  }

  export type TeacherCountAggregateInputType = {
    T_id?: true
    T_fristname?: true
    T_lastname?: true
    T_username?: true
    T_password?: true
    role?: true
    T_phone?: true
    T_email?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    T_id: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role: $Enums.Role
    T_phone: number | null
    T_email: string | null
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    T_id?: boolean
    T_fristname?: boolean
    T_lastname?: boolean
    T_username?: boolean
    T_password?: boolean
    role?: boolean
    T_phone?: boolean
    T_email?: boolean
    advisorrooms?: boolean | Teacher$advisorroomsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    T_id?: boolean
    T_fristname?: boolean
    T_lastname?: boolean
    T_username?: boolean
    T_password?: boolean
    role?: boolean
    T_phone?: boolean
    T_email?: boolean
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    T_id?: boolean
    T_fristname?: boolean
    T_lastname?: boolean
    T_username?: boolean
    T_password?: boolean
    role?: boolean
    T_phone?: boolean
    T_email?: boolean
  }

  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    advisorrooms?: boolean | Teacher$advisorroomsArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      advisorrooms: Prisma.$AdvisorPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      T_id: number
      T_fristname: string
      T_lastname: string
      T_username: string
      T_password: string
      role: $Enums.Role
      T_phone: number | null
      T_email: string | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeacherFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeacherFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `T_id`
     * const teacherWithT_idOnly = await prisma.teacher.findMany({ select: { T_id: true } })
     * 
    **/
    findMany<T extends TeacherFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
    **/
    create<T extends TeacherCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends TeacherCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `T_id`
     * const teacherWithT_idOnly = await prisma.teacher.createManyAndReturn({ 
     *   select: { T_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
    **/
    delete<T extends TeacherDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeacherUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeacherDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeacherUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
    **/
    upsert<T extends TeacherUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>
    ): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    advisorrooms<T extends Teacher$advisorroomsArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$advisorroomsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Teacher model
   */ 
  interface TeacherFieldRefs {
    readonly T_id: FieldRef<"Teacher", 'Int'>
    readonly T_fristname: FieldRef<"Teacher", 'String'>
    readonly T_lastname: FieldRef<"Teacher", 'String'>
    readonly T_username: FieldRef<"Teacher", 'String'>
    readonly T_password: FieldRef<"Teacher", 'String'>
    readonly role: FieldRef<"Teacher", 'Role'>
    readonly T_phone: FieldRef<"Teacher", 'Int'>
    readonly T_email: FieldRef<"Teacher", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
  }

  /**
   * Teacher.advisorrooms
   */
  export type Teacher$advisorroomsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    where?: AdvisorWhereInput
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    cursor?: AdvisorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdvisorScalarFieldEnum | AdvisorScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Classroom
   */

  export type AggregateClassroom = {
    _count: ClassroomCountAggregateOutputType | null
    _min: ClassroomMinAggregateOutputType | null
    _max: ClassroomMaxAggregateOutputType | null
  }

  export type ClassroomMinAggregateOutputType = {
    roomname: string | null
  }

  export type ClassroomMaxAggregateOutputType = {
    roomname: string | null
  }

  export type ClassroomCountAggregateOutputType = {
    roomname: number
    _all: number
  }


  export type ClassroomMinAggregateInputType = {
    roomname?: true
  }

  export type ClassroomMaxAggregateInputType = {
    roomname?: true
  }

  export type ClassroomCountAggregateInputType = {
    roomname?: true
    _all?: true
  }

  export type ClassroomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classroom to aggregate.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomOrderByWithRelationInput | ClassroomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classrooms
    **/
    _count?: true | ClassroomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassroomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassroomMaxAggregateInputType
  }

  export type GetClassroomAggregateType<T extends ClassroomAggregateArgs> = {
        [P in keyof T & keyof AggregateClassroom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassroom[P]>
      : GetScalarType<T[P], AggregateClassroom[P]>
  }




  export type ClassroomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassroomWhereInput
    orderBy?: ClassroomOrderByWithAggregationInput | ClassroomOrderByWithAggregationInput[]
    by: ClassroomScalarFieldEnum[] | ClassroomScalarFieldEnum
    having?: ClassroomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassroomCountAggregateInputType | true
    _min?: ClassroomMinAggregateInputType
    _max?: ClassroomMaxAggregateInputType
  }

  export type ClassroomGroupByOutputType = {
    roomname: string
    _count: ClassroomCountAggregateOutputType | null
    _min: ClassroomMinAggregateOutputType | null
    _max: ClassroomMaxAggregateOutputType | null
  }

  type GetClassroomGroupByPayload<T extends ClassroomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassroomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassroomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassroomGroupByOutputType[P]>
            : GetScalarType<T[P], ClassroomGroupByOutputType[P]>
        }
      >
    >


  export type ClassroomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomname?: boolean
    teachers?: boolean | Classroom$teachersArgs<ExtArgs>
    students?: boolean | Classroom$studentsArgs<ExtArgs>
    _count?: boolean | ClassroomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classroom"]>

  export type ClassroomSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    roomname?: boolean
  }, ExtArgs["result"]["classroom"]>

  export type ClassroomSelectScalar = {
    roomname?: boolean
  }

  export type ClassroomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | Classroom$teachersArgs<ExtArgs>
    students?: boolean | Classroom$studentsArgs<ExtArgs>
    _count?: boolean | ClassroomCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassroomIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClassroomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Classroom"
    objects: {
      teachers: Prisma.$AdvisorPayload<ExtArgs>[]
      students: Prisma.$StudentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      roomname: string
    }, ExtArgs["result"]["classroom"]>
    composites: {}
  }

  type ClassroomGetPayload<S extends boolean | null | undefined | ClassroomDefaultArgs> = $Result.GetResult<Prisma.$ClassroomPayload, S>

  type ClassroomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ClassroomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ClassroomCountAggregateInputType | true
    }

  export interface ClassroomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Classroom'], meta: { name: 'Classroom' } }
    /**
     * Find zero or one Classroom that matches the filter.
     * @param {ClassroomFindUniqueArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ClassroomFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomFindUniqueArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Classroom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ClassroomFindUniqueOrThrowArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ClassroomFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Classroom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindFirstArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ClassroomFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomFindFirstArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Classroom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindFirstOrThrowArgs} args - Arguments to find a Classroom
     * @example
     * // Get one Classroom
     * const classroom = await prisma.classroom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ClassroomFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Classrooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classrooms
     * const classrooms = await prisma.classroom.findMany()
     * 
     * // Get first 10 Classrooms
     * const classrooms = await prisma.classroom.findMany({ take: 10 })
     * 
     * // Only select the `roomname`
     * const classroomWithRoomnameOnly = await prisma.classroom.findMany({ select: { roomname: true } })
     * 
    **/
    findMany<T extends ClassroomFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Classroom.
     * @param {ClassroomCreateArgs} args - Arguments to create a Classroom.
     * @example
     * // Create one Classroom
     * const Classroom = await prisma.classroom.create({
     *   data: {
     *     // ... data to create a Classroom
     *   }
     * })
     * 
    **/
    create<T extends ClassroomCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomCreateArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Classrooms.
     * @param {ClassroomCreateManyArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classroom = await prisma.classroom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ClassroomCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classrooms and returns the data saved in the database.
     * @param {ClassroomCreateManyAndReturnArgs} args - Arguments to create many Classrooms.
     * @example
     * // Create many Classrooms
     * const classroom = await prisma.classroom.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classrooms and only return the `roomname`
     * const classroomWithRoomnameOnly = await prisma.classroom.createManyAndReturn({ 
     *   select: { roomname: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ClassroomCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Classroom.
     * @param {ClassroomDeleteArgs} args - Arguments to delete one Classroom.
     * @example
     * // Delete one Classroom
     * const Classroom = await prisma.classroom.delete({
     *   where: {
     *     // ... filter to delete one Classroom
     *   }
     * })
     * 
    **/
    delete<T extends ClassroomDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomDeleteArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Classroom.
     * @param {ClassroomUpdateArgs} args - Arguments to update one Classroom.
     * @example
     * // Update one Classroom
     * const classroom = await prisma.classroom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ClassroomUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomUpdateArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Classrooms.
     * @param {ClassroomDeleteManyArgs} args - Arguments to filter Classrooms to delete.
     * @example
     * // Delete a few Classrooms
     * const { count } = await prisma.classroom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ClassroomDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ClassroomDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classrooms
     * const classroom = await prisma.classroom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ClassroomUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Classroom.
     * @param {ClassroomUpsertArgs} args - Arguments to update or create a Classroom.
     * @example
     * // Update or create a Classroom
     * const classroom = await prisma.classroom.upsert({
     *   create: {
     *     // ... data to create a Classroom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Classroom we want to update
     *   }
     * })
    **/
    upsert<T extends ClassroomUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ClassroomUpsertArgs<ExtArgs>>
    ): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Classrooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomCountArgs} args - Arguments to filter Classrooms to count.
     * @example
     * // Count the number of Classrooms
     * const count = await prisma.classroom.count({
     *   where: {
     *     // ... the filter for the Classrooms we want to count
     *   }
     * })
    **/
    count<T extends ClassroomCountArgs>(
      args?: Subset<T, ClassroomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassroomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Classroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassroomAggregateArgs>(args: Subset<T, ClassroomAggregateArgs>): Prisma.PrismaPromise<GetClassroomAggregateType<T>>

    /**
     * Group by Classroom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassroomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassroomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassroomGroupByArgs['orderBy'] }
        : { orderBy?: ClassroomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassroomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassroomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Classroom model
   */
  readonly fields: ClassroomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Classroom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassroomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    teachers<T extends Classroom$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Classroom$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findMany'> | Null>;

    students<T extends Classroom$studentsArgs<ExtArgs> = {}>(args?: Subset<T, Classroom$studentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StudentPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Classroom model
   */ 
  interface ClassroomFieldRefs {
    readonly roomname: FieldRef<"Classroom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Classroom findUnique
   */
  export type ClassroomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter, which Classroom to fetch.
     */
    where: ClassroomWhereUniqueInput
  }

  /**
   * Classroom findUniqueOrThrow
   */
  export type ClassroomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter, which Classroom to fetch.
     */
    where: ClassroomWhereUniqueInput
  }

  /**
   * Classroom findFirst
   */
  export type ClassroomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter, which Classroom to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomOrderByWithRelationInput | ClassroomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: ClassroomScalarFieldEnum | ClassroomScalarFieldEnum[]
  }

  /**
   * Classroom findFirstOrThrow
   */
  export type ClassroomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter, which Classroom to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomOrderByWithRelationInput | ClassroomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classrooms.
     */
    distinct?: ClassroomScalarFieldEnum | ClassroomScalarFieldEnum[]
  }

  /**
   * Classroom findMany
   */
  export type ClassroomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter, which Classrooms to fetch.
     */
    where?: ClassroomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classrooms to fetch.
     */
    orderBy?: ClassroomOrderByWithRelationInput | ClassroomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classrooms.
     */
    cursor?: ClassroomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classrooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classrooms.
     */
    skip?: number
    distinct?: ClassroomScalarFieldEnum | ClassroomScalarFieldEnum[]
  }

  /**
   * Classroom create
   */
  export type ClassroomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * The data needed to create a Classroom.
     */
    data: XOR<ClassroomCreateInput, ClassroomUncheckedCreateInput>
  }

  /**
   * Classroom createMany
   */
  export type ClassroomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classrooms.
     */
    data: ClassroomCreateManyInput | ClassroomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Classroom createManyAndReturn
   */
  export type ClassroomCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Classrooms.
     */
    data: ClassroomCreateManyInput | ClassroomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Classroom update
   */
  export type ClassroomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * The data needed to update a Classroom.
     */
    data: XOR<ClassroomUpdateInput, ClassroomUncheckedUpdateInput>
    /**
     * Choose, which Classroom to update.
     */
    where: ClassroomWhereUniqueInput
  }

  /**
   * Classroom updateMany
   */
  export type ClassroomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classrooms.
     */
    data: XOR<ClassroomUpdateManyMutationInput, ClassroomUncheckedUpdateManyInput>
    /**
     * Filter which Classrooms to update
     */
    where?: ClassroomWhereInput
  }

  /**
   * Classroom upsert
   */
  export type ClassroomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * The filter to search for the Classroom to update in case it exists.
     */
    where: ClassroomWhereUniqueInput
    /**
     * In case the Classroom found by the `where` argument doesn't exist, create a new Classroom with this data.
     */
    create: XOR<ClassroomCreateInput, ClassroomUncheckedCreateInput>
    /**
     * In case the Classroom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassroomUpdateInput, ClassroomUncheckedUpdateInput>
  }

  /**
   * Classroom delete
   */
  export type ClassroomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
    /**
     * Filter which Classroom to delete.
     */
    where: ClassroomWhereUniqueInput
  }

  /**
   * Classroom deleteMany
   */
  export type ClassroomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classrooms to delete
     */
    where?: ClassroomWhereInput
  }

  /**
   * Classroom.teachers
   */
  export type Classroom$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    where?: AdvisorWhereInput
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    cursor?: AdvisorWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdvisorScalarFieldEnum | AdvisorScalarFieldEnum[]
  }

  /**
   * Classroom.students
   */
  export type Classroom$studentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Student
     */
    select?: StudentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StudentInclude<ExtArgs> | null
    where?: StudentWhereInput
    orderBy?: StudentOrderByWithRelationInput | StudentOrderByWithRelationInput[]
    cursor?: StudentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StudentScalarFieldEnum | StudentScalarFieldEnum[]
  }

  /**
   * Classroom without action
   */
  export type ClassroomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Classroom
     */
    select?: ClassroomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassroomInclude<ExtArgs> | null
  }


  /**
   * Model Advisor
   */

  export type AggregateAdvisor = {
    _count: AdvisorCountAggregateOutputType | null
    _avg: AdvisorAvgAggregateOutputType | null
    _sum: AdvisorSumAggregateOutputType | null
    _min: AdvisorMinAggregateOutputType | null
    _max: AdvisorMaxAggregateOutputType | null
  }

  export type AdvisorAvgAggregateOutputType = {
    Advisor_id: number | null
    teacherId: number | null
  }

  export type AdvisorSumAggregateOutputType = {
    Advisor_id: number | null
    teacherId: number | null
  }

  export type AdvisorMinAggregateOutputType = {
    Advisor_id: number | null
    teacherId: number | null
    teacherfristName: string | null
    teacherlastName: string | null
    roomName: string | null
  }

  export type AdvisorMaxAggregateOutputType = {
    Advisor_id: number | null
    teacherId: number | null
    teacherfristName: string | null
    teacherlastName: string | null
    roomName: string | null
  }

  export type AdvisorCountAggregateOutputType = {
    Advisor_id: number
    teacherId: number
    teacherfristName: number
    teacherlastName: number
    roomName: number
    _all: number
  }


  export type AdvisorAvgAggregateInputType = {
    Advisor_id?: true
    teacherId?: true
  }

  export type AdvisorSumAggregateInputType = {
    Advisor_id?: true
    teacherId?: true
  }

  export type AdvisorMinAggregateInputType = {
    Advisor_id?: true
    teacherId?: true
    teacherfristName?: true
    teacherlastName?: true
    roomName?: true
  }

  export type AdvisorMaxAggregateInputType = {
    Advisor_id?: true
    teacherId?: true
    teacherfristName?: true
    teacherlastName?: true
    roomName?: true
  }

  export type AdvisorCountAggregateInputType = {
    Advisor_id?: true
    teacherId?: true
    teacherfristName?: true
    teacherlastName?: true
    roomName?: true
    _all?: true
  }

  export type AdvisorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Advisor to aggregate.
     */
    where?: AdvisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advisors to fetch.
     */
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdvisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Advisors
    **/
    _count?: true | AdvisorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdvisorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdvisorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdvisorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdvisorMaxAggregateInputType
  }

  export type GetAdvisorAggregateType<T extends AdvisorAggregateArgs> = {
        [P in keyof T & keyof AggregateAdvisor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdvisor[P]>
      : GetScalarType<T[P], AggregateAdvisor[P]>
  }




  export type AdvisorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdvisorWhereInput
    orderBy?: AdvisorOrderByWithAggregationInput | AdvisorOrderByWithAggregationInput[]
    by: AdvisorScalarFieldEnum[] | AdvisorScalarFieldEnum
    having?: AdvisorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdvisorCountAggregateInputType | true
    _avg?: AdvisorAvgAggregateInputType
    _sum?: AdvisorSumAggregateInputType
    _min?: AdvisorMinAggregateInputType
    _max?: AdvisorMaxAggregateInputType
  }

  export type AdvisorGroupByOutputType = {
    Advisor_id: number
    teacherId: number
    teacherfristName: string
    teacherlastName: string
    roomName: string
    _count: AdvisorCountAggregateOutputType | null
    _avg: AdvisorAvgAggregateOutputType | null
    _sum: AdvisorSumAggregateOutputType | null
    _min: AdvisorMinAggregateOutputType | null
    _max: AdvisorMaxAggregateOutputType | null
  }

  type GetAdvisorGroupByPayload<T extends AdvisorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdvisorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdvisorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdvisorGroupByOutputType[P]>
            : GetScalarType<T[P], AdvisorGroupByOutputType[P]>
        }
      >
    >


  export type AdvisorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Advisor_id?: boolean
    teacherId?: boolean
    teacherfristName?: boolean
    teacherlastName?: boolean
    roomName?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["advisor"]>

  export type AdvisorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    Advisor_id?: boolean
    teacherId?: boolean
    teacherfristName?: boolean
    teacherlastName?: boolean
    roomName?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["advisor"]>

  export type AdvisorSelectScalar = {
    Advisor_id?: boolean
    teacherId?: boolean
    teacherfristName?: boolean
    teacherlastName?: boolean
    roomName?: boolean
  }

  export type AdvisorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }
  export type AdvisorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    classroom?: boolean | ClassroomDefaultArgs<ExtArgs>
  }

  export type $AdvisorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Advisor"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs>
      classroom: Prisma.$ClassroomPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      Advisor_id: number
      teacherId: number
      teacherfristName: string
      teacherlastName: string
      roomName: string
    }, ExtArgs["result"]["advisor"]>
    composites: {}
  }

  type AdvisorGetPayload<S extends boolean | null | undefined | AdvisorDefaultArgs> = $Result.GetResult<Prisma.$AdvisorPayload, S>

  type AdvisorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdvisorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdvisorCountAggregateInputType | true
    }

  export interface AdvisorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Advisor'], meta: { name: 'Advisor' } }
    /**
     * Find zero or one Advisor that matches the filter.
     * @param {AdvisorFindUniqueArgs} args - Arguments to find a Advisor
     * @example
     * // Get one Advisor
     * const advisor = await prisma.advisor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdvisorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorFindUniqueArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Advisor that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdvisorFindUniqueOrThrowArgs} args - Arguments to find a Advisor
     * @example
     * // Get one Advisor
     * const advisor = await prisma.advisor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdvisorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Advisor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorFindFirstArgs} args - Arguments to find a Advisor
     * @example
     * // Get one Advisor
     * const advisor = await prisma.advisor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdvisorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorFindFirstArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Advisor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorFindFirstOrThrowArgs} args - Arguments to find a Advisor
     * @example
     * // Get one Advisor
     * const advisor = await prisma.advisor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdvisorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Advisors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Advisors
     * const advisors = await prisma.advisor.findMany()
     * 
     * // Get first 10 Advisors
     * const advisors = await prisma.advisor.findMany({ take: 10 })
     * 
     * // Only select the `Advisor_id`
     * const advisorWithAdvisor_idOnly = await prisma.advisor.findMany({ select: { Advisor_id: true } })
     * 
    **/
    findMany<T extends AdvisorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Advisor.
     * @param {AdvisorCreateArgs} args - Arguments to create a Advisor.
     * @example
     * // Create one Advisor
     * const Advisor = await prisma.advisor.create({
     *   data: {
     *     // ... data to create a Advisor
     *   }
     * })
     * 
    **/
    create<T extends AdvisorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorCreateArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Advisors.
     * @param {AdvisorCreateManyArgs} args - Arguments to create many Advisors.
     * @example
     * // Create many Advisors
     * const advisor = await prisma.advisor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdvisorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Advisors and returns the data saved in the database.
     * @param {AdvisorCreateManyAndReturnArgs} args - Arguments to create many Advisors.
     * @example
     * // Create many Advisors
     * const advisor = await prisma.advisor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Advisors and only return the `Advisor_id`
     * const advisorWithAdvisor_idOnly = await prisma.advisor.createManyAndReturn({ 
     *   select: { Advisor_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AdvisorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Advisor.
     * @param {AdvisorDeleteArgs} args - Arguments to delete one Advisor.
     * @example
     * // Delete one Advisor
     * const Advisor = await prisma.advisor.delete({
     *   where: {
     *     // ... filter to delete one Advisor
     *   }
     * })
     * 
    **/
    delete<T extends AdvisorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorDeleteArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Advisor.
     * @param {AdvisorUpdateArgs} args - Arguments to update one Advisor.
     * @example
     * // Update one Advisor
     * const advisor = await prisma.advisor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdvisorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorUpdateArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Advisors.
     * @param {AdvisorDeleteManyArgs} args - Arguments to filter Advisors to delete.
     * @example
     * // Delete a few Advisors
     * const { count } = await prisma.advisor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdvisorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdvisorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Advisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Advisors
     * const advisor = await prisma.advisor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdvisorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Advisor.
     * @param {AdvisorUpsertArgs} args - Arguments to update or create a Advisor.
     * @example
     * // Update or create a Advisor
     * const advisor = await prisma.advisor.upsert({
     *   create: {
     *     // ... data to create a Advisor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Advisor we want to update
     *   }
     * })
    **/
    upsert<T extends AdvisorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdvisorUpsertArgs<ExtArgs>>
    ): Prisma__AdvisorClient<$Result.GetResult<Prisma.$AdvisorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Advisors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorCountArgs} args - Arguments to filter Advisors to count.
     * @example
     * // Count the number of Advisors
     * const count = await prisma.advisor.count({
     *   where: {
     *     // ... the filter for the Advisors we want to count
     *   }
     * })
    **/
    count<T extends AdvisorCountArgs>(
      args?: Subset<T, AdvisorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdvisorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Advisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdvisorAggregateArgs>(args: Subset<T, AdvisorAggregateArgs>): Prisma.PrismaPromise<GetAdvisorAggregateType<T>>

    /**
     * Group by Advisor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdvisorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdvisorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdvisorGroupByArgs['orderBy'] }
        : { orderBy?: AdvisorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdvisorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdvisorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Advisor model
   */
  readonly fields: AdvisorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Advisor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdvisorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    classroom<T extends ClassroomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassroomDefaultArgs<ExtArgs>>): Prisma__ClassroomClient<$Result.GetResult<Prisma.$ClassroomPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Advisor model
   */ 
  interface AdvisorFieldRefs {
    readonly Advisor_id: FieldRef<"Advisor", 'Int'>
    readonly teacherId: FieldRef<"Advisor", 'Int'>
    readonly teacherfristName: FieldRef<"Advisor", 'String'>
    readonly teacherlastName: FieldRef<"Advisor", 'String'>
    readonly roomName: FieldRef<"Advisor", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Advisor findUnique
   */
  export type AdvisorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter, which Advisor to fetch.
     */
    where: AdvisorWhereUniqueInput
  }

  /**
   * Advisor findUniqueOrThrow
   */
  export type AdvisorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter, which Advisor to fetch.
     */
    where: AdvisorWhereUniqueInput
  }

  /**
   * Advisor findFirst
   */
  export type AdvisorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter, which Advisor to fetch.
     */
    where?: AdvisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advisors to fetch.
     */
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Advisors.
     */
    cursor?: AdvisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Advisors.
     */
    distinct?: AdvisorScalarFieldEnum | AdvisorScalarFieldEnum[]
  }

  /**
   * Advisor findFirstOrThrow
   */
  export type AdvisorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter, which Advisor to fetch.
     */
    where?: AdvisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advisors to fetch.
     */
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Advisors.
     */
    cursor?: AdvisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advisors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Advisors.
     */
    distinct?: AdvisorScalarFieldEnum | AdvisorScalarFieldEnum[]
  }

  /**
   * Advisor findMany
   */
  export type AdvisorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter, which Advisors to fetch.
     */
    where?: AdvisorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Advisors to fetch.
     */
    orderBy?: AdvisorOrderByWithRelationInput | AdvisorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Advisors.
     */
    cursor?: AdvisorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Advisors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Advisors.
     */
    skip?: number
    distinct?: AdvisorScalarFieldEnum | AdvisorScalarFieldEnum[]
  }

  /**
   * Advisor create
   */
  export type AdvisorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * The data needed to create a Advisor.
     */
    data: XOR<AdvisorCreateInput, AdvisorUncheckedCreateInput>
  }

  /**
   * Advisor createMany
   */
  export type AdvisorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Advisors.
     */
    data: AdvisorCreateManyInput | AdvisorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Advisor createManyAndReturn
   */
  export type AdvisorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Advisors.
     */
    data: AdvisorCreateManyInput | AdvisorCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Advisor update
   */
  export type AdvisorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * The data needed to update a Advisor.
     */
    data: XOR<AdvisorUpdateInput, AdvisorUncheckedUpdateInput>
    /**
     * Choose, which Advisor to update.
     */
    where: AdvisorWhereUniqueInput
  }

  /**
   * Advisor updateMany
   */
  export type AdvisorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Advisors.
     */
    data: XOR<AdvisorUpdateManyMutationInput, AdvisorUncheckedUpdateManyInput>
    /**
     * Filter which Advisors to update
     */
    where?: AdvisorWhereInput
  }

  /**
   * Advisor upsert
   */
  export type AdvisorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * The filter to search for the Advisor to update in case it exists.
     */
    where: AdvisorWhereUniqueInput
    /**
     * In case the Advisor found by the `where` argument doesn't exist, create a new Advisor with this data.
     */
    create: XOR<AdvisorCreateInput, AdvisorUncheckedCreateInput>
    /**
     * In case the Advisor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdvisorUpdateInput, AdvisorUncheckedUpdateInput>
  }

  /**
   * Advisor delete
   */
  export type AdvisorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
    /**
     * Filter which Advisor to delete.
     */
    where: AdvisorWhereUniqueInput
  }

  /**
   * Advisor deleteMany
   */
  export type AdvisorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Advisors to delete
     */
    where?: AdvisorWhereInput
  }

  /**
   * Advisor without action
   */
  export type AdvisorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Advisor
     */
    select?: AdvisorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdvisorInclude<ExtArgs> | null
  }


  /**
   * Model Major
   */

  export type AggregateMajor = {
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  export type MajorAvgAggregateOutputType = {
    id: number | null
  }

  export type MajorSumAggregateOutputType = {
    id: number | null
  }

  export type MajorMinAggregateOutputType = {
    id: number | null
    majorNameTH: string | null
    majorNameENG: string | null
    majorYear: string | null
    majorUnit: string | null
    majorStatus: string | null
    majorCode: string | null
    majorSupervisor: string | null
  }

  export type MajorMaxAggregateOutputType = {
    id: number | null
    majorNameTH: string | null
    majorNameENG: string | null
    majorYear: string | null
    majorUnit: string | null
    majorStatus: string | null
    majorCode: string | null
    majorSupervisor: string | null
  }

  export type MajorCountAggregateOutputType = {
    id: number
    majorNameTH: number
    majorNameENG: number
    majorYear: number
    majorUnit: number
    majorStatus: number
    majorCode: number
    majorSupervisor: number
    _all: number
  }


  export type MajorAvgAggregateInputType = {
    id?: true
  }

  export type MajorSumAggregateInputType = {
    id?: true
  }

  export type MajorMinAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
  }

  export type MajorMaxAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
  }

  export type MajorCountAggregateInputType = {
    id?: true
    majorNameTH?: true
    majorNameENG?: true
    majorYear?: true
    majorUnit?: true
    majorStatus?: true
    majorCode?: true
    majorSupervisor?: true
    _all?: true
  }

  export type MajorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Major to aggregate.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Majors
    **/
    _count?: true | MajorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MajorAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MajorSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MajorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MajorMaxAggregateInputType
  }

  export type GetMajorAggregateType<T extends MajorAggregateArgs> = {
        [P in keyof T & keyof AggregateMajor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMajor[P]>
      : GetScalarType<T[P], AggregateMajor[P]>
  }




  export type MajorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MajorWhereInput
    orderBy?: MajorOrderByWithAggregationInput | MajorOrderByWithAggregationInput[]
    by: MajorScalarFieldEnum[] | MajorScalarFieldEnum
    having?: MajorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MajorCountAggregateInputType | true
    _avg?: MajorAvgAggregateInputType
    _sum?: MajorSumAggregateInputType
    _min?: MajorMinAggregateInputType
    _max?: MajorMaxAggregateInputType
  }

  export type MajorGroupByOutputType = {
    id: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    _count: MajorCountAggregateOutputType | null
    _avg: MajorAvgAggregateOutputType | null
    _sum: MajorSumAggregateOutputType | null
    _min: MajorMinAggregateOutputType | null
    _max: MajorMaxAggregateOutputType | null
  }

  type GetMajorGroupByPayload<T extends MajorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MajorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MajorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MajorGroupByOutputType[P]>
            : GetScalarType<T[P], MajorGroupByOutputType[P]>
        }
      >
    >


  export type MajorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
    categories?: boolean | Major$categoriesArgs<ExtArgs>
    courses?: boolean | Major$coursesArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["major"]>

  export type MajorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
  }, ExtArgs["result"]["major"]>

  export type MajorSelectScalar = {
    id?: boolean
    majorNameTH?: boolean
    majorNameENG?: boolean
    majorYear?: boolean
    majorUnit?: boolean
    majorStatus?: boolean
    majorCode?: boolean
    majorSupervisor?: boolean
  }

  export type MajorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categories?: boolean | Major$categoriesArgs<ExtArgs>
    courses?: boolean | Major$coursesArgs<ExtArgs>
    _count?: boolean | MajorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MajorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $MajorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Major"
    objects: {
      categories: Prisma.$CategoryPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      majorNameTH: string
      majorNameENG: string
      majorYear: string
      majorUnit: string
      majorStatus: string
      majorCode: string
      majorSupervisor: string
    }, ExtArgs["result"]["major"]>
    composites: {}
  }

  type MajorGetPayload<S extends boolean | null | undefined | MajorDefaultArgs> = $Result.GetResult<Prisma.$MajorPayload, S>

  type MajorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MajorFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MajorCountAggregateInputType | true
    }

  export interface MajorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Major'], meta: { name: 'Major' } }
    /**
     * Find zero or one Major that matches the filter.
     * @param {MajorFindUniqueArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MajorFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MajorFindUniqueArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Major that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MajorFindUniqueOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MajorFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Major that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MajorFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindFirstArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Major that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindFirstOrThrowArgs} args - Arguments to find a Major
     * @example
     * // Get one Major
     * const major = await prisma.major.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MajorFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Majors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Majors
     * const majors = await prisma.major.findMany()
     * 
     * // Get first 10 Majors
     * const majors = await prisma.major.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const majorWithIdOnly = await prisma.major.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends MajorFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Major.
     * @param {MajorCreateArgs} args - Arguments to create a Major.
     * @example
     * // Create one Major
     * const Major = await prisma.major.create({
     *   data: {
     *     // ... data to create a Major
     *   }
     * })
     * 
    **/
    create<T extends MajorCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MajorCreateArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Majors.
     * @param {MajorCreateManyArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MajorCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Majors and returns the data saved in the database.
     * @param {MajorCreateManyAndReturnArgs} args - Arguments to create many Majors.
     * @example
     * // Create many Majors
     * const major = await prisma.major.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Majors and only return the `id`
     * const majorWithIdOnly = await prisma.major.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MajorCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Major.
     * @param {MajorDeleteArgs} args - Arguments to delete one Major.
     * @example
     * // Delete one Major
     * const Major = await prisma.major.delete({
     *   where: {
     *     // ... filter to delete one Major
     *   }
     * })
     * 
    **/
    delete<T extends MajorDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MajorDeleteArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Major.
     * @param {MajorUpdateArgs} args - Arguments to update one Major.
     * @example
     * // Update one Major
     * const major = await prisma.major.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MajorUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpdateArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Majors.
     * @param {MajorDeleteManyArgs} args - Arguments to filter Majors to delete.
     * @example
     * // Delete a few Majors
     * const { count } = await prisma.major.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MajorDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MajorDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Majors
     * const major = await prisma.major.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MajorUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Major.
     * @param {MajorUpsertArgs} args - Arguments to update or create a Major.
     * @example
     * // Update or create a Major
     * const major = await prisma.major.upsert({
     *   create: {
     *     // ... data to create a Major
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Major we want to update
     *   }
     * })
    **/
    upsert<T extends MajorUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MajorUpsertArgs<ExtArgs>>
    ): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Majors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorCountArgs} args - Arguments to filter Majors to count.
     * @example
     * // Count the number of Majors
     * const count = await prisma.major.count({
     *   where: {
     *     // ... the filter for the Majors we want to count
     *   }
     * })
    **/
    count<T extends MajorCountArgs>(
      args?: Subset<T, MajorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MajorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MajorAggregateArgs>(args: Subset<T, MajorAggregateArgs>): Prisma.PrismaPromise<GetMajorAggregateType<T>>

    /**
     * Group by Major.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MajorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MajorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MajorGroupByArgs['orderBy'] }
        : { orderBy?: MajorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MajorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMajorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Major model
   */
  readonly fields: MajorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Major.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MajorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    categories<T extends Major$categoriesArgs<ExtArgs> = {}>(args?: Subset<T, Major$categoriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends Major$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Major$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Major model
   */ 
  interface MajorFieldRefs {
    readonly id: FieldRef<"Major", 'Int'>
    readonly majorNameTH: FieldRef<"Major", 'String'>
    readonly majorNameENG: FieldRef<"Major", 'String'>
    readonly majorYear: FieldRef<"Major", 'String'>
    readonly majorUnit: FieldRef<"Major", 'String'>
    readonly majorStatus: FieldRef<"Major", 'String'>
    readonly majorCode: FieldRef<"Major", 'String'>
    readonly majorSupervisor: FieldRef<"Major", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Major findUnique
   */
  export type MajorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findUniqueOrThrow
   */
  export type MajorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major findFirst
   */
  export type MajorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findFirstOrThrow
   */
  export type MajorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Major to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Majors.
     */
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major findMany
   */
  export type MajorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter, which Majors to fetch.
     */
    where?: MajorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Majors to fetch.
     */
    orderBy?: MajorOrderByWithRelationInput | MajorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Majors.
     */
    cursor?: MajorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Majors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Majors.
     */
    skip?: number
    distinct?: MajorScalarFieldEnum | MajorScalarFieldEnum[]
  }

  /**
   * Major create
   */
  export type MajorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to create a Major.
     */
    data: XOR<MajorCreateInput, MajorUncheckedCreateInput>
  }

  /**
   * Major createMany
   */
  export type MajorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Major createManyAndReturn
   */
  export type MajorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Majors.
     */
    data: MajorCreateManyInput | MajorCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Major update
   */
  export type MajorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The data needed to update a Major.
     */
    data: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
    /**
     * Choose, which Major to update.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major updateMany
   */
  export type MajorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Majors.
     */
    data: XOR<MajorUpdateManyMutationInput, MajorUncheckedUpdateManyInput>
    /**
     * Filter which Majors to update
     */
    where?: MajorWhereInput
  }

  /**
   * Major upsert
   */
  export type MajorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * The filter to search for the Major to update in case it exists.
     */
    where: MajorWhereUniqueInput
    /**
     * In case the Major found by the `where` argument doesn't exist, create a new Major with this data.
     */
    create: XOR<MajorCreateInput, MajorUncheckedCreateInput>
    /**
     * In case the Major was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MajorUpdateInput, MajorUncheckedUpdateInput>
  }

  /**
   * Major delete
   */
  export type MajorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
    /**
     * Filter which Major to delete.
     */
    where: MajorWhereUniqueInput
  }

  /**
   * Major deleteMany
   */
  export type MajorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Majors to delete
     */
    where?: MajorWhereInput
  }

  /**
   * Major.categories
   */
  export type Major$categoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    cursor?: CategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Major.courses
   */
  export type Major$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Major without action
   */
  export type MajorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Major
     */
    select?: MajorSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MajorInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    id: number | null
    majorId: number | null
  }

  export type CategorySumAggregateOutputType = {
    id: number | null
    majorId: number | null
  }

  export type CategoryMinAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryUnit: string | null
    majorId: number | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: number | null
    categoryName: string | null
    categoryUnit: string | null
    majorId: number | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    categoryName: number
    categoryUnit: number
    majorId: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    id?: true
    majorId?: true
  }

  export type CategorySumAggregateInputType = {
    id?: true
    majorId?: true
  }

  export type CategoryMinAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    categoryName?: true
    categoryUnit?: true
    majorId?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: number
    categoryName: string
    categoryUnit: string
    majorId: number
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    groups?: boolean | Category$groupsArgs<ExtArgs>
    courses?: boolean | Category$coursesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    categoryName?: boolean
    categoryUnit?: boolean
    majorId?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    groups?: boolean | Category$groupsArgs<ExtArgs>
    courses?: boolean | Category$coursesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      major: Prisma.$MajorPayload<ExtArgs>
      groups: Prisma.$GroupPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoryName: string
      categoryUnit: string
      majorId: number
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `id`
     * const categoryWithIdOnly = await prisma.category.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    groups<T extends Category$groupsArgs<ExtArgs> = {}>(args?: Subset<T, Category$groupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends Category$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Category$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'Int'>
    readonly categoryName: FieldRef<"Category", 'String'>
    readonly categoryUnit: FieldRef<"Category", 'String'>
    readonly majorId: FieldRef<"Category", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.groups
   */
  export type Category$groupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Category.courses
   */
  export type Category$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Group
   */

  export type AggregateGroup = {
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  export type GroupAvgAggregateOutputType = {
    id: number | null
    categoryId: number | null
    parentGroupId: number | null
  }

  export type GroupSumAggregateOutputType = {
    id: number | null
    categoryId: number | null
    parentGroupId: number | null
  }

  export type GroupMinAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupUnit: string | null
    categoryId: number | null
    parentGroupId: number | null
  }

  export type GroupMaxAggregateOutputType = {
    id: number | null
    groupName: string | null
    groupUnit: string | null
    categoryId: number | null
    parentGroupId: number | null
  }

  export type GroupCountAggregateOutputType = {
    id: number
    groupName: number
    groupUnit: number
    categoryId: number
    parentGroupId: number
    _all: number
  }


  export type GroupAvgAggregateInputType = {
    id?: true
    categoryId?: true
    parentGroupId?: true
  }

  export type GroupSumAggregateInputType = {
    id?: true
    categoryId?: true
    parentGroupId?: true
  }

  export type GroupMinAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
    parentGroupId?: true
  }

  export type GroupMaxAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
    parentGroupId?: true
  }

  export type GroupCountAggregateInputType = {
    id?: true
    groupName?: true
    groupUnit?: true
    categoryId?: true
    parentGroupId?: true
    _all?: true
  }

  export type GroupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Group to aggregate.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Groups
    **/
    _count?: true | GroupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GroupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GroupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMaxAggregateInputType
  }

  export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
        [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroup[P]>
      : GetScalarType<T[P], AggregateGroup[P]>
  }




  export type GroupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithAggregationInput | GroupOrderByWithAggregationInput[]
    by: GroupScalarFieldEnum[] | GroupScalarFieldEnum
    having?: GroupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupCountAggregateInputType | true
    _avg?: GroupAvgAggregateInputType
    _sum?: GroupSumAggregateInputType
    _min?: GroupMinAggregateInputType
    _max?: GroupMaxAggregateInputType
  }

  export type GroupGroupByOutputType = {
    id: number
    groupName: string
    groupUnit: string
    categoryId: number
    parentGroupId: number | null
    _count: GroupCountAggregateOutputType | null
    _avg: GroupAvgAggregateOutputType | null
    _sum: GroupSumAggregateOutputType | null
    _min: GroupMinAggregateOutputType | null
    _max: GroupMaxAggregateOutputType | null
  }

  type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GroupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupGroupByOutputType[P]>
            : GetScalarType<T[P], GroupGroupByOutputType[P]>
        }
      >
    >


  export type GroupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
    parentGroupId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    parentGroup?: boolean | Group$parentGroupArgs<ExtArgs>
    subgroups?: boolean | Group$subgroupsArgs<ExtArgs>
    courses?: boolean | Group$coursesArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
    parentGroupId?: boolean
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    parentGroup?: boolean | Group$parentGroupArgs<ExtArgs>
  }, ExtArgs["result"]["group"]>

  export type GroupSelectScalar = {
    id?: boolean
    groupName?: boolean
    groupUnit?: boolean
    categoryId?: boolean
    parentGroupId?: boolean
  }

  export type GroupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    parentGroup?: boolean | Group$parentGroupArgs<ExtArgs>
    subgroups?: boolean | Group$subgroupsArgs<ExtArgs>
    courses?: boolean | Group$coursesArgs<ExtArgs>
    _count?: boolean | GroupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GroupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    parentGroup?: boolean | Group$parentGroupArgs<ExtArgs>
  }

  export type $GroupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Group"
    objects: {
      category: Prisma.$CategoryPayload<ExtArgs>
      parentGroup: Prisma.$GroupPayload<ExtArgs> | null
      subgroups: Prisma.$GroupPayload<ExtArgs>[]
      courses: Prisma.$CoursePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      groupName: string
      groupUnit: string
      categoryId: number
      parentGroupId: number | null
    }, ExtArgs["result"]["group"]>
    composites: {}
  }

  type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = $Result.GetResult<Prisma.$GroupPayload, S>

  type GroupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GroupCountAggregateInputType | true
    }

  export interface GroupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
    /**
     * Find zero or one Group that matches the filter.
     * @param {GroupFindUniqueArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Group that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Group that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Group that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
     * @example
     * // Get one Group
     * const group = await prisma.group.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GroupFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Groups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Groups
     * const groups = await prisma.group.findMany()
     * 
     * // Get first 10 Groups
     * const groups = await prisma.group.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Group.
     * @param {GroupCreateArgs} args - Arguments to create a Group.
     * @example
     * // Create one Group
     * const Group = await prisma.group.create({
     *   data: {
     *     // ... data to create a Group
     *   }
     * })
     * 
    **/
    create<T extends GroupCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupCreateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Groups.
     * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends GroupCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Groups and returns the data saved in the database.
     * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
     * @example
     * // Create many Groups
     * const group = await prisma.group.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Groups and only return the `id`
     * const groupWithIdOnly = await prisma.group.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends GroupCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Group.
     * @param {GroupDeleteArgs} args - Arguments to delete one Group.
     * @example
     * // Delete one Group
     * const Group = await prisma.group.delete({
     *   where: {
     *     // ... filter to delete one Group
     *   }
     * })
     * 
    **/
    delete<T extends GroupDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GroupDeleteArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Group.
     * @param {GroupUpdateArgs} args - Arguments to update one Group.
     * @example
     * // Update one Group
     * const group = await prisma.group.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Groups.
     * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
     * @example
     * // Delete a few Groups
     * const { count } = await prisma.group.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Groups
     * const group = await prisma.group.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Group.
     * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
     * @example
     * // Update or create a Group
     * const group = await prisma.group.upsert({
     *   create: {
     *     // ... data to create a Group
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Group we want to update
     *   }
     * })
    **/
    upsert<T extends GroupUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GroupUpsertArgs<ExtArgs>>
    ): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Groups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupCountArgs} args - Arguments to filter Groups to count.
     * @example
     * // Count the number of Groups
     * const count = await prisma.group.count({
     *   where: {
     *     // ... the filter for the Groups we want to count
     *   }
     * })
    **/
    count<T extends GroupCountArgs>(
      args?: Subset<T, GroupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupAggregateArgs>(args: Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

    /**
     * Group by Group.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupGroupByArgs['orderBy'] }
        : { orderBy?: GroupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Group model
   */
  readonly fields: GroupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Group.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GroupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    parentGroup<T extends Group$parentGroupArgs<ExtArgs> = {}>(args?: Subset<T, Group$parentGroupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    subgroups<T extends Group$subgroupsArgs<ExtArgs> = {}>(args?: Subset<T, Group$subgroupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findMany'> | Null>;

    courses<T extends Group$coursesArgs<ExtArgs> = {}>(args?: Subset<T, Group$coursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Group model
   */ 
  interface GroupFieldRefs {
    readonly id: FieldRef<"Group", 'Int'>
    readonly groupName: FieldRef<"Group", 'String'>
    readonly groupUnit: FieldRef<"Group", 'String'>
    readonly categoryId: FieldRef<"Group", 'Int'>
    readonly parentGroupId: FieldRef<"Group", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Group findUnique
   */
  export type GroupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findUniqueOrThrow
   */
  export type GroupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group findFirst
   */
  export type GroupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findFirstOrThrow
   */
  export type GroupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Group to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Groups.
     */
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group findMany
   */
  export type GroupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter, which Groups to fetch.
     */
    where?: GroupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Groups to fetch.
     */
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Groups.
     */
    cursor?: GroupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Groups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Groups.
     */
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group create
   */
  export type GroupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to create a Group.
     */
    data: XOR<GroupCreateInput, GroupUncheckedCreateInput>
  }

  /**
   * Group createMany
   */
  export type GroupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Group createManyAndReturn
   */
  export type GroupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Groups.
     */
    data: GroupCreateManyInput | GroupCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Group update
   */
  export type GroupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The data needed to update a Group.
     */
    data: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
    /**
     * Choose, which Group to update.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group updateMany
   */
  export type GroupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Groups.
     */
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyInput>
    /**
     * Filter which Groups to update
     */
    where?: GroupWhereInput
  }

  /**
   * Group upsert
   */
  export type GroupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * The filter to search for the Group to update in case it exists.
     */
    where: GroupWhereUniqueInput
    /**
     * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
     */
    create: XOR<GroupCreateInput, GroupUncheckedCreateInput>
    /**
     * In case the Group was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GroupUpdateInput, GroupUncheckedUpdateInput>
  }

  /**
   * Group delete
   */
  export type GroupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    /**
     * Filter which Group to delete.
     */
    where: GroupWhereUniqueInput
  }

  /**
   * Group deleteMany
   */
  export type GroupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Groups to delete
     */
    where?: GroupWhereInput
  }

  /**
   * Group.parentGroup
   */
  export type Group$parentGroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * Group.subgroups
   */
  export type Group$subgroupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
    orderBy?: GroupOrderByWithRelationInput | GroupOrderByWithRelationInput[]
    cursor?: GroupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GroupScalarFieldEnum | GroupScalarFieldEnum[]
  }

  /**
   * Group.courses
   */
  export type Group$coursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Group without action
   */
  export type GroupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    id: number | null
    courseUnit: number | null
    majorId: number | null
    categoryId: number | null
    groupId: number | null
  }

  export type CourseSumAggregateOutputType = {
    id: number | null
    courseUnit: number | null
    majorId: number | null
    categoryId: number | null
    groupId: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseNameTH: string | null
    courseNameENG: string | null
    courseYear: string | null
    courseUnit: number | null
    majorId: number | null
    categoryId: number | null
    groupId: number | null
  }

  export type CourseMaxAggregateOutputType = {
    id: number | null
    courseCode: string | null
    courseNameTH: string | null
    courseNameENG: string | null
    courseYear: string | null
    courseUnit: number | null
    majorId: number | null
    categoryId: number | null
    groupId: number | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    courseCode: number
    courseNameTH: number
    courseNameENG: number
    courseYear: number
    courseUnit: number
    majorId: number
    categoryId: number
    groupId: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    id?: true
    courseUnit?: true
    majorId?: true
    categoryId?: true
    groupId?: true
  }

  export type CourseSumAggregateInputType = {
    id?: true
    courseUnit?: true
    majorId?: true
    categoryId?: true
    groupId?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    categoryId?: true
    groupId?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    categoryId?: true
    groupId?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    courseCode?: true
    courseNameTH?: true
    courseNameENG?: true
    courseYear?: true
    courseUnit?: true
    majorId?: true
    categoryId?: true
    groupId?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    categoryId: number
    groupId: number | null
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    categoryId?: boolean
    groupId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    group?: boolean | Course$groupArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    categoryId?: boolean
    groupId?: boolean
    major?: boolean | MajorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    group?: boolean | Course$groupArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    courseCode?: boolean
    courseNameTH?: boolean
    courseNameENG?: boolean
    courseYear?: boolean
    courseUnit?: boolean
    majorId?: boolean
    categoryId?: boolean
    groupId?: boolean
  }

  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    group?: boolean | Course$groupArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    major?: boolean | MajorDefaultArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    group?: boolean | Course$groupArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      major: Prisma.$MajorPayload<ExtArgs>
      category: Prisma.$CategoryPayload<ExtArgs>
      group: Prisma.$GroupPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      courseCode: string
      courseNameTH: string
      courseNameENG: string
      courseYear: string
      courseUnit: number
      majorId: number
      categoryId: number
      groupId: number | null
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CourseFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CourseFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CourseFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
    **/
    create<T extends CourseCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseCreateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends CourseCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
    **/
    delete<T extends CourseDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CourseUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CourseDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CourseUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
    **/
    upsert<T extends CourseUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>
    ): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    major<T extends MajorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MajorDefaultArgs<ExtArgs>>): Prisma__MajorClient<$Result.GetResult<Prisma.$MajorPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    group<T extends Course$groupArgs<ExtArgs> = {}>(args?: Subset<T, Course$groupArgs<ExtArgs>>): Prisma__GroupClient<$Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Course model
   */ 
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'Int'>
    readonly courseCode: FieldRef<"Course", 'String'>
    readonly courseNameTH: FieldRef<"Course", 'String'>
    readonly courseNameENG: FieldRef<"Course", 'String'>
    readonly courseYear: FieldRef<"Course", 'String'>
    readonly courseUnit: FieldRef<"Course", 'Int'>
    readonly majorId: FieldRef<"Course", 'Int'>
    readonly categoryId: FieldRef<"Course", 'Int'>
    readonly groupId: FieldRef<"Course", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
  }

  /**
   * Course.group
   */
  export type Course$groupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Group
     */
    select?: GroupSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GroupInclude<ExtArgs> | null
    where?: GroupWhereInput
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const AdminScalarFieldEnum: {
    Admin_id: 'Admin_id',
    A_fristname: 'A_fristname',
    A_lastname: 'A_lastname',
    A_username: 'A_username',
    A_password: 'A_password',
    role: 'role',
    A_phone: 'A_phone',
    A_email: 'A_email'
  };

  export type AdminScalarFieldEnum = (typeof AdminScalarFieldEnum)[keyof typeof AdminScalarFieldEnum]


  export const COURSE_INSTRUCTORScalarFieldEnum: {
    C_id: 'C_id',
    C_fristname: 'C_fristname',
    C_lastname: 'C_lastname',
    C_username: 'C_username',
    C_password: 'C_password',
    role: 'role',
    C_phone: 'C_phone',
    C_email: 'C_email'
  };

  export type COURSE_INSTRUCTORScalarFieldEnum = (typeof COURSE_INSTRUCTORScalarFieldEnum)[keyof typeof COURSE_INSTRUCTORScalarFieldEnum]


  export const StudentScalarFieldEnum: {
    S_id: 'S_id',
    S_fristname: 'S_fristname',
    S_lastname: 'S_lastname',
    S_username: 'S_username',
    S_password: 'S_password',
    role: 'role',
    S_phone: 'S_phone',
    S_email: 'S_email',
    room: 'room'
  };

  export type StudentScalarFieldEnum = (typeof StudentScalarFieldEnum)[keyof typeof StudentScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    T_id: 'T_id',
    T_fristname: 'T_fristname',
    T_lastname: 'T_lastname',
    T_username: 'T_username',
    T_password: 'T_password',
    role: 'role',
    T_phone: 'T_phone',
    T_email: 'T_email'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const ClassroomScalarFieldEnum: {
    roomname: 'roomname'
  };

  export type ClassroomScalarFieldEnum = (typeof ClassroomScalarFieldEnum)[keyof typeof ClassroomScalarFieldEnum]


  export const AdvisorScalarFieldEnum: {
    Advisor_id: 'Advisor_id',
    teacherId: 'teacherId',
    teacherfristName: 'teacherfristName',
    teacherlastName: 'teacherlastName',
    roomName: 'roomName'
  };

  export type AdvisorScalarFieldEnum = (typeof AdvisorScalarFieldEnum)[keyof typeof AdvisorScalarFieldEnum]


  export const MajorScalarFieldEnum: {
    id: 'id',
    majorNameTH: 'majorNameTH',
    majorNameENG: 'majorNameENG',
    majorYear: 'majorYear',
    majorUnit: 'majorUnit',
    majorStatus: 'majorStatus',
    majorCode: 'majorCode',
    majorSupervisor: 'majorSupervisor'
  };

  export type MajorScalarFieldEnum = (typeof MajorScalarFieldEnum)[keyof typeof MajorScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    categoryName: 'categoryName',
    categoryUnit: 'categoryUnit',
    majorId: 'majorId'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const GroupScalarFieldEnum: {
    id: 'id',
    groupName: 'groupName',
    groupUnit: 'groupUnit',
    categoryId: 'categoryId',
    parentGroupId: 'parentGroupId'
  };

  export type GroupScalarFieldEnum = (typeof GroupScalarFieldEnum)[keyof typeof GroupScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    courseCode: 'courseCode',
    courseNameTH: 'courseNameTH',
    courseNameENG: 'courseNameENG',
    courseYear: 'courseYear',
    courseUnit: 'courseUnit',
    majorId: 'majorId',
    categoryId: 'categoryId',
    groupId: 'groupId'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type AdminWhereInput = {
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    Admin_id?: IntFilter<"Admin"> | number
    A_fristname?: StringFilter<"Admin"> | string
    A_lastname?: StringFilter<"Admin"> | string
    A_username?: StringFilter<"Admin"> | string
    A_password?: StringFilter<"Admin"> | string
    role?: EnumRoleFilter<"Admin"> | $Enums.Role
    A_phone?: IntNullableFilter<"Admin"> | number | null
    A_email?: StringNullableFilter<"Admin"> | string | null
  }

  export type AdminOrderByWithRelationInput = {
    Admin_id?: SortOrder
    A_fristname?: SortOrder
    A_lastname?: SortOrder
    A_username?: SortOrder
    A_password?: SortOrder
    role?: SortOrder
    A_phone?: SortOrderInput | SortOrder
    A_email?: SortOrderInput | SortOrder
  }

  export type AdminWhereUniqueInput = Prisma.AtLeast<{
    Admin_id?: number
    AND?: AdminWhereInput | AdminWhereInput[]
    OR?: AdminWhereInput[]
    NOT?: AdminWhereInput | AdminWhereInput[]
    A_fristname?: StringFilter<"Admin"> | string
    A_lastname?: StringFilter<"Admin"> | string
    A_username?: StringFilter<"Admin"> | string
    A_password?: StringFilter<"Admin"> | string
    role?: EnumRoleFilter<"Admin"> | $Enums.Role
    A_phone?: IntNullableFilter<"Admin"> | number | null
    A_email?: StringNullableFilter<"Admin"> | string | null
  }, "Admin_id">

  export type AdminOrderByWithAggregationInput = {
    Admin_id?: SortOrder
    A_fristname?: SortOrder
    A_lastname?: SortOrder
    A_username?: SortOrder
    A_password?: SortOrder
    role?: SortOrder
    A_phone?: SortOrderInput | SortOrder
    A_email?: SortOrderInput | SortOrder
    _count?: AdminCountOrderByAggregateInput
    _avg?: AdminAvgOrderByAggregateInput
    _max?: AdminMaxOrderByAggregateInput
    _min?: AdminMinOrderByAggregateInput
    _sum?: AdminSumOrderByAggregateInput
  }

  export type AdminScalarWhereWithAggregatesInput = {
    AND?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    OR?: AdminScalarWhereWithAggregatesInput[]
    NOT?: AdminScalarWhereWithAggregatesInput | AdminScalarWhereWithAggregatesInput[]
    Admin_id?: IntWithAggregatesFilter<"Admin"> | number
    A_fristname?: StringWithAggregatesFilter<"Admin"> | string
    A_lastname?: StringWithAggregatesFilter<"Admin"> | string
    A_username?: StringWithAggregatesFilter<"Admin"> | string
    A_password?: StringWithAggregatesFilter<"Admin"> | string
    role?: EnumRoleWithAggregatesFilter<"Admin"> | $Enums.Role
    A_phone?: IntNullableWithAggregatesFilter<"Admin"> | number | null
    A_email?: StringNullableWithAggregatesFilter<"Admin"> | string | null
  }

  export type COURSE_INSTRUCTORWhereInput = {
    AND?: COURSE_INSTRUCTORWhereInput | COURSE_INSTRUCTORWhereInput[]
    OR?: COURSE_INSTRUCTORWhereInput[]
    NOT?: COURSE_INSTRUCTORWhereInput | COURSE_INSTRUCTORWhereInput[]
    C_id?: IntFilter<"COURSE_INSTRUCTOR"> | number
    C_fristname?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_lastname?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_username?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_password?: StringFilter<"COURSE_INSTRUCTOR"> | string
    role?: EnumRoleFilter<"COURSE_INSTRUCTOR"> | $Enums.Role
    C_phone?: IntNullableFilter<"COURSE_INSTRUCTOR"> | number | null
    C_email?: StringNullableFilter<"COURSE_INSTRUCTOR"> | string | null
  }

  export type COURSE_INSTRUCTOROrderByWithRelationInput = {
    C_id?: SortOrder
    C_fristname?: SortOrder
    C_lastname?: SortOrder
    C_username?: SortOrder
    C_password?: SortOrder
    role?: SortOrder
    C_phone?: SortOrderInput | SortOrder
    C_email?: SortOrderInput | SortOrder
  }

  export type COURSE_INSTRUCTORWhereUniqueInput = Prisma.AtLeast<{
    C_id?: number
    AND?: COURSE_INSTRUCTORWhereInput | COURSE_INSTRUCTORWhereInput[]
    OR?: COURSE_INSTRUCTORWhereInput[]
    NOT?: COURSE_INSTRUCTORWhereInput | COURSE_INSTRUCTORWhereInput[]
    C_fristname?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_lastname?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_username?: StringFilter<"COURSE_INSTRUCTOR"> | string
    C_password?: StringFilter<"COURSE_INSTRUCTOR"> | string
    role?: EnumRoleFilter<"COURSE_INSTRUCTOR"> | $Enums.Role
    C_phone?: IntNullableFilter<"COURSE_INSTRUCTOR"> | number | null
    C_email?: StringNullableFilter<"COURSE_INSTRUCTOR"> | string | null
  }, "C_id">

  export type COURSE_INSTRUCTOROrderByWithAggregationInput = {
    C_id?: SortOrder
    C_fristname?: SortOrder
    C_lastname?: SortOrder
    C_username?: SortOrder
    C_password?: SortOrder
    role?: SortOrder
    C_phone?: SortOrderInput | SortOrder
    C_email?: SortOrderInput | SortOrder
    _count?: COURSE_INSTRUCTORCountOrderByAggregateInput
    _avg?: COURSE_INSTRUCTORAvgOrderByAggregateInput
    _max?: COURSE_INSTRUCTORMaxOrderByAggregateInput
    _min?: COURSE_INSTRUCTORMinOrderByAggregateInput
    _sum?: COURSE_INSTRUCTORSumOrderByAggregateInput
  }

  export type COURSE_INSTRUCTORScalarWhereWithAggregatesInput = {
    AND?: COURSE_INSTRUCTORScalarWhereWithAggregatesInput | COURSE_INSTRUCTORScalarWhereWithAggregatesInput[]
    OR?: COURSE_INSTRUCTORScalarWhereWithAggregatesInput[]
    NOT?: COURSE_INSTRUCTORScalarWhereWithAggregatesInput | COURSE_INSTRUCTORScalarWhereWithAggregatesInput[]
    C_id?: IntWithAggregatesFilter<"COURSE_INSTRUCTOR"> | number
    C_fristname?: StringWithAggregatesFilter<"COURSE_INSTRUCTOR"> | string
    C_lastname?: StringWithAggregatesFilter<"COURSE_INSTRUCTOR"> | string
    C_username?: StringWithAggregatesFilter<"COURSE_INSTRUCTOR"> | string
    C_password?: StringWithAggregatesFilter<"COURSE_INSTRUCTOR"> | string
    role?: EnumRoleWithAggregatesFilter<"COURSE_INSTRUCTOR"> | $Enums.Role
    C_phone?: IntNullableWithAggregatesFilter<"COURSE_INSTRUCTOR"> | number | null
    C_email?: StringNullableWithAggregatesFilter<"COURSE_INSTRUCTOR"> | string | null
  }

  export type StudentWhereInput = {
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    S_id?: StringFilter<"Student"> | string
    S_fristname?: StringFilter<"Student"> | string
    S_lastname?: StringFilter<"Student"> | string
    S_username?: StringFilter<"Student"> | string
    S_password?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    S_phone?: StringNullableFilter<"Student"> | string | null
    S_email?: StringNullableFilter<"Student"> | string | null
    room?: StringFilter<"Student"> | string
    classroom?: XOR<ClassroomRelationFilter, ClassroomWhereInput>
  }

  export type StudentOrderByWithRelationInput = {
    S_id?: SortOrder
    S_fristname?: SortOrder
    S_lastname?: SortOrder
    S_username?: SortOrder
    S_password?: SortOrder
    role?: SortOrder
    S_phone?: SortOrderInput | SortOrder
    S_email?: SortOrderInput | SortOrder
    room?: SortOrder
    classroom?: ClassroomOrderByWithRelationInput
  }

  export type StudentWhereUniqueInput = Prisma.AtLeast<{
    S_id_S_username?: StudentS_idS_usernameCompoundUniqueInput
    AND?: StudentWhereInput | StudentWhereInput[]
    OR?: StudentWhereInput[]
    NOT?: StudentWhereInput | StudentWhereInput[]
    S_id?: StringFilter<"Student"> | string
    S_fristname?: StringFilter<"Student"> | string
    S_lastname?: StringFilter<"Student"> | string
    S_username?: StringFilter<"Student"> | string
    S_password?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    S_phone?: StringNullableFilter<"Student"> | string | null
    S_email?: StringNullableFilter<"Student"> | string | null
    room?: StringFilter<"Student"> | string
    classroom?: XOR<ClassroomRelationFilter, ClassroomWhereInput>
  }, "S_id_S_username">

  export type StudentOrderByWithAggregationInput = {
    S_id?: SortOrder
    S_fristname?: SortOrder
    S_lastname?: SortOrder
    S_username?: SortOrder
    S_password?: SortOrder
    role?: SortOrder
    S_phone?: SortOrderInput | SortOrder
    S_email?: SortOrderInput | SortOrder
    room?: SortOrder
    _count?: StudentCountOrderByAggregateInput
    _max?: StudentMaxOrderByAggregateInput
    _min?: StudentMinOrderByAggregateInput
  }

  export type StudentScalarWhereWithAggregatesInput = {
    AND?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    OR?: StudentScalarWhereWithAggregatesInput[]
    NOT?: StudentScalarWhereWithAggregatesInput | StudentScalarWhereWithAggregatesInput[]
    S_id?: StringWithAggregatesFilter<"Student"> | string
    S_fristname?: StringWithAggregatesFilter<"Student"> | string
    S_lastname?: StringWithAggregatesFilter<"Student"> | string
    S_username?: StringWithAggregatesFilter<"Student"> | string
    S_password?: StringWithAggregatesFilter<"Student"> | string
    role?: EnumRoleWithAggregatesFilter<"Student"> | $Enums.Role
    S_phone?: StringNullableWithAggregatesFilter<"Student"> | string | null
    S_email?: StringNullableWithAggregatesFilter<"Student"> | string | null
    room?: StringWithAggregatesFilter<"Student"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    T_id?: IntFilter<"Teacher"> | number
    T_fristname?: StringFilter<"Teacher"> | string
    T_lastname?: StringFilter<"Teacher"> | string
    T_username?: StringFilter<"Teacher"> | string
    T_password?: StringFilter<"Teacher"> | string
    role?: EnumRoleFilter<"Teacher"> | $Enums.Role
    T_phone?: IntNullableFilter<"Teacher"> | number | null
    T_email?: StringNullableFilter<"Teacher"> | string | null
    advisorrooms?: AdvisorListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    T_id?: SortOrder
    T_fristname?: SortOrder
    T_lastname?: SortOrder
    T_username?: SortOrder
    T_password?: SortOrder
    role?: SortOrder
    T_phone?: SortOrderInput | SortOrder
    T_email?: SortOrderInput | SortOrder
    advisorrooms?: AdvisorOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    T_id_T_fristname_T_lastname?: TeacherT_idT_fristnameT_lastnameCompoundUniqueInput
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    T_id?: IntFilter<"Teacher"> | number
    T_fristname?: StringFilter<"Teacher"> | string
    T_lastname?: StringFilter<"Teacher"> | string
    T_username?: StringFilter<"Teacher"> | string
    T_password?: StringFilter<"Teacher"> | string
    role?: EnumRoleFilter<"Teacher"> | $Enums.Role
    T_phone?: IntNullableFilter<"Teacher"> | number | null
    T_email?: StringNullableFilter<"Teacher"> | string | null
    advisorrooms?: AdvisorListRelationFilter
  }, "T_id_T_fristname_T_lastname">

  export type TeacherOrderByWithAggregationInput = {
    T_id?: SortOrder
    T_fristname?: SortOrder
    T_lastname?: SortOrder
    T_username?: SortOrder
    T_password?: SortOrder
    role?: SortOrder
    T_phone?: SortOrderInput | SortOrder
    T_email?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    T_id?: IntWithAggregatesFilter<"Teacher"> | number
    T_fristname?: StringWithAggregatesFilter<"Teacher"> | string
    T_lastname?: StringWithAggregatesFilter<"Teacher"> | string
    T_username?: StringWithAggregatesFilter<"Teacher"> | string
    T_password?: StringWithAggregatesFilter<"Teacher"> | string
    role?: EnumRoleWithAggregatesFilter<"Teacher"> | $Enums.Role
    T_phone?: IntNullableWithAggregatesFilter<"Teacher"> | number | null
    T_email?: StringNullableWithAggregatesFilter<"Teacher"> | string | null
  }

  export type ClassroomWhereInput = {
    AND?: ClassroomWhereInput | ClassroomWhereInput[]
    OR?: ClassroomWhereInput[]
    NOT?: ClassroomWhereInput | ClassroomWhereInput[]
    roomname?: StringFilter<"Classroom"> | string
    teachers?: AdvisorListRelationFilter
    students?: StudentListRelationFilter
  }

  export type ClassroomOrderByWithRelationInput = {
    roomname?: SortOrder
    teachers?: AdvisorOrderByRelationAggregateInput
    students?: StudentOrderByRelationAggregateInput
  }

  export type ClassroomWhereUniqueInput = Prisma.AtLeast<{
    roomname?: string
    AND?: ClassroomWhereInput | ClassroomWhereInput[]
    OR?: ClassroomWhereInput[]
    NOT?: ClassroomWhereInput | ClassroomWhereInput[]
    teachers?: AdvisorListRelationFilter
    students?: StudentListRelationFilter
  }, "roomname">

  export type ClassroomOrderByWithAggregationInput = {
    roomname?: SortOrder
    _count?: ClassroomCountOrderByAggregateInput
    _max?: ClassroomMaxOrderByAggregateInput
    _min?: ClassroomMinOrderByAggregateInput
  }

  export type ClassroomScalarWhereWithAggregatesInput = {
    AND?: ClassroomScalarWhereWithAggregatesInput | ClassroomScalarWhereWithAggregatesInput[]
    OR?: ClassroomScalarWhereWithAggregatesInput[]
    NOT?: ClassroomScalarWhereWithAggregatesInput | ClassroomScalarWhereWithAggregatesInput[]
    roomname?: StringWithAggregatesFilter<"Classroom"> | string
  }

  export type AdvisorWhereInput = {
    AND?: AdvisorWhereInput | AdvisorWhereInput[]
    OR?: AdvisorWhereInput[]
    NOT?: AdvisorWhereInput | AdvisorWhereInput[]
    Advisor_id?: IntFilter<"Advisor"> | number
    teacherId?: IntFilter<"Advisor"> | number
    teacherfristName?: StringFilter<"Advisor"> | string
    teacherlastName?: StringFilter<"Advisor"> | string
    roomName?: StringFilter<"Advisor"> | string
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
    classroom?: XOR<ClassroomRelationFilter, ClassroomWhereInput>
  }

  export type AdvisorOrderByWithRelationInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
    teacherfristName?: SortOrder
    teacherlastName?: SortOrder
    roomName?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
    classroom?: ClassroomOrderByWithRelationInput
  }

  export type AdvisorWhereUniqueInput = Prisma.AtLeast<{
    Advisor_id?: number
    AND?: AdvisorWhereInput | AdvisorWhereInput[]
    OR?: AdvisorWhereInput[]
    NOT?: AdvisorWhereInput | AdvisorWhereInput[]
    teacherId?: IntFilter<"Advisor"> | number
    teacherfristName?: StringFilter<"Advisor"> | string
    teacherlastName?: StringFilter<"Advisor"> | string
    roomName?: StringFilter<"Advisor"> | string
    teacher?: XOR<TeacherRelationFilter, TeacherWhereInput>
    classroom?: XOR<ClassroomRelationFilter, ClassroomWhereInput>
  }, "Advisor_id">

  export type AdvisorOrderByWithAggregationInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
    teacherfristName?: SortOrder
    teacherlastName?: SortOrder
    roomName?: SortOrder
    _count?: AdvisorCountOrderByAggregateInput
    _avg?: AdvisorAvgOrderByAggregateInput
    _max?: AdvisorMaxOrderByAggregateInput
    _min?: AdvisorMinOrderByAggregateInput
    _sum?: AdvisorSumOrderByAggregateInput
  }

  export type AdvisorScalarWhereWithAggregatesInput = {
    AND?: AdvisorScalarWhereWithAggregatesInput | AdvisorScalarWhereWithAggregatesInput[]
    OR?: AdvisorScalarWhereWithAggregatesInput[]
    NOT?: AdvisorScalarWhereWithAggregatesInput | AdvisorScalarWhereWithAggregatesInput[]
    Advisor_id?: IntWithAggregatesFilter<"Advisor"> | number
    teacherId?: IntWithAggregatesFilter<"Advisor"> | number
    teacherfristName?: StringWithAggregatesFilter<"Advisor"> | string
    teacherlastName?: StringWithAggregatesFilter<"Advisor"> | string
    roomName?: StringWithAggregatesFilter<"Advisor"> | string
  }

  export type MajorWhereInput = {
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    id?: IntFilter<"Major"> | number
    majorNameTH?: StringFilter<"Major"> | string
    majorNameENG?: StringFilter<"Major"> | string
    majorYear?: StringFilter<"Major"> | string
    majorUnit?: StringFilter<"Major"> | string
    majorStatus?: StringFilter<"Major"> | string
    majorCode?: StringFilter<"Major"> | string
    majorSupervisor?: StringFilter<"Major"> | string
    categories?: CategoryListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type MajorOrderByWithRelationInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
    categories?: CategoryOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type MajorWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MajorWhereInput | MajorWhereInput[]
    OR?: MajorWhereInput[]
    NOT?: MajorWhereInput | MajorWhereInput[]
    majorNameTH?: StringFilter<"Major"> | string
    majorNameENG?: StringFilter<"Major"> | string
    majorYear?: StringFilter<"Major"> | string
    majorUnit?: StringFilter<"Major"> | string
    majorStatus?: StringFilter<"Major"> | string
    majorCode?: StringFilter<"Major"> | string
    majorSupervisor?: StringFilter<"Major"> | string
    categories?: CategoryListRelationFilter
    courses?: CourseListRelationFilter
  }, "id">

  export type MajorOrderByWithAggregationInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
    _count?: MajorCountOrderByAggregateInput
    _avg?: MajorAvgOrderByAggregateInput
    _max?: MajorMaxOrderByAggregateInput
    _min?: MajorMinOrderByAggregateInput
    _sum?: MajorSumOrderByAggregateInput
  }

  export type MajorScalarWhereWithAggregatesInput = {
    AND?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    OR?: MajorScalarWhereWithAggregatesInput[]
    NOT?: MajorScalarWhereWithAggregatesInput | MajorScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Major"> | number
    majorNameTH?: StringWithAggregatesFilter<"Major"> | string
    majorNameENG?: StringWithAggregatesFilter<"Major"> | string
    majorYear?: StringWithAggregatesFilter<"Major"> | string
    majorUnit?: StringWithAggregatesFilter<"Major"> | string
    majorStatus?: StringWithAggregatesFilter<"Major"> | string
    majorCode?: StringWithAggregatesFilter<"Major"> | string
    majorSupervisor?: StringWithAggregatesFilter<"Major"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: IntFilter<"Category"> | number
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    groups?: GroupListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
    major?: MajorOrderByWithRelationInput
    groups?: GroupOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    groups?: GroupListRelationFilter
    courses?: CourseListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Category"> | number
    categoryName?: StringWithAggregatesFilter<"Category"> | string
    categoryUnit?: StringWithAggregatesFilter<"Category"> | string
    majorId?: IntWithAggregatesFilter<"Category"> | number
  }

  export type GroupWhereInput = {
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    id?: IntFilter<"Group"> | number
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
    parentGroupId?: IntNullableFilter<"Group"> | number | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    parentGroup?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    subgroups?: GroupListRelationFilter
    courses?: CourseListRelationFilter
  }

  export type GroupOrderByWithRelationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrderInput | SortOrder
    category?: CategoryOrderByWithRelationInput
    parentGroup?: GroupOrderByWithRelationInput
    subgroups?: GroupOrderByRelationAggregateInput
    courses?: CourseOrderByRelationAggregateInput
  }

  export type GroupWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GroupWhereInput | GroupWhereInput[]
    OR?: GroupWhereInput[]
    NOT?: GroupWhereInput | GroupWhereInput[]
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
    parentGroupId?: IntNullableFilter<"Group"> | number | null
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    parentGroup?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
    subgroups?: GroupListRelationFilter
    courses?: CourseListRelationFilter
  }, "id">

  export type GroupOrderByWithAggregationInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrderInput | SortOrder
    _count?: GroupCountOrderByAggregateInput
    _avg?: GroupAvgOrderByAggregateInput
    _max?: GroupMaxOrderByAggregateInput
    _min?: GroupMinOrderByAggregateInput
    _sum?: GroupSumOrderByAggregateInput
  }

  export type GroupScalarWhereWithAggregatesInput = {
    AND?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    OR?: GroupScalarWhereWithAggregatesInput[]
    NOT?: GroupScalarWhereWithAggregatesInput | GroupScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Group"> | number
    groupName?: StringWithAggregatesFilter<"Group"> | string
    groupUnit?: StringWithAggregatesFilter<"Group"> | string
    categoryId?: IntWithAggregatesFilter<"Group"> | number
    parentGroupId?: IntNullableWithAggregatesFilter<"Group"> | number | null
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: IntFilter<"Course"> | number
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    categoryId?: IntFilter<"Course"> | number
    groupId?: IntNullableFilter<"Course"> | number | null
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    major?: MajorOrderByWithRelationInput
    category?: CategoryOrderByWithRelationInput
    group?: GroupOrderByWithRelationInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    categoryId?: IntFilter<"Course"> | number
    groupId?: IntNullableFilter<"Course"> | number | null
    major?: XOR<MajorRelationFilter, MajorWhereInput>
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    group?: XOR<GroupNullableRelationFilter, GroupWhereInput> | null
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrderInput | SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Course"> | number
    courseCode?: StringWithAggregatesFilter<"Course"> | string
    courseNameTH?: StringWithAggregatesFilter<"Course"> | string
    courseNameENG?: StringWithAggregatesFilter<"Course"> | string
    courseYear?: StringWithAggregatesFilter<"Course"> | string
    courseUnit?: IntWithAggregatesFilter<"Course"> | number
    majorId?: IntWithAggregatesFilter<"Course"> | number
    categoryId?: IntWithAggregatesFilter<"Course"> | number
    groupId?: IntNullableWithAggregatesFilter<"Course"> | number | null
  }

  export type AdminCreateInput = {
    A_fristname: string
    A_lastname: string
    A_username: string
    A_password: string
    role?: $Enums.Role
    A_phone?: number | null
    A_email?: string | null
  }

  export type AdminUncheckedCreateInput = {
    Admin_id?: number
    A_fristname: string
    A_lastname: string
    A_username: string
    A_password: string
    role?: $Enums.Role
    A_phone?: number | null
    A_email?: string | null
  }

  export type AdminUpdateInput = {
    A_fristname?: StringFieldUpdateOperationsInput | string
    A_lastname?: StringFieldUpdateOperationsInput | string
    A_username?: StringFieldUpdateOperationsInput | string
    A_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    A_phone?: NullableIntFieldUpdateOperationsInput | number | null
    A_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminUncheckedUpdateInput = {
    Admin_id?: IntFieldUpdateOperationsInput | number
    A_fristname?: StringFieldUpdateOperationsInput | string
    A_lastname?: StringFieldUpdateOperationsInput | string
    A_username?: StringFieldUpdateOperationsInput | string
    A_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    A_phone?: NullableIntFieldUpdateOperationsInput | number | null
    A_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminCreateManyInput = {
    Admin_id?: number
    A_fristname: string
    A_lastname: string
    A_username: string
    A_password: string
    role?: $Enums.Role
    A_phone?: number | null
    A_email?: string | null
  }

  export type AdminUpdateManyMutationInput = {
    A_fristname?: StringFieldUpdateOperationsInput | string
    A_lastname?: StringFieldUpdateOperationsInput | string
    A_username?: StringFieldUpdateOperationsInput | string
    A_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    A_phone?: NullableIntFieldUpdateOperationsInput | number | null
    A_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AdminUncheckedUpdateManyInput = {
    Admin_id?: IntFieldUpdateOperationsInput | number
    A_fristname?: StringFieldUpdateOperationsInput | string
    A_lastname?: StringFieldUpdateOperationsInput | string
    A_username?: StringFieldUpdateOperationsInput | string
    A_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    A_phone?: NullableIntFieldUpdateOperationsInput | number | null
    A_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type COURSE_INSTRUCTORCreateInput = {
    C_fristname: string
    C_lastname: string
    C_username: string
    C_password: string
    role?: $Enums.Role
    C_phone?: number | null
    C_email?: string | null
  }

  export type COURSE_INSTRUCTORUncheckedCreateInput = {
    C_id?: number
    C_fristname: string
    C_lastname: string
    C_username: string
    C_password: string
    role?: $Enums.Role
    C_phone?: number | null
    C_email?: string | null
  }

  export type COURSE_INSTRUCTORUpdateInput = {
    C_fristname?: StringFieldUpdateOperationsInput | string
    C_lastname?: StringFieldUpdateOperationsInput | string
    C_username?: StringFieldUpdateOperationsInput | string
    C_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    C_phone?: NullableIntFieldUpdateOperationsInput | number | null
    C_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type COURSE_INSTRUCTORUncheckedUpdateInput = {
    C_id?: IntFieldUpdateOperationsInput | number
    C_fristname?: StringFieldUpdateOperationsInput | string
    C_lastname?: StringFieldUpdateOperationsInput | string
    C_username?: StringFieldUpdateOperationsInput | string
    C_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    C_phone?: NullableIntFieldUpdateOperationsInput | number | null
    C_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type COURSE_INSTRUCTORCreateManyInput = {
    C_id?: number
    C_fristname: string
    C_lastname: string
    C_username: string
    C_password: string
    role?: $Enums.Role
    C_phone?: number | null
    C_email?: string | null
  }

  export type COURSE_INSTRUCTORUpdateManyMutationInput = {
    C_fristname?: StringFieldUpdateOperationsInput | string
    C_lastname?: StringFieldUpdateOperationsInput | string
    C_username?: StringFieldUpdateOperationsInput | string
    C_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    C_phone?: NullableIntFieldUpdateOperationsInput | number | null
    C_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type COURSE_INSTRUCTORUncheckedUpdateManyInput = {
    C_id?: IntFieldUpdateOperationsInput | number
    C_fristname?: StringFieldUpdateOperationsInput | string
    C_lastname?: StringFieldUpdateOperationsInput | string
    C_username?: StringFieldUpdateOperationsInput | string
    C_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    C_phone?: NullableIntFieldUpdateOperationsInput | number | null
    C_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentCreateInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
    classroom: ClassroomCreateNestedOneWithoutStudentsInput
  }

  export type StudentUncheckedCreateInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
    room: string
  }

  export type StudentUpdateInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
    classroom?: ClassroomUpdateOneRequiredWithoutStudentsNestedInput
  }

  export type StudentUncheckedUpdateInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
    room?: StringFieldUpdateOperationsInput | string
  }

  export type StudentCreateManyInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
    room: string
  }

  export type StudentUpdateManyMutationInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentUncheckedUpdateManyInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
    room?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    T_id?: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role?: $Enums.Role
    T_phone?: number | null
    T_email?: string | null
    advisorrooms?: AdvisorCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    T_id?: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role?: $Enums.Role
    T_phone?: number | null
    T_email?: string | null
    advisorrooms?: AdvisorUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
    advisorrooms?: AdvisorUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
    advisorrooms?: AdvisorUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    T_id?: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role?: $Enums.Role
    T_phone?: number | null
    T_email?: string | null
  }

  export type TeacherUpdateManyMutationInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateManyInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClassroomCreateInput = {
    roomname: string
    teachers?: AdvisorCreateNestedManyWithoutClassroomInput
    students?: StudentCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomUncheckedCreateInput = {
    roomname: string
    teachers?: AdvisorUncheckedCreateNestedManyWithoutClassroomInput
    students?: StudentUncheckedCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomUpdateInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    teachers?: AdvisorUpdateManyWithoutClassroomNestedInput
    students?: StudentUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomUncheckedUpdateInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    teachers?: AdvisorUncheckedUpdateManyWithoutClassroomNestedInput
    students?: StudentUncheckedUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomCreateManyInput = {
    roomname: string
  }

  export type ClassroomUpdateManyMutationInput = {
    roomname?: StringFieldUpdateOperationsInput | string
  }

  export type ClassroomUncheckedUpdateManyInput = {
    roomname?: StringFieldUpdateOperationsInput | string
  }

  export type AdvisorCreateInput = {
    teacher: TeacherCreateNestedOneWithoutAdvisorroomsInput
    classroom: ClassroomCreateNestedOneWithoutTeachersInput
  }

  export type AdvisorUncheckedCreateInput = {
    Advisor_id?: number
    teacherId: number
    teacherfristName: string
    teacherlastName: string
    roomName: string
  }

  export type AdvisorUpdateInput = {
    teacher?: TeacherUpdateOneRequiredWithoutAdvisorroomsNestedInput
    classroom?: ClassroomUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type AdvisorUncheckedUpdateInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherfristName?: StringFieldUpdateOperationsInput | string
    teacherlastName?: StringFieldUpdateOperationsInput | string
    roomName?: StringFieldUpdateOperationsInput | string
  }

  export type AdvisorCreateManyInput = {
    Advisor_id?: number
    teacherId: number
    teacherfristName: string
    teacherlastName: string
    roomName: string
  }

  export type AdvisorUpdateManyMutationInput = {

  }

  export type AdvisorUncheckedUpdateManyInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherfristName?: StringFieldUpdateOperationsInput | string
    teacherlastName?: StringFieldUpdateOperationsInput | string
    roomName?: StringFieldUpdateOperationsInput | string
  }

  export type MajorCreateInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    categories?: CategoryCreateNestedManyWithoutMajorInput
    courses?: CourseCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    categories?: CategoryUncheckedCreateNestedManyWithoutMajorInput
    courses?: CourseUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorUpdateInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutMajorNestedInput
    courses?: CourseUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutMajorNestedInput
    courses?: CourseUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type MajorCreateManyInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
  }

  export type MajorUpdateManyMutationInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
  }

  export type MajorUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoriesInput
    groups?: GroupCreateNestedManyWithoutCategoryInput
    courses?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    groups?: GroupUncheckedCreateNestedManyWithoutCategoryInput
    courses?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoriesNestedInput
    groups?: GroupUpdateManyWithoutCategoryNestedInput
    courses?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    groups?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
    courses?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
  }

  export type CategoryUpdateManyMutationInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
  }

  export type GroupCreateInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupsInput
    parentGroup?: GroupCreateNestedOneWithoutSubgroupsInput
    subgroups?: GroupCreateNestedManyWithoutParentGroupInput
    courses?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    parentGroupId?: number | null
    subgroups?: GroupUncheckedCreateNestedManyWithoutParentGroupInput
    courses?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupUpdateInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupsNestedInput
    parentGroup?: GroupUpdateOneWithoutSubgroupsNestedInput
    subgroups?: GroupUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
    subgroups?: GroupUncheckedUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupCreateManyInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    parentGroupId?: number | null
  }

  export type GroupUpdateManyMutationInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
  }

  export type GroupUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseCreateInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCoursesInput
    category: CategoryCreateNestedOneWithoutCoursesInput
    group?: GroupCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    categoryId: number
    groupId?: number | null
  }

  export type CourseUpdateInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCoursesNestedInput
    group?: GroupUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseCreateManyInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    categoryId: number
    groupId?: number | null
  }

  export type CourseUpdateManyMutationInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AdminCountOrderByAggregateInput = {
    Admin_id?: SortOrder
    A_fristname?: SortOrder
    A_lastname?: SortOrder
    A_username?: SortOrder
    A_password?: SortOrder
    role?: SortOrder
    A_phone?: SortOrder
    A_email?: SortOrder
  }

  export type AdminAvgOrderByAggregateInput = {
    Admin_id?: SortOrder
    A_phone?: SortOrder
  }

  export type AdminMaxOrderByAggregateInput = {
    Admin_id?: SortOrder
    A_fristname?: SortOrder
    A_lastname?: SortOrder
    A_username?: SortOrder
    A_password?: SortOrder
    role?: SortOrder
    A_phone?: SortOrder
    A_email?: SortOrder
  }

  export type AdminMinOrderByAggregateInput = {
    Admin_id?: SortOrder
    A_fristname?: SortOrder
    A_lastname?: SortOrder
    A_username?: SortOrder
    A_password?: SortOrder
    role?: SortOrder
    A_phone?: SortOrder
    A_email?: SortOrder
  }

  export type AdminSumOrderByAggregateInput = {
    Admin_id?: SortOrder
    A_phone?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type COURSE_INSTRUCTORCountOrderByAggregateInput = {
    C_id?: SortOrder
    C_fristname?: SortOrder
    C_lastname?: SortOrder
    C_username?: SortOrder
    C_password?: SortOrder
    role?: SortOrder
    C_phone?: SortOrder
    C_email?: SortOrder
  }

  export type COURSE_INSTRUCTORAvgOrderByAggregateInput = {
    C_id?: SortOrder
    C_phone?: SortOrder
  }

  export type COURSE_INSTRUCTORMaxOrderByAggregateInput = {
    C_id?: SortOrder
    C_fristname?: SortOrder
    C_lastname?: SortOrder
    C_username?: SortOrder
    C_password?: SortOrder
    role?: SortOrder
    C_phone?: SortOrder
    C_email?: SortOrder
  }

  export type COURSE_INSTRUCTORMinOrderByAggregateInput = {
    C_id?: SortOrder
    C_fristname?: SortOrder
    C_lastname?: SortOrder
    C_username?: SortOrder
    C_password?: SortOrder
    role?: SortOrder
    C_phone?: SortOrder
    C_email?: SortOrder
  }

  export type COURSE_INSTRUCTORSumOrderByAggregateInput = {
    C_id?: SortOrder
    C_phone?: SortOrder
  }

  export type ClassroomRelationFilter = {
    is?: ClassroomWhereInput
    isNot?: ClassroomWhereInput
  }

  export type StudentS_idS_usernameCompoundUniqueInput = {
    S_id: string
    S_username: string
  }

  export type StudentCountOrderByAggregateInput = {
    S_id?: SortOrder
    S_fristname?: SortOrder
    S_lastname?: SortOrder
    S_username?: SortOrder
    S_password?: SortOrder
    role?: SortOrder
    S_phone?: SortOrder
    S_email?: SortOrder
    room?: SortOrder
  }

  export type StudentMaxOrderByAggregateInput = {
    S_id?: SortOrder
    S_fristname?: SortOrder
    S_lastname?: SortOrder
    S_username?: SortOrder
    S_password?: SortOrder
    role?: SortOrder
    S_phone?: SortOrder
    S_email?: SortOrder
    room?: SortOrder
  }

  export type StudentMinOrderByAggregateInput = {
    S_id?: SortOrder
    S_fristname?: SortOrder
    S_lastname?: SortOrder
    S_username?: SortOrder
    S_password?: SortOrder
    role?: SortOrder
    S_phone?: SortOrder
    S_email?: SortOrder
    room?: SortOrder
  }

  export type AdvisorListRelationFilter = {
    every?: AdvisorWhereInput
    some?: AdvisorWhereInput
    none?: AdvisorWhereInput
  }

  export type AdvisorOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherT_idT_fristnameT_lastnameCompoundUniqueInput = {
    T_id: number
    T_fristname: string
    T_lastname: string
  }

  export type TeacherCountOrderByAggregateInput = {
    T_id?: SortOrder
    T_fristname?: SortOrder
    T_lastname?: SortOrder
    T_username?: SortOrder
    T_password?: SortOrder
    role?: SortOrder
    T_phone?: SortOrder
    T_email?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    T_id?: SortOrder
    T_phone?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    T_id?: SortOrder
    T_fristname?: SortOrder
    T_lastname?: SortOrder
    T_username?: SortOrder
    T_password?: SortOrder
    role?: SortOrder
    T_phone?: SortOrder
    T_email?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    T_id?: SortOrder
    T_fristname?: SortOrder
    T_lastname?: SortOrder
    T_username?: SortOrder
    T_password?: SortOrder
    role?: SortOrder
    T_phone?: SortOrder
    T_email?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    T_id?: SortOrder
    T_phone?: SortOrder
  }

  export type StudentListRelationFilter = {
    every?: StudentWhereInput
    some?: StudentWhereInput
    none?: StudentWhereInput
  }

  export type StudentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassroomCountOrderByAggregateInput = {
    roomname?: SortOrder
  }

  export type ClassroomMaxOrderByAggregateInput = {
    roomname?: SortOrder
  }

  export type ClassroomMinOrderByAggregateInput = {
    roomname?: SortOrder
  }

  export type TeacherRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type AdvisorCountOrderByAggregateInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
    teacherfristName?: SortOrder
    teacherlastName?: SortOrder
    roomName?: SortOrder
  }

  export type AdvisorAvgOrderByAggregateInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
  }

  export type AdvisorMaxOrderByAggregateInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
    teacherfristName?: SortOrder
    teacherlastName?: SortOrder
    roomName?: SortOrder
  }

  export type AdvisorMinOrderByAggregateInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
    teacherfristName?: SortOrder
    teacherlastName?: SortOrder
    roomName?: SortOrder
  }

  export type AdvisorSumOrderByAggregateInput = {
    Advisor_id?: SortOrder
    teacherId?: SortOrder
  }

  export type CategoryListRelationFilter = {
    every?: CategoryWhereInput
    some?: CategoryWhereInput
    none?: CategoryWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type CategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MajorCountOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MajorMaxOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorMinOrderByAggregateInput = {
    id?: SortOrder
    majorNameTH?: SortOrder
    majorNameENG?: SortOrder
    majorYear?: SortOrder
    majorUnit?: SortOrder
    majorStatus?: SortOrder
    majorCode?: SortOrder
    majorSupervisor?: SortOrder
  }

  export type MajorSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type MajorRelationFilter = {
    is?: MajorWhereInput
    isNot?: MajorWhereInput
  }

  export type GroupListRelationFilter = {
    every?: GroupWhereInput
    some?: GroupWhereInput
    none?: GroupWhereInput
  }

  export type GroupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    id?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    categoryName?: SortOrder
    categoryUnit?: SortOrder
    majorId?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    id?: SortOrder
    majorId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type GroupNullableRelationFilter = {
    is?: GroupWhereInput | null
    isNot?: GroupWhereInput | null
  }

  export type GroupCountOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrder
  }

  export type GroupAvgOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrder
  }

  export type GroupMaxOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrder
  }

  export type GroupMinOrderByAggregateInput = {
    id?: SortOrder
    groupName?: SortOrder
    groupUnit?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrder
  }

  export type GroupSumOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    parentGroupId?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    id?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    courseCode?: SortOrder
    courseNameTH?: SortOrder
    courseNameENG?: SortOrder
    courseYear?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    id?: SortOrder
    courseUnit?: SortOrder
    majorId?: SortOrder
    categoryId?: SortOrder
    groupId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ClassroomCreateNestedOneWithoutStudentsInput = {
    create?: XOR<ClassroomCreateWithoutStudentsInput, ClassroomUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassroomCreateOrConnectWithoutStudentsInput
    connect?: ClassroomWhereUniqueInput
  }

  export type ClassroomUpdateOneRequiredWithoutStudentsNestedInput = {
    create?: XOR<ClassroomCreateWithoutStudentsInput, ClassroomUncheckedCreateWithoutStudentsInput>
    connectOrCreate?: ClassroomCreateOrConnectWithoutStudentsInput
    upsert?: ClassroomUpsertWithoutStudentsInput
    connect?: ClassroomWhereUniqueInput
    update?: XOR<XOR<ClassroomUpdateToOneWithWhereWithoutStudentsInput, ClassroomUpdateWithoutStudentsInput>, ClassroomUncheckedUpdateWithoutStudentsInput>
  }

  export type AdvisorCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput> | AdvisorCreateWithoutTeacherInput[] | AdvisorUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutTeacherInput | AdvisorCreateOrConnectWithoutTeacherInput[]
    createMany?: AdvisorCreateManyTeacherInputEnvelope
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
  }

  export type AdvisorUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput> | AdvisorCreateWithoutTeacherInput[] | AdvisorUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutTeacherInput | AdvisorCreateOrConnectWithoutTeacherInput[]
    createMany?: AdvisorCreateManyTeacherInputEnvelope
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
  }

  export type AdvisorUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput> | AdvisorCreateWithoutTeacherInput[] | AdvisorUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutTeacherInput | AdvisorCreateOrConnectWithoutTeacherInput[]
    upsert?: AdvisorUpsertWithWhereUniqueWithoutTeacherInput | AdvisorUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AdvisorCreateManyTeacherInputEnvelope
    set?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    disconnect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    delete?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    update?: AdvisorUpdateWithWhereUniqueWithoutTeacherInput | AdvisorUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AdvisorUpdateManyWithWhereWithoutTeacherInput | AdvisorUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
  }

  export type AdvisorUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput> | AdvisorCreateWithoutTeacherInput[] | AdvisorUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutTeacherInput | AdvisorCreateOrConnectWithoutTeacherInput[]
    upsert?: AdvisorUpsertWithWhereUniqueWithoutTeacherInput | AdvisorUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: AdvisorCreateManyTeacherInputEnvelope
    set?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    disconnect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    delete?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    update?: AdvisorUpdateWithWhereUniqueWithoutTeacherInput | AdvisorUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: AdvisorUpdateManyWithWhereWithoutTeacherInput | AdvisorUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
  }

  export type AdvisorCreateNestedManyWithoutClassroomInput = {
    create?: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput> | AdvisorCreateWithoutClassroomInput[] | AdvisorUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutClassroomInput | AdvisorCreateOrConnectWithoutClassroomInput[]
    createMany?: AdvisorCreateManyClassroomInputEnvelope
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
  }

  export type StudentCreateNestedManyWithoutClassroomInput = {
    create?: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput> | StudentCreateWithoutClassroomInput[] | StudentUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassroomInput | StudentCreateOrConnectWithoutClassroomInput[]
    createMany?: StudentCreateManyClassroomInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AdvisorUncheckedCreateNestedManyWithoutClassroomInput = {
    create?: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput> | AdvisorCreateWithoutClassroomInput[] | AdvisorUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutClassroomInput | AdvisorCreateOrConnectWithoutClassroomInput[]
    createMany?: AdvisorCreateManyClassroomInputEnvelope
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
  }

  export type StudentUncheckedCreateNestedManyWithoutClassroomInput = {
    create?: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput> | StudentCreateWithoutClassroomInput[] | StudentUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassroomInput | StudentCreateOrConnectWithoutClassroomInput[]
    createMany?: StudentCreateManyClassroomInputEnvelope
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
  }

  export type AdvisorUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput> | AdvisorCreateWithoutClassroomInput[] | AdvisorUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutClassroomInput | AdvisorCreateOrConnectWithoutClassroomInput[]
    upsert?: AdvisorUpsertWithWhereUniqueWithoutClassroomInput | AdvisorUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: AdvisorCreateManyClassroomInputEnvelope
    set?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    disconnect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    delete?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    update?: AdvisorUpdateWithWhereUniqueWithoutClassroomInput | AdvisorUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: AdvisorUpdateManyWithWhereWithoutClassroomInput | AdvisorUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
  }

  export type StudentUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput> | StudentCreateWithoutClassroomInput[] | StudentUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassroomInput | StudentCreateOrConnectWithoutClassroomInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassroomInput | StudentUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: StudentCreateManyClassroomInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassroomInput | StudentUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassroomInput | StudentUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type AdvisorUncheckedUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput> | AdvisorCreateWithoutClassroomInput[] | AdvisorUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: AdvisorCreateOrConnectWithoutClassroomInput | AdvisorCreateOrConnectWithoutClassroomInput[]
    upsert?: AdvisorUpsertWithWhereUniqueWithoutClassroomInput | AdvisorUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: AdvisorCreateManyClassroomInputEnvelope
    set?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    disconnect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    delete?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    connect?: AdvisorWhereUniqueInput | AdvisorWhereUniqueInput[]
    update?: AdvisorUpdateWithWhereUniqueWithoutClassroomInput | AdvisorUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: AdvisorUpdateManyWithWhereWithoutClassroomInput | AdvisorUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
  }

  export type StudentUncheckedUpdateManyWithoutClassroomNestedInput = {
    create?: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput> | StudentCreateWithoutClassroomInput[] | StudentUncheckedCreateWithoutClassroomInput[]
    connectOrCreate?: StudentCreateOrConnectWithoutClassroomInput | StudentCreateOrConnectWithoutClassroomInput[]
    upsert?: StudentUpsertWithWhereUniqueWithoutClassroomInput | StudentUpsertWithWhereUniqueWithoutClassroomInput[]
    createMany?: StudentCreateManyClassroomInputEnvelope
    set?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    disconnect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    delete?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    connect?: StudentWhereUniqueInput | StudentWhereUniqueInput[]
    update?: StudentUpdateWithWhereUniqueWithoutClassroomInput | StudentUpdateWithWhereUniqueWithoutClassroomInput[]
    updateMany?: StudentUpdateManyWithWhereWithoutClassroomInput | StudentUpdateManyWithWhereWithoutClassroomInput[]
    deleteMany?: StudentScalarWhereInput | StudentScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutAdvisorroomsInput = {
    create?: XOR<TeacherCreateWithoutAdvisorroomsInput, TeacherUncheckedCreateWithoutAdvisorroomsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAdvisorroomsInput
    connect?: TeacherWhereUniqueInput
  }

  export type ClassroomCreateNestedOneWithoutTeachersInput = {
    create?: XOR<ClassroomCreateWithoutTeachersInput, ClassroomUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: ClassroomCreateOrConnectWithoutTeachersInput
    connect?: ClassroomWhereUniqueInput
  }

  export type TeacherUpdateOneRequiredWithoutAdvisorroomsNestedInput = {
    create?: XOR<TeacherCreateWithoutAdvisorroomsInput, TeacherUncheckedCreateWithoutAdvisorroomsInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutAdvisorroomsInput
    upsert?: TeacherUpsertWithoutAdvisorroomsInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutAdvisorroomsInput, TeacherUpdateWithoutAdvisorroomsInput>, TeacherUncheckedUpdateWithoutAdvisorroomsInput>
  }

  export type ClassroomUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<ClassroomCreateWithoutTeachersInput, ClassroomUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: ClassroomCreateOrConnectWithoutTeachersInput
    upsert?: ClassroomUpsertWithoutTeachersInput
    connect?: ClassroomWhereUniqueInput
    update?: XOR<XOR<ClassroomUpdateToOneWithWhereWithoutTeachersInput, ClassroomUpdateWithoutTeachersInput>, ClassroomUncheckedUpdateWithoutTeachersInput>
  }

  export type CategoryCreateNestedManyWithoutMajorInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutMajorInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutMajorInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutMajorInput | CategoryUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutMajorInput | CategoryUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutMajorInput | CategoryUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutMajorInput | CourseUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutMajorInput | CourseUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutMajorInput | CourseUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CategoryUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput> | CategoryCreateWithoutMajorInput[] | CategoryUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CategoryCreateOrConnectWithoutMajorInput | CategoryCreateOrConnectWithoutMajorInput[]
    upsert?: CategoryUpsertWithWhereUniqueWithoutMajorInput | CategoryUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CategoryCreateManyMajorInputEnvelope
    set?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    disconnect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    delete?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    connect?: CategoryWhereUniqueInput | CategoryWhereUniqueInput[]
    update?: CategoryUpdateWithWhereUniqueWithoutMajorInput | CategoryUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CategoryUpdateManyWithWhereWithoutMajorInput | CategoryUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutMajorNestedInput = {
    create?: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput> | CourseCreateWithoutMajorInput[] | CourseUncheckedCreateWithoutMajorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutMajorInput | CourseCreateOrConnectWithoutMajorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutMajorInput | CourseUpsertWithWhereUniqueWithoutMajorInput[]
    createMany?: CourseCreateManyMajorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutMajorInput | CourseUpdateWithWhereUniqueWithoutMajorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutMajorInput | CourseUpdateManyWithWhereWithoutMajorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type MajorCreateNestedOneWithoutCategoriesInput = {
    create?: XOR<MajorCreateWithoutCategoriesInput, MajorUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCategoriesInput
    connect?: MajorWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type MajorUpdateOneRequiredWithoutCategoriesNestedInput = {
    create?: XOR<MajorCreateWithoutCategoriesInput, MajorUncheckedCreateWithoutCategoriesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCategoriesInput
    upsert?: MajorUpsertWithoutCategoriesInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutCategoriesInput, MajorUpdateWithoutCategoriesInput>, MajorUncheckedUpdateWithoutCategoriesInput>
  }

  export type GroupUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutCategoryInput | GroupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutCategoryInput | GroupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutCategoryInput | GroupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCategoryInput | CourseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCategoryInput | CourseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCategoryInput | CourseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput> | GroupCreateWithoutCategoryInput[] | GroupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutCategoryInput | GroupCreateOrConnectWithoutCategoryInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutCategoryInput | GroupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: GroupCreateManyCategoryInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutCategoryInput | GroupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutCategoryInput | GroupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput> | CourseCreateWithoutCategoryInput[] | CourseUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCategoryInput | CourseCreateOrConnectWithoutCategoryInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCategoryInput | CourseUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CourseCreateManyCategoryInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCategoryInput | CourseUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCategoryInput | CourseUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutGroupsInput = {
    create?: XOR<CategoryCreateWithoutGroupsInput, CategoryUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutGroupsInput
    connect?: CategoryWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutSubgroupsInput = {
    create?: XOR<GroupCreateWithoutSubgroupsInput, GroupUncheckedCreateWithoutSubgroupsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutSubgroupsInput
    connect?: GroupWhereUniqueInput
  }

  export type GroupCreateNestedManyWithoutParentGroupInput = {
    create?: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput> | GroupCreateWithoutParentGroupInput[] | GroupUncheckedCreateWithoutParentGroupInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutParentGroupInput | GroupCreateOrConnectWithoutParentGroupInput[]
    createMany?: GroupCreateManyParentGroupInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutGroupInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type GroupUncheckedCreateNestedManyWithoutParentGroupInput = {
    create?: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput> | GroupCreateWithoutParentGroupInput[] | GroupUncheckedCreateWithoutParentGroupInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutParentGroupInput | GroupCreateOrConnectWithoutParentGroupInput[]
    createMany?: GroupCreateManyParentGroupInputEnvelope
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type CategoryUpdateOneRequiredWithoutGroupsNestedInput = {
    create?: XOR<CategoryCreateWithoutGroupsInput, CategoryUncheckedCreateWithoutGroupsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutGroupsInput
    upsert?: CategoryUpsertWithoutGroupsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutGroupsInput, CategoryUpdateWithoutGroupsInput>, CategoryUncheckedUpdateWithoutGroupsInput>
  }

  export type GroupUpdateOneWithoutSubgroupsNestedInput = {
    create?: XOR<GroupCreateWithoutSubgroupsInput, GroupUncheckedCreateWithoutSubgroupsInput>
    connectOrCreate?: GroupCreateOrConnectWithoutSubgroupsInput
    upsert?: GroupUpsertWithoutSubgroupsInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutSubgroupsInput, GroupUpdateWithoutSubgroupsInput>, GroupUncheckedUpdateWithoutSubgroupsInput>
  }

  export type GroupUpdateManyWithoutParentGroupNestedInput = {
    create?: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput> | GroupCreateWithoutParentGroupInput[] | GroupUncheckedCreateWithoutParentGroupInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutParentGroupInput | GroupCreateOrConnectWithoutParentGroupInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutParentGroupInput | GroupUpsertWithWhereUniqueWithoutParentGroupInput[]
    createMany?: GroupCreateManyParentGroupInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutParentGroupInput | GroupUpdateWithWhereUniqueWithoutParentGroupInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutParentGroupInput | GroupUpdateManyWithWhereWithoutParentGroupInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutGroupNestedInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutGroupInput | CourseUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutGroupInput | CourseUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutGroupInput | CourseUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type GroupUncheckedUpdateManyWithoutParentGroupNestedInput = {
    create?: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput> | GroupCreateWithoutParentGroupInput[] | GroupUncheckedCreateWithoutParentGroupInput[]
    connectOrCreate?: GroupCreateOrConnectWithoutParentGroupInput | GroupCreateOrConnectWithoutParentGroupInput[]
    upsert?: GroupUpsertWithWhereUniqueWithoutParentGroupInput | GroupUpsertWithWhereUniqueWithoutParentGroupInput[]
    createMany?: GroupCreateManyParentGroupInputEnvelope
    set?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    disconnect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    delete?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    connect?: GroupWhereUniqueInput | GroupWhereUniqueInput[]
    update?: GroupUpdateWithWhereUniqueWithoutParentGroupInput | GroupUpdateWithWhereUniqueWithoutParentGroupInput[]
    updateMany?: GroupUpdateManyWithWhereWithoutParentGroupInput | GroupUpdateManyWithWhereWithoutParentGroupInput[]
    deleteMany?: GroupScalarWhereInput | GroupScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutGroupNestedInput = {
    create?: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput> | CourseCreateWithoutGroupInput[] | CourseUncheckedCreateWithoutGroupInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutGroupInput | CourseCreateOrConnectWithoutGroupInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutGroupInput | CourseUpsertWithWhereUniqueWithoutGroupInput[]
    createMany?: CourseCreateManyGroupInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutGroupInput | CourseUpdateWithWhereUniqueWithoutGroupInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutGroupInput | CourseUpdateManyWithWhereWithoutGroupInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type MajorCreateNestedOneWithoutCoursesInput = {
    create?: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCoursesInput
    connect?: MajorWhereUniqueInput
  }

  export type CategoryCreateNestedOneWithoutCoursesInput = {
    create?: XOR<CategoryCreateWithoutCoursesInput, CategoryUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCoursesInput
    connect?: CategoryWhereUniqueInput
  }

  export type GroupCreateNestedOneWithoutCoursesInput = {
    create?: XOR<GroupCreateWithoutCoursesInput, GroupUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutCoursesInput
    connect?: GroupWhereUniqueInput
  }

  export type MajorUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: MajorCreateOrConnectWithoutCoursesInput
    upsert?: MajorUpsertWithoutCoursesInput
    connect?: MajorWhereUniqueInput
    update?: XOR<XOR<MajorUpdateToOneWithWhereWithoutCoursesInput, MajorUpdateWithoutCoursesInput>, MajorUncheckedUpdateWithoutCoursesInput>
  }

  export type CategoryUpdateOneRequiredWithoutCoursesNestedInput = {
    create?: XOR<CategoryCreateWithoutCoursesInput, CategoryUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutCoursesInput
    upsert?: CategoryUpsertWithoutCoursesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutCoursesInput, CategoryUpdateWithoutCoursesInput>, CategoryUncheckedUpdateWithoutCoursesInput>
  }

  export type GroupUpdateOneWithoutCoursesNestedInput = {
    create?: XOR<GroupCreateWithoutCoursesInput, GroupUncheckedCreateWithoutCoursesInput>
    connectOrCreate?: GroupCreateOrConnectWithoutCoursesInput
    upsert?: GroupUpsertWithoutCoursesInput
    disconnect?: GroupWhereInput | boolean
    delete?: GroupWhereInput | boolean
    connect?: GroupWhereUniqueInput
    update?: XOR<XOR<GroupUpdateToOneWithWhereWithoutCoursesInput, GroupUpdateWithoutCoursesInput>, GroupUncheckedUpdateWithoutCoursesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ClassroomCreateWithoutStudentsInput = {
    roomname: string
    teachers?: AdvisorCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomUncheckedCreateWithoutStudentsInput = {
    roomname: string
    teachers?: AdvisorUncheckedCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomCreateOrConnectWithoutStudentsInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutStudentsInput, ClassroomUncheckedCreateWithoutStudentsInput>
  }

  export type ClassroomUpsertWithoutStudentsInput = {
    update: XOR<ClassroomUpdateWithoutStudentsInput, ClassroomUncheckedUpdateWithoutStudentsInput>
    create: XOR<ClassroomCreateWithoutStudentsInput, ClassroomUncheckedCreateWithoutStudentsInput>
    where?: ClassroomWhereInput
  }

  export type ClassroomUpdateToOneWithWhereWithoutStudentsInput = {
    where?: ClassroomWhereInput
    data: XOR<ClassroomUpdateWithoutStudentsInput, ClassroomUncheckedUpdateWithoutStudentsInput>
  }

  export type ClassroomUpdateWithoutStudentsInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    teachers?: AdvisorUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutStudentsInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    teachers?: AdvisorUncheckedUpdateManyWithoutClassroomNestedInput
  }

  export type AdvisorCreateWithoutTeacherInput = {
    classroom: ClassroomCreateNestedOneWithoutTeachersInput
  }

  export type AdvisorUncheckedCreateWithoutTeacherInput = {
    Advisor_id?: number
    roomName: string
  }

  export type AdvisorCreateOrConnectWithoutTeacherInput = {
    where: AdvisorWhereUniqueInput
    create: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput>
  }

  export type AdvisorCreateManyTeacherInputEnvelope = {
    data: AdvisorCreateManyTeacherInput | AdvisorCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type AdvisorUpsertWithWhereUniqueWithoutTeacherInput = {
    where: AdvisorWhereUniqueInput
    update: XOR<AdvisorUpdateWithoutTeacherInput, AdvisorUncheckedUpdateWithoutTeacherInput>
    create: XOR<AdvisorCreateWithoutTeacherInput, AdvisorUncheckedCreateWithoutTeacherInput>
  }

  export type AdvisorUpdateWithWhereUniqueWithoutTeacherInput = {
    where: AdvisorWhereUniqueInput
    data: XOR<AdvisorUpdateWithoutTeacherInput, AdvisorUncheckedUpdateWithoutTeacherInput>
  }

  export type AdvisorUpdateManyWithWhereWithoutTeacherInput = {
    where: AdvisorScalarWhereInput
    data: XOR<AdvisorUpdateManyMutationInput, AdvisorUncheckedUpdateManyWithoutTeacherInput>
  }

  export type AdvisorScalarWhereInput = {
    AND?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
    OR?: AdvisorScalarWhereInput[]
    NOT?: AdvisorScalarWhereInput | AdvisorScalarWhereInput[]
    Advisor_id?: IntFilter<"Advisor"> | number
    teacherId?: IntFilter<"Advisor"> | number
    teacherfristName?: StringFilter<"Advisor"> | string
    teacherlastName?: StringFilter<"Advisor"> | string
    roomName?: StringFilter<"Advisor"> | string
  }

  export type AdvisorCreateWithoutClassroomInput = {
    teacher: TeacherCreateNestedOneWithoutAdvisorroomsInput
  }

  export type AdvisorUncheckedCreateWithoutClassroomInput = {
    Advisor_id?: number
    teacherId: number
    teacherfristName: string
    teacherlastName: string
  }

  export type AdvisorCreateOrConnectWithoutClassroomInput = {
    where: AdvisorWhereUniqueInput
    create: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput>
  }

  export type AdvisorCreateManyClassroomInputEnvelope = {
    data: AdvisorCreateManyClassroomInput | AdvisorCreateManyClassroomInput[]
    skipDuplicates?: boolean
  }

  export type StudentCreateWithoutClassroomInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
  }

  export type StudentUncheckedCreateWithoutClassroomInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
  }

  export type StudentCreateOrConnectWithoutClassroomInput = {
    where: StudentWhereUniqueInput
    create: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput>
  }

  export type StudentCreateManyClassroomInputEnvelope = {
    data: StudentCreateManyClassroomInput | StudentCreateManyClassroomInput[]
    skipDuplicates?: boolean
  }

  export type AdvisorUpsertWithWhereUniqueWithoutClassroomInput = {
    where: AdvisorWhereUniqueInput
    update: XOR<AdvisorUpdateWithoutClassroomInput, AdvisorUncheckedUpdateWithoutClassroomInput>
    create: XOR<AdvisorCreateWithoutClassroomInput, AdvisorUncheckedCreateWithoutClassroomInput>
  }

  export type AdvisorUpdateWithWhereUniqueWithoutClassroomInput = {
    where: AdvisorWhereUniqueInput
    data: XOR<AdvisorUpdateWithoutClassroomInput, AdvisorUncheckedUpdateWithoutClassroomInput>
  }

  export type AdvisorUpdateManyWithWhereWithoutClassroomInput = {
    where: AdvisorScalarWhereInput
    data: XOR<AdvisorUpdateManyMutationInput, AdvisorUncheckedUpdateManyWithoutClassroomInput>
  }

  export type StudentUpsertWithWhereUniqueWithoutClassroomInput = {
    where: StudentWhereUniqueInput
    update: XOR<StudentUpdateWithoutClassroomInput, StudentUncheckedUpdateWithoutClassroomInput>
    create: XOR<StudentCreateWithoutClassroomInput, StudentUncheckedCreateWithoutClassroomInput>
  }

  export type StudentUpdateWithWhereUniqueWithoutClassroomInput = {
    where: StudentWhereUniqueInput
    data: XOR<StudentUpdateWithoutClassroomInput, StudentUncheckedUpdateWithoutClassroomInput>
  }

  export type StudentUpdateManyWithWhereWithoutClassroomInput = {
    where: StudentScalarWhereInput
    data: XOR<StudentUpdateManyMutationInput, StudentUncheckedUpdateManyWithoutClassroomInput>
  }

  export type StudentScalarWhereInput = {
    AND?: StudentScalarWhereInput | StudentScalarWhereInput[]
    OR?: StudentScalarWhereInput[]
    NOT?: StudentScalarWhereInput | StudentScalarWhereInput[]
    S_id?: StringFilter<"Student"> | string
    S_fristname?: StringFilter<"Student"> | string
    S_lastname?: StringFilter<"Student"> | string
    S_username?: StringFilter<"Student"> | string
    S_password?: StringFilter<"Student"> | string
    role?: EnumRoleFilter<"Student"> | $Enums.Role
    S_phone?: StringNullableFilter<"Student"> | string | null
    S_email?: StringNullableFilter<"Student"> | string | null
    room?: StringFilter<"Student"> | string
  }

  export type TeacherCreateWithoutAdvisorroomsInput = {
    T_id?: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role?: $Enums.Role
    T_phone?: number | null
    T_email?: string | null
  }

  export type TeacherUncheckedCreateWithoutAdvisorroomsInput = {
    T_id?: number
    T_fristname: string
    T_lastname: string
    T_username: string
    T_password: string
    role?: $Enums.Role
    T_phone?: number | null
    T_email?: string | null
  }

  export type TeacherCreateOrConnectWithoutAdvisorroomsInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutAdvisorroomsInput, TeacherUncheckedCreateWithoutAdvisorroomsInput>
  }

  export type ClassroomCreateWithoutTeachersInput = {
    roomname: string
    students?: StudentCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomUncheckedCreateWithoutTeachersInput = {
    roomname: string
    students?: StudentUncheckedCreateNestedManyWithoutClassroomInput
  }

  export type ClassroomCreateOrConnectWithoutTeachersInput = {
    where: ClassroomWhereUniqueInput
    create: XOR<ClassroomCreateWithoutTeachersInput, ClassroomUncheckedCreateWithoutTeachersInput>
  }

  export type TeacherUpsertWithoutAdvisorroomsInput = {
    update: XOR<TeacherUpdateWithoutAdvisorroomsInput, TeacherUncheckedUpdateWithoutAdvisorroomsInput>
    create: XOR<TeacherCreateWithoutAdvisorroomsInput, TeacherUncheckedCreateWithoutAdvisorroomsInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutAdvisorroomsInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutAdvisorroomsInput, TeacherUncheckedUpdateWithoutAdvisorroomsInput>
  }

  export type TeacherUpdateWithoutAdvisorroomsInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeacherUncheckedUpdateWithoutAdvisorroomsInput = {
    T_id?: IntFieldUpdateOperationsInput | number
    T_fristname?: StringFieldUpdateOperationsInput | string
    T_lastname?: StringFieldUpdateOperationsInput | string
    T_username?: StringFieldUpdateOperationsInput | string
    T_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    T_phone?: NullableIntFieldUpdateOperationsInput | number | null
    T_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ClassroomUpsertWithoutTeachersInput = {
    update: XOR<ClassroomUpdateWithoutTeachersInput, ClassroomUncheckedUpdateWithoutTeachersInput>
    create: XOR<ClassroomCreateWithoutTeachersInput, ClassroomUncheckedCreateWithoutTeachersInput>
    where?: ClassroomWhereInput
  }

  export type ClassroomUpdateToOneWithWhereWithoutTeachersInput = {
    where?: ClassroomWhereInput
    data: XOR<ClassroomUpdateWithoutTeachersInput, ClassroomUncheckedUpdateWithoutTeachersInput>
  }

  export type ClassroomUpdateWithoutTeachersInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    students?: StudentUpdateManyWithoutClassroomNestedInput
  }

  export type ClassroomUncheckedUpdateWithoutTeachersInput = {
    roomname?: StringFieldUpdateOperationsInput | string
    students?: StudentUncheckedUpdateManyWithoutClassroomNestedInput
  }

  export type CategoryCreateWithoutMajorInput = {
    categoryName: string
    categoryUnit: string
    groups?: GroupCreateNestedManyWithoutCategoryInput
    courses?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutMajorInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    groups?: GroupUncheckedCreateNestedManyWithoutCategoryInput
    courses?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput>
  }

  export type CategoryCreateManyMajorInputEnvelope = {
    data: CategoryCreateManyMajorInput | CategoryCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutMajorInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    category: CategoryCreateNestedOneWithoutCoursesInput
    group?: GroupCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutMajorInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    categoryId: number
    groupId?: number | null
  }

  export type CourseCreateOrConnectWithoutMajorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput>
  }

  export type CourseCreateManyMajorInputEnvelope = {
    data: CourseCreateManyMajorInput | CourseCreateManyMajorInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithWhereUniqueWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    update: XOR<CategoryUpdateWithoutMajorInput, CategoryUncheckedUpdateWithoutMajorInput>
    create: XOR<CategoryCreateWithoutMajorInput, CategoryUncheckedCreateWithoutMajorInput>
  }

  export type CategoryUpdateWithWhereUniqueWithoutMajorInput = {
    where: CategoryWhereUniqueInput
    data: XOR<CategoryUpdateWithoutMajorInput, CategoryUncheckedUpdateWithoutMajorInput>
  }

  export type CategoryUpdateManyWithWhereWithoutMajorInput = {
    where: CategoryScalarWhereInput
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyWithoutMajorInput>
  }

  export type CategoryScalarWhereInput = {
    AND?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    OR?: CategoryScalarWhereInput[]
    NOT?: CategoryScalarWhereInput | CategoryScalarWhereInput[]
    id?: IntFilter<"Category"> | number
    categoryName?: StringFilter<"Category"> | string
    categoryUnit?: StringFilter<"Category"> | string
    majorId?: IntFilter<"Category"> | number
  }

  export type CourseUpsertWithWhereUniqueWithoutMajorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutMajorInput, CourseUncheckedUpdateWithoutMajorInput>
    create: XOR<CourseCreateWithoutMajorInput, CourseUncheckedCreateWithoutMajorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutMajorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutMajorInput, CourseUncheckedUpdateWithoutMajorInput>
  }

  export type CourseUpdateManyWithWhereWithoutMajorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutMajorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: IntFilter<"Course"> | number
    courseCode?: StringFilter<"Course"> | string
    courseNameTH?: StringFilter<"Course"> | string
    courseNameENG?: StringFilter<"Course"> | string
    courseYear?: StringFilter<"Course"> | string
    courseUnit?: IntFilter<"Course"> | number
    majorId?: IntFilter<"Course"> | number
    categoryId?: IntFilter<"Course"> | number
    groupId?: IntNullableFilter<"Course"> | number | null
  }

  export type MajorCreateWithoutCategoriesInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    courses?: CourseCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateWithoutCategoriesInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    courses?: CourseUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorCreateOrConnectWithoutCategoriesInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutCategoriesInput, MajorUncheckedCreateWithoutCategoriesInput>
  }

  export type GroupCreateWithoutCategoryInput = {
    groupName: string
    groupUnit: string
    parentGroup?: GroupCreateNestedOneWithoutSubgroupsInput
    subgroups?: GroupCreateNestedManyWithoutParentGroupInput
    courses?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutCategoryInput = {
    id?: number
    groupName: string
    groupUnit: string
    parentGroupId?: number | null
    subgroups?: GroupUncheckedCreateNestedManyWithoutParentGroupInput
    courses?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput>
  }

  export type GroupCreateManyCategoryInputEnvelope = {
    data: GroupCreateManyCategoryInput | GroupCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCategoryInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCoursesInput
    group?: GroupCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutCategoryInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId?: number | null
  }

  export type CourseCreateOrConnectWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput>
  }

  export type CourseCreateManyCategoryInputEnvelope = {
    data: CourseCreateManyCategoryInput | CourseCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MajorUpsertWithoutCategoriesInput = {
    update: XOR<MajorUpdateWithoutCategoriesInput, MajorUncheckedUpdateWithoutCategoriesInput>
    create: XOR<MajorCreateWithoutCategoriesInput, MajorUncheckedCreateWithoutCategoriesInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutCategoriesInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutCategoriesInput, MajorUncheckedUpdateWithoutCategoriesInput>
  }

  export type MajorUpdateWithoutCategoriesInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    courses?: CourseUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutCategoriesInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    courses?: CourseUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type GroupUpsertWithWhereUniqueWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutCategoryInput, GroupUncheckedUpdateWithoutCategoryInput>
    create: XOR<GroupCreateWithoutCategoryInput, GroupUncheckedCreateWithoutCategoryInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutCategoryInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutCategoryInput, GroupUncheckedUpdateWithoutCategoryInput>
  }

  export type GroupUpdateManyWithWhereWithoutCategoryInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutCategoryInput>
  }

  export type GroupScalarWhereInput = {
    AND?: GroupScalarWhereInput | GroupScalarWhereInput[]
    OR?: GroupScalarWhereInput[]
    NOT?: GroupScalarWhereInput | GroupScalarWhereInput[]
    id?: IntFilter<"Group"> | number
    groupName?: StringFilter<"Group"> | string
    groupUnit?: StringFilter<"Group"> | string
    categoryId?: IntFilter<"Group"> | number
    parentGroupId?: IntNullableFilter<"Group"> | number | null
  }

  export type CourseUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCategoryInput, CourseUncheckedUpdateWithoutCategoryInput>
    create: XOR<CourseCreateWithoutCategoryInput, CourseUncheckedCreateWithoutCategoryInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCategoryInput, CourseUncheckedUpdateWithoutCategoryInput>
  }

  export type CourseUpdateManyWithWhereWithoutCategoryInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CategoryCreateWithoutGroupsInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoriesInput
    courses?: CourseCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutGroupsInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    courses?: CourseUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutGroupsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutGroupsInput, CategoryUncheckedCreateWithoutGroupsInput>
  }

  export type GroupCreateWithoutSubgroupsInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupsInput
    parentGroup?: GroupCreateNestedOneWithoutSubgroupsInput
    courses?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutSubgroupsInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    parentGroupId?: number | null
    courses?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutSubgroupsInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutSubgroupsInput, GroupUncheckedCreateWithoutSubgroupsInput>
  }

  export type GroupCreateWithoutParentGroupInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupsInput
    subgroups?: GroupCreateNestedManyWithoutParentGroupInput
    courses?: CourseCreateNestedManyWithoutGroupInput
  }

  export type GroupUncheckedCreateWithoutParentGroupInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    subgroups?: GroupUncheckedCreateNestedManyWithoutParentGroupInput
    courses?: CourseUncheckedCreateNestedManyWithoutGroupInput
  }

  export type GroupCreateOrConnectWithoutParentGroupInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput>
  }

  export type GroupCreateManyParentGroupInputEnvelope = {
    data: GroupCreateManyParentGroupInput | GroupCreateManyParentGroupInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutGroupInput = {
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    major: MajorCreateNestedOneWithoutCoursesInput
    category: CategoryCreateNestedOneWithoutCoursesInput
  }

  export type CourseUncheckedCreateWithoutGroupInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    categoryId: number
  }

  export type CourseCreateOrConnectWithoutGroupInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput>
  }

  export type CourseCreateManyGroupInputEnvelope = {
    data: CourseCreateManyGroupInput | CourseCreateManyGroupInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutGroupsInput = {
    update: XOR<CategoryUpdateWithoutGroupsInput, CategoryUncheckedUpdateWithoutGroupsInput>
    create: XOR<CategoryCreateWithoutGroupsInput, CategoryUncheckedCreateWithoutGroupsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutGroupsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutGroupsInput, CategoryUncheckedUpdateWithoutGroupsInput>
  }

  export type CategoryUpdateWithoutGroupsInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoriesNestedInput
    courses?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutGroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    courses?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type GroupUpsertWithoutSubgroupsInput = {
    update: XOR<GroupUpdateWithoutSubgroupsInput, GroupUncheckedUpdateWithoutSubgroupsInput>
    create: XOR<GroupCreateWithoutSubgroupsInput, GroupUncheckedCreateWithoutSubgroupsInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutSubgroupsInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutSubgroupsInput, GroupUncheckedUpdateWithoutSubgroupsInput>
  }

  export type GroupUpdateWithoutSubgroupsInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupsNestedInput
    parentGroup?: GroupUpdateOneWithoutSubgroupsNestedInput
    courses?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutSubgroupsInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
    courses?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUpsertWithWhereUniqueWithoutParentGroupInput = {
    where: GroupWhereUniqueInput
    update: XOR<GroupUpdateWithoutParentGroupInput, GroupUncheckedUpdateWithoutParentGroupInput>
    create: XOR<GroupCreateWithoutParentGroupInput, GroupUncheckedCreateWithoutParentGroupInput>
  }

  export type GroupUpdateWithWhereUniqueWithoutParentGroupInput = {
    where: GroupWhereUniqueInput
    data: XOR<GroupUpdateWithoutParentGroupInput, GroupUncheckedUpdateWithoutParentGroupInput>
  }

  export type GroupUpdateManyWithWhereWithoutParentGroupInput = {
    where: GroupScalarWhereInput
    data: XOR<GroupUpdateManyMutationInput, GroupUncheckedUpdateManyWithoutParentGroupInput>
  }

  export type CourseUpsertWithWhereUniqueWithoutGroupInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutGroupInput, CourseUncheckedUpdateWithoutGroupInput>
    create: XOR<CourseCreateWithoutGroupInput, CourseUncheckedCreateWithoutGroupInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutGroupInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutGroupInput, CourseUncheckedUpdateWithoutGroupInput>
  }

  export type CourseUpdateManyWithWhereWithoutGroupInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutGroupInput>
  }

  export type MajorCreateWithoutCoursesInput = {
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    categories?: CategoryCreateNestedManyWithoutMajorInput
  }

  export type MajorUncheckedCreateWithoutCoursesInput = {
    id?: number
    majorNameTH: string
    majorNameENG: string
    majorYear: string
    majorUnit: string
    majorStatus: string
    majorCode: string
    majorSupervisor: string
    categories?: CategoryUncheckedCreateNestedManyWithoutMajorInput
  }

  export type MajorCreateOrConnectWithoutCoursesInput = {
    where: MajorWhereUniqueInput
    create: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
  }

  export type CategoryCreateWithoutCoursesInput = {
    categoryName: string
    categoryUnit: string
    major: MajorCreateNestedOneWithoutCategoriesInput
    groups?: GroupCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateWithoutCoursesInput = {
    id?: number
    categoryName: string
    categoryUnit: string
    majorId: number
    groups?: GroupUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryCreateOrConnectWithoutCoursesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutCoursesInput, CategoryUncheckedCreateWithoutCoursesInput>
  }

  export type GroupCreateWithoutCoursesInput = {
    groupName: string
    groupUnit: string
    category: CategoryCreateNestedOneWithoutGroupsInput
    parentGroup?: GroupCreateNestedOneWithoutSubgroupsInput
    subgroups?: GroupCreateNestedManyWithoutParentGroupInput
  }

  export type GroupUncheckedCreateWithoutCoursesInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
    parentGroupId?: number | null
    subgroups?: GroupUncheckedCreateNestedManyWithoutParentGroupInput
  }

  export type GroupCreateOrConnectWithoutCoursesInput = {
    where: GroupWhereUniqueInput
    create: XOR<GroupCreateWithoutCoursesInput, GroupUncheckedCreateWithoutCoursesInput>
  }

  export type MajorUpsertWithoutCoursesInput = {
    update: XOR<MajorUpdateWithoutCoursesInput, MajorUncheckedUpdateWithoutCoursesInput>
    create: XOR<MajorCreateWithoutCoursesInput, MajorUncheckedCreateWithoutCoursesInput>
    where?: MajorWhereInput
  }

  export type MajorUpdateToOneWithWhereWithoutCoursesInput = {
    where?: MajorWhereInput
    data: XOR<MajorUpdateWithoutCoursesInput, MajorUncheckedUpdateWithoutCoursesInput>
  }

  export type MajorUpdateWithoutCoursesInput = {
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUpdateManyWithoutMajorNestedInput
  }

  export type MajorUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    majorNameTH?: StringFieldUpdateOperationsInput | string
    majorNameENG?: StringFieldUpdateOperationsInput | string
    majorYear?: StringFieldUpdateOperationsInput | string
    majorUnit?: StringFieldUpdateOperationsInput | string
    majorStatus?: StringFieldUpdateOperationsInput | string
    majorCode?: StringFieldUpdateOperationsInput | string
    majorSupervisor?: StringFieldUpdateOperationsInput | string
    categories?: CategoryUncheckedUpdateManyWithoutMajorNestedInput
  }

  export type CategoryUpsertWithoutCoursesInput = {
    update: XOR<CategoryUpdateWithoutCoursesInput, CategoryUncheckedUpdateWithoutCoursesInput>
    create: XOR<CategoryCreateWithoutCoursesInput, CategoryUncheckedCreateWithoutCoursesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutCoursesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutCoursesInput, CategoryUncheckedUpdateWithoutCoursesInput>
  }

  export type CategoryUpdateWithoutCoursesInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    major?: MajorUpdateOneRequiredWithoutCategoriesNestedInput
    groups?: GroupUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    majorId?: IntFieldUpdateOperationsInput | number
    groups?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type GroupUpsertWithoutCoursesInput = {
    update: XOR<GroupUpdateWithoutCoursesInput, GroupUncheckedUpdateWithoutCoursesInput>
    create: XOR<GroupCreateWithoutCoursesInput, GroupUncheckedCreateWithoutCoursesInput>
    where?: GroupWhereInput
  }

  export type GroupUpdateToOneWithWhereWithoutCoursesInput = {
    where?: GroupWhereInput
    data: XOR<GroupUpdateWithoutCoursesInput, GroupUncheckedUpdateWithoutCoursesInput>
  }

  export type GroupUpdateWithoutCoursesInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupsNestedInput
    parentGroup?: GroupUpdateOneWithoutSubgroupsNestedInput
    subgroups?: GroupUpdateManyWithoutParentGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutCoursesInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
    subgroups?: GroupUncheckedUpdateManyWithoutParentGroupNestedInput
  }

  export type AdvisorCreateManyTeacherInput = {
    Advisor_id?: number
    roomName: string
  }

  export type AdvisorUpdateWithoutTeacherInput = {
    classroom?: ClassroomUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type AdvisorUncheckedUpdateWithoutTeacherInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
  }

  export type AdvisorUncheckedUpdateManyWithoutTeacherInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    roomName?: StringFieldUpdateOperationsInput | string
  }

  export type AdvisorCreateManyClassroomInput = {
    Advisor_id?: number
    teacherId: number
    teacherfristName: string
    teacherlastName: string
  }

  export type StudentCreateManyClassroomInput = {
    S_id: string
    S_fristname: string
    S_lastname: string
    S_username: string
    S_password: string
    role?: $Enums.Role
    S_phone?: string | null
    S_email?: string | null
  }

  export type AdvisorUpdateWithoutClassroomInput = {
    teacher?: TeacherUpdateOneRequiredWithoutAdvisorroomsNestedInput
  }

  export type AdvisorUncheckedUpdateWithoutClassroomInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherfristName?: StringFieldUpdateOperationsInput | string
    teacherlastName?: StringFieldUpdateOperationsInput | string
  }

  export type AdvisorUncheckedUpdateManyWithoutClassroomInput = {
    Advisor_id?: IntFieldUpdateOperationsInput | number
    teacherId?: IntFieldUpdateOperationsInput | number
    teacherfristName?: StringFieldUpdateOperationsInput | string
    teacherlastName?: StringFieldUpdateOperationsInput | string
  }

  export type StudentUpdateWithoutClassroomInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentUncheckedUpdateWithoutClassroomInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StudentUncheckedUpdateManyWithoutClassroomInput = {
    S_id?: StringFieldUpdateOperationsInput | string
    S_fristname?: StringFieldUpdateOperationsInput | string
    S_lastname?: StringFieldUpdateOperationsInput | string
    S_username?: StringFieldUpdateOperationsInput | string
    S_password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    S_phone?: NullableStringFieldUpdateOperationsInput | string | null
    S_email?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CategoryCreateManyMajorInput = {
    id?: number
    categoryName: string
    categoryUnit: string
  }

  export type CourseCreateManyMajorInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    categoryId: number
    groupId?: number | null
  }

  export type CategoryUpdateWithoutMajorInput = {
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    groups?: GroupUpdateManyWithoutCategoryNestedInput
    courses?: CourseUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
    groups?: GroupUncheckedUpdateManyWithoutCategoryNestedInput
    courses?: CourseUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateManyWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoryName?: StringFieldUpdateOperationsInput | string
    categoryUnit?: StringFieldUpdateOperationsInput | string
  }

  export type CourseUpdateWithoutMajorInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    category?: CategoryUpdateOneRequiredWithoutCoursesNestedInput
    group?: GroupUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateManyWithoutMajorInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GroupCreateManyCategoryInput = {
    id?: number
    groupName: string
    groupUnit: string
    parentGroupId?: number | null
  }

  export type CourseCreateManyCategoryInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    groupId?: number | null
  }

  export type GroupUpdateWithoutCategoryInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    parentGroup?: GroupUpdateOneWithoutSubgroupsNestedInput
    subgroups?: GroupUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
    subgroups?: GroupUncheckedUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    parentGroupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUpdateWithoutCategoryInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    group?: GroupUpdateOneWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type CourseUncheckedUpdateManyWithoutCategoryInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    groupId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type GroupCreateManyParentGroupInput = {
    id?: number
    groupName: string
    groupUnit: string
    categoryId: number
  }

  export type CourseCreateManyGroupInput = {
    id?: number
    courseCode: string
    courseNameTH: string
    courseNameENG: string
    courseYear: string
    courseUnit: number
    majorId: number
    categoryId: number
  }

  export type GroupUpdateWithoutParentGroupInput = {
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    category?: CategoryUpdateOneRequiredWithoutGroupsNestedInput
    subgroups?: GroupUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateWithoutParentGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
    subgroups?: GroupUncheckedUpdateManyWithoutParentGroupNestedInput
    courses?: CourseUncheckedUpdateManyWithoutGroupNestedInput
  }

  export type GroupUncheckedUpdateManyWithoutParentGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    groupName?: StringFieldUpdateOperationsInput | string
    groupUnit?: StringFieldUpdateOperationsInput | string
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUpdateWithoutGroupInput = {
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    major?: MajorUpdateOneRequiredWithoutCoursesNestedInput
    category?: CategoryUpdateOneRequiredWithoutCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }

  export type CourseUncheckedUpdateManyWithoutGroupInput = {
    id?: IntFieldUpdateOperationsInput | number
    courseCode?: StringFieldUpdateOperationsInput | string
    courseNameTH?: StringFieldUpdateOperationsInput | string
    courseNameENG?: StringFieldUpdateOperationsInput | string
    courseYear?: StringFieldUpdateOperationsInput | string
    courseUnit?: IntFieldUpdateOperationsInput | number
    majorId?: IntFieldUpdateOperationsInput | number
    categoryId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TeacherCountOutputTypeDefaultArgs instead
     */
    export type TeacherCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassroomCountOutputTypeDefaultArgs instead
     */
    export type ClassroomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassroomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MajorCountOutputTypeDefaultArgs instead
     */
    export type MajorCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MajorCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupCountOutputTypeDefaultArgs instead
     */
    export type GroupCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdminDefaultArgs instead
     */
    export type AdminArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdminDefaultArgs<ExtArgs>
    /**
     * @deprecated Use COURSE_INSTRUCTORDefaultArgs instead
     */
    export type COURSE_INSTRUCTORArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = COURSE_INSTRUCTORDefaultArgs<ExtArgs>
    /**
     * @deprecated Use StudentDefaultArgs instead
     */
    export type StudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = StudentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeacherDefaultArgs instead
     */
    export type TeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeacherDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ClassroomDefaultArgs instead
     */
    export type ClassroomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ClassroomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdvisorDefaultArgs instead
     */
    export type AdvisorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdvisorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MajorDefaultArgs instead
     */
    export type MajorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MajorDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GroupDefaultArgs instead
     */
    export type GroupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GroupDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CourseDefaultArgs instead
     */
    export type CourseArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CourseDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}